{
  "body": {
    "bound": {
      "height": 14535,
      "left": 16,
      "top": 7,
      "width": 1568
    },
    "computed": {
      "alignment-baseline": "auto",
      "background-attachment": "scroll",
      "background-clip": "border-box",
      "background-color": "rgb(255, 255, 255)",
      "background-image": "none",
      "background-origin": "padding-box",
      "background-position": "0% 0%",
      "background-repeat": "repeat",
      "background-size": "auto auto",
      "baseline-shift": "baseline",
      "border-bottom-color": "rgb(0, 0, 0)",
      "border-bottom-left-radius": "0px",
      "border-bottom-right-radius": "0px",
      "border-bottom-style": "none",
      "border-bottom-width": "0px",
      "border-collapse": "separate",
      "border-left-color": "rgb(0, 0, 0)",
      "border-left-style": "none",
      "border-left-width": "0px",
      "border-right-color": "rgb(0, 0, 0)",
      "border-right-style": "none",
      "border-right-width": "0px",
      "border-top-color": "rgb(0, 0, 0)",
      "border-top-left-radius": "0px",
      "border-top-right-radius": "0px",
      "border-top-style": "none",
      "border-top-width": "0px",
      "bottom": "auto",
      "box-shadow": "none",
      "box-sizing": "content-box",
      "caption-side": "top",
      "clear": "none",
      "clip": "auto",
      "clip-path": "none",
      "clip-rule": "nonzero",
      "color": "rgb(0, 0, 0)",
      "color-interpolation": "srgb",
      "color-interpolation-filters": "linearrgb",
      "color-rendering": "auto",
      "cursor": "auto",
      "direction": "ltr",
      "display": "block",
      "dominant-baseline": "auto",
      "empty-cells": "show",
      "fill": "#000000",
      "fill-opacity": "1",
      "fill-rule": "nonzero",
      "filter": "none",
      "float": "none",
      "flood-color": "rgb(0, 0, 0)",
      "flood-opacity": "1",
      "font-family": "'Lucida Grande', Arial, sans-serif",
      "font-size": "16px",
      "font-style": "normal",
      "font-variant": "normal",
      "font-weight": "normal",
      "glyph-orientation-horizontal": "0deg",
      "glyph-orientation-vertical": "auto",
      "height": "14535px",
      "image-rendering": "auto",
      "kerning": "0",
      "left": "auto",
      "letter-spacing": "normal",
      "lighting-color": "rgb(255, 255, 255)",
      "line-height": "normal",
      "list-style-image": "none",
      "list-style-position": "outside",
      "list-style-type": "disc",
      "margin-bottom": "0px",
      "margin-left": "16px",
      "margin-right": "16px",
      "margin-top": "0px",
      "marker-end": "none",
      "marker-mid": "none",
      "marker-start": "none",
      "mask": "none",
      "max-height": "none",
      "max-width": "none",
      "min-height": "0px",
      "min-width": "0px",
      "opacity": "1",
      "orphans": "2",
      "outline-color": "rgb(0, 0, 0)",
      "outline-style": "none",
      "outline-width": "0px",
      "overflow-x": "visible",
      "overflow-y": "visible",
      "padding-bottom": "0px",
      "padding-left": "0px",
      "padding-right": "0px",
      "padding-top": "0px",
      "page-break-after": "auto",
      "page-break-before": "auto",
      "page-break-inside": "auto",
      "pointer-events": "auto",
      "position": "static",
      "resize": "none",
      "right": "auto",
      "shape-rendering": "auto",
      "speak": "normal",
      "stop-color": "rgb(0, 0, 0)",
      "stop-opacity": "1",
      "stroke": "none",
      "stroke-dasharray": "none",
      "stroke-dashoffset": "0",
      "stroke-linecap": "butt",
      "stroke-linejoin": "miter",
      "stroke-miterlimit": "4",
      "stroke-opacity": "1",
      "stroke-width": "1",
      "table-layout": "auto",
      "text-align": "-webkit-auto",
      "text-anchor": "start",
      "text-decoration": "none",
      "text-indent": "0px",
      "text-overflow": "clip",
      "text-rendering": "auto",
      "text-shadow": "none",
      "text-transform": "none",
      "top": "auto",
      "unicode-bidi": "normal",
      "vector-effect": "none",
      "vertical-align": "baseline",
      "visibility": "visible",
      "white-space": "normal",
      "widows": "2",
      "width": "1568px",
      "word-break": "normal",
      "word-spacing": "0px",
      "word-wrap": "normal",
      "writing-mode": "lr-tb",
      "z-index": "auto",
      "zoom": "1"
    },
    "scroll": {
      "left": 0,
      "top": 0
    }
  },
  "descriptions": [],
  "titles": [
    "6. Expressions — Python v3.3.2 documentation"
  ],
  "url": "http://docs.python.org/3.3/reference/expressions.html",
  "links": [
    "http://docs.python.org/3.3/genindex.html",
    "http://docs.python.org/3.3/py-modindex.html",
    "http://docs.python.org/3.3/reference/simple_stmts.html",
    "http://docs.python.org/3.3/reference/import.html",
    "http://www.python.org/",
    "http://docs.python.org/3.3/index.html",
    "http://docs.python.org/3.3/reference/index.html",
    "http://docs.python.org/3.3/reference/expressions.html#expressions",
    "http://docs.python.org/3.3/reference/expressions.html#arithmetic-conversions",
    "http://docs.python.org/3.3/reference/expressions.html#atoms",
    "http://docs.python.org/3.3/reference/lexical_analysis.html#grammar-token-identifier",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-literal",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-enclosure",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-parenth_form",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-list_display",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-dict_display",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-set_display",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-generator_expression",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-yield_atom",
    "http://docs.python.org/3.3/reference/expressions.html#atom-identifiers",
    "http://docs.python.org/3.3/reference/lexical_analysis.html#identifiers",
    "http://docs.python.org/3.3/reference/executionmodel.html#naming",
    "http://docs.python.org/3.3/library/exceptions.html#NameError",
    "http://docs.python.org/3.3/reference/expressions.html#literals",
    "http://docs.python.org/3.3/reference/lexical_analysis.html#grammar-token-stringliteral",
    "http://docs.python.org/3.3/reference/lexical_analysis.html#grammar-token-bytesliteral",
    "http://docs.python.org/3.3/reference/lexical_analysis.html#grammar-token-integer",
    "http://docs.python.org/3.3/reference/lexical_analysis.html#grammar-token-floatnumber",
    "http://docs.python.org/3.3/reference/lexical_analysis.html#grammar-token-imagnumber",
    "http://docs.python.org/3.3/reference/lexical_analysis.html#literals",
    "http://docs.python.org/3.3/reference/expressions.html#parenthesized-forms",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-expression_list",
    "http://docs.python.org/3.3/reference/expressions.html#displays-for-lists-sets-and-dictionaries",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-expression",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-comp_for",
    "http://docs.python.org/3.3/reference/simple_stmts.html#grammar-token-target_list",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-or_test",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-comp_iter",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-comp_for",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-comp_if",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-expression_nocond",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-comp_iter",
    "http://docs.python.org/3.3/reference/compound_stmts.html#for",
    "http://docs.python.org/3.3/reference/compound_stmts.html#for",
    "http://docs.python.org/3.3/reference/compound_stmts.html#if",
    "http://docs.python.org/3.3/reference/compound_stmts.html#for",
    "http://docs.python.org/3.3/reference/compound_stmts.html#if",
    "http://docs.python.org/3.3/reference/expressions.html#list-displays",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-expression_list",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-comprehension",
    "http://docs.python.org/3.3/reference/expressions.html#set-displays",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-expression_list",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-comprehension",
    "http://docs.python.org/3.3/reference/expressions.html#dictionary-displays",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-key_datum_list",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-dict_comprehension",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-key_datum",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-key_datum",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-expression",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-expression",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-expression",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-expression",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-comp_for",
    "http://docs.python.org/3.3/reference/datamodel.html#types",
    "http://docs.python.org/3.3/glossary.html#term-hashable",
    "http://docs.python.org/3.3/reference/expressions.html#generator-expressions",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-expression",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-comp_for",
    "http://docs.python.org/3.3/reference/expressions.html#generator.__next__",
    "http://docs.python.org/3.3/reference/compound_stmts.html#for",
    "http://docs.python.org/3.3/reference/compound_stmts.html#for",
    "http://docs.python.org/3.3/reference/compound_stmts.html#for",
    "http://docs.python.org/3.3/reference/expressions.html#calls",
    "http://docs.python.org/3.3/reference/expressions.html#yield-expressions",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-yield_expression",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-expression_list",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-expression",
    "http://docs.python.org/3.3/reference/simple_stmts.html#yield",
    "http://docs.python.org/3.3/glossary.html#term-generator",
    "http://docs.python.org/3.3/reference/simple_stmts.html#yield",
    "http://docs.python.org/3.3/reference/simple_stmts.html#yield",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-expression_list",
    "http://docs.python.org/3.3/reference/simple_stmts.html#yield",
    "http://docs.python.org/3.3/reference/simple_stmts.html#yield",
    "http://docs.python.org/3.3/reference/compound_stmts.html#for",
    "http://docs.python.org/3.3/library/functions.html#next",
    "http://docs.python.org/3.3/library/constants.html#None",
    "http://docs.python.org/3.3/reference/simple_stmts.html#yield",
    "http://docs.python.org/3.3/reference/compound_stmts.html#try",
    "http://docs.python.org/3.3/reference/compound_stmts.html#try",
    "http://docs.python.org/3.3/reference/compound_stmts.html#finally",
    "http://docs.python.org/3.3/reference/compound_stmts.html#finally",
    "http://docs.python.org/3.3/library/exceptions.html#AttributeError",
    "http://docs.python.org/3.3/library/exceptions.html#TypeError",
    "http://docs.python.org/3.3/library/exceptions.html#StopIteration",
    "http://docs.python.org/3.3/library/exceptions.html#StopIteration",
    "http://docs.python.org/3.3/reference/simple_stmts.html#yield",
    "http://docs.python.org/3.3/reference/expressions.html#generator-iterator-methods",
    "http://docs.python.org/3.3/library/exceptions.html#ValueError",
    "http://docs.python.org/3.3/reference/expressions.html#generator.__next__",
    "http://docs.python.org/3.3/reference/simple_stmts.html#yield",
    "http://docs.python.org/3.3/reference/expressions.html#generator.__next__",
    "http://docs.python.org/3.3/reference/simple_stmts.html#yield",
    "http://docs.python.org/3.3/library/constants.html#None",
    "http://docs.python.org/3.3/reference/simple_stmts.html#yield",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-expression_list",
    "http://docs.python.org/3.3/library/functions.html#next",
    "http://docs.python.org/3.3/library/exceptions.html#StopIteration",
    "http://docs.python.org/3.3/reference/compound_stmts.html#for",
    "http://docs.python.org/3.3/library/functions.html#next",
    "http://docs.python.org/3.3/reference/expressions.html#generator.send",
    "http://docs.python.org/3.3/reference/simple_stmts.html#yield",
    "http://docs.python.org/3.3/reference/expressions.html#generator.send",
    "http://docs.python.org/3.3/library/exceptions.html#StopIteration",
    "http://docs.python.org/3.3/reference/expressions.html#generator.send",
    "http://docs.python.org/3.3/library/constants.html#None",
    "http://docs.python.org/3.3/reference/simple_stmts.html#yield",
    "http://docs.python.org/3.3/reference/expressions.html#generator.throw",
    "http://docs.python.org/3.3/library/exceptions.html#StopIteration",
    "http://docs.python.org/3.3/reference/expressions.html#generator.close",
    "http://docs.python.org/3.3/library/exceptions.html#GeneratorExit",
    "http://docs.python.org/3.3/library/exceptions.html#StopIteration",
    "http://docs.python.org/3.3/library/exceptions.html#GeneratorExit",
    "http://docs.python.org/3.3/library/exceptions.html#RuntimeError",
    "http://docs.python.org/3.3/reference/expressions.html#generator.close",
    "http://docs.python.org/3.3/reference/expressions.html#examples",
    "http://docs.python.org/3.3/whatsnew/3.3.html#pep-380",
    "http://www.python.org/dev/peps/pep-0255",
    "http://docs.python.org/3.3/reference/simple_stmts.html#yield",
    "http://www.python.org/dev/peps/pep-0342",
    "http://www.python.org/dev/peps/pep-0380",
    "http://docs.python.org/3.3/reference/expressions.html#primaries",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-atom",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-attributeref",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-subscription",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-slicing",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-call",
    "http://docs.python.org/3.3/reference/expressions.html#attribute-references",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-primary",
    "http://docs.python.org/3.3/reference/lexical_analysis.html#grammar-token-identifier",
    "http://docs.python.org/3.3/reference/datamodel.html#object.__getattr__",
    "http://docs.python.org/3.3/library/exceptions.html#AttributeError",
    "http://docs.python.org/3.3/reference/expressions.html#subscriptions",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-primary",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-expression_list",
    "http://docs.python.org/3.3/reference/datamodel.html#object.__getitem__",
    "http://docs.python.org/3.3/reference/datamodel.html#object.__getitem__",
    "http://docs.python.org/3.3/reference/datamodel.html#object.__getitem__",
    "http://docs.python.org/3.3/reference/expressions.html#slicings",
    "http://docs.python.org/3.3/reference/simple_stmts.html#del",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-primary",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-slice_list",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-slice_item",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-slice_item",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-expression",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-proper_slice",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-lower_bound",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-upper_bound",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-stride",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-expression",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-expression",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-expression",
    "http://docs.python.org/3.3/reference/datamodel.html#object.__getitem__",
    "http://docs.python.org/3.3/reference/datamodel.html#types",
    "http://docs.python.org/3.3/reference/expressions.html#calls",
    "http://docs.python.org/3.3/glossary.html#term-function",
    "http://docs.python.org/3.3/glossary.html#term-argument",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-primary",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-argument_list",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-comprehension",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-positional_arguments",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-keyword_arguments",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-expression",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-keyword_arguments",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-expression",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-keyword_arguments",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-expression",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-keyword_arguments",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-expression",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-expression",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-keyword_arguments",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-expression",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-expression",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-expression",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-expression",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-keyword_item",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-keyword_item",
    "http://docs.python.org/3.3/reference/lexical_analysis.html#grammar-token-identifier",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-expression",
    "http://docs.python.org/3.3/reference/datamodel.html#object.__call__",
    "http://docs.python.org/3.3/reference/compound_stmts.html#function",
    "http://docs.python.org/3.3/glossary.html#term-parameter",
    "http://docs.python.org/3.3/library/exceptions.html#TypeError",
    "http://docs.python.org/3.3/library/exceptions.html#TypeError",
    "http://docs.python.org/3.3/c-api/arg.html#PyArg_ParseTuple",
    "http://docs.python.org/3.3/library/exceptions.html#TypeError",
    "http://docs.python.org/3.3/library/exceptions.html#TypeError",
    "http://docs.python.org/3.3/library/exceptions.html#TypeError",
    "http://docs.python.org/3.3/reference/compound_stmts.html#function",
    "http://docs.python.org/3.3/reference/simple_stmts.html#return",
    "http://docs.python.org/3.3/library/functions.html#built-in-funcs",
    "http://docs.python.org/3.3/reference/datamodel.html#object.__call__",
    "http://docs.python.org/3.3/reference/expressions.html#the-power-operator",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-primary",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-u_expr",
    "http://docs.python.org/3.3/library/functions.html#pow",
    "http://docs.python.org/3.3/library/exceptions.html#ZeroDivisionError",
    "http://docs.python.org/3.3/library/functions.html#complex",
    "http://docs.python.org/3.3/library/exceptions.html#ValueError",
    "http://docs.python.org/3.3/reference/expressions.html#unary-arithmetic-and-bitwise-operations",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-power",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-u_expr",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-u_expr",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-u_expr",
    "http://docs.python.org/3.3/library/exceptions.html#TypeError",
    "http://docs.python.org/3.3/reference/expressions.html#binary-arithmetic-operations",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-u_expr",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-m_expr",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-u_expr",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-m_expr",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-u_expr",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-m_expr",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-u_expr",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-m_expr",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-u_expr",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-m_expr",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-a_expr",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-m_expr",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-a_expr",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-m_expr",
    "http://docs.python.org/3.3/library/exceptions.html#ZeroDivisionError",
    "http://docs.python.org/3.3/library/exceptions.html#ZeroDivisionError",
    "http://docs.python.org/3.3/reference/expressions.html#id16",
    "http://docs.python.org/3.3/library/functions.html#divmod",
    "http://docs.python.org/3.3/reference/expressions.html#id17",
    "http://docs.python.org/3.3/library/stdtypes.html#old-string-formatting",
    "http://docs.python.org/3.3/library/functions.html#divmod",
    "http://docs.python.org/3.3/library/functions.html#abs",
    "http://docs.python.org/3.3/reference/expressions.html#shifting-operations",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-a_expr",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-shift_expr",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-a_expr",
    "http://docs.python.org/3.3/library/sys.html#sys.maxsize",
    "http://docs.python.org/3.3/library/sys.html#sys.maxsize",
    "http://docs.python.org/3.3/library/exceptions.html#OverflowError",
    "http://docs.python.org/3.3/reference/expressions.html#binary-bitwise-operations",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-shift_expr",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-and_expr",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-shift_expr",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-and_expr",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-xor_expr",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-and_expr",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-xor_expr",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-or_expr",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-xor_expr",
    "http://docs.python.org/3.3/reference/expressions.html#not-in",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-or_expr",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-comp_operator",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-or_expr",
    "http://docs.python.org/3.3/library/exceptions.html#TypeError",
    "http://docs.python.org/3.3/reference/datamodel.html#object.__gt__",
    "http://docs.python.org/3.3/reference/datamodel.html#customization",
    "http://docs.python.org/3.3/library/functions.html#ord",
    "http://docs.python.org/3.3/reference/expressions.html#id18",
    "http://docs.python.org/3.3/library/exceptions.html#TypeError",
    "http://docs.python.org/3.3/library/functions.html#min",
    "http://docs.python.org/3.3/library/functions.html#max",
    "http://docs.python.org/3.3/library/functions.html#sorted",
    "http://docs.python.org/3.3/reference/expressions.html#in",
    "http://docs.python.org/3.3/reference/expressions.html#not-in",
    "http://docs.python.org/3.3/reference/expressions.html#in",
    "http://docs.python.org/3.3/reference/datamodel.html#object.__contains__",
    "http://docs.python.org/3.3/reference/datamodel.html#object.__contains__",
    "http://docs.python.org/3.3/reference/datamodel.html#object.__iter__",
    "http://docs.python.org/3.3/reference/expressions.html#in",
    "http://docs.python.org/3.3/reference/datamodel.html#object.__getitem__",
    "http://docs.python.org/3.3/library/exceptions.html#IndexError",
    "http://docs.python.org/3.3/reference/expressions.html#in",
    "http://docs.python.org/3.3/reference/expressions.html#not-in",
    "http://docs.python.org/3.3/reference/expressions.html#in",
    "http://docs.python.org/3.3/reference/expressions.html#is",
    "http://docs.python.org/3.3/reference/expressions.html#is-not",
    "http://docs.python.org/3.3/reference/expressions.html#id19",
    "http://docs.python.org/3.3/reference/expressions.html#boolean-operations",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-and_test",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-or_test",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-and_test",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-not_test",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-and_test",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-not_test",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-comparison",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-not_test",
    "http://docs.python.org/3.3/reference/datamodel.html#object.__bool__",
    "http://docs.python.org/3.3/reference/expressions.html#not",
    "http://docs.python.org/3.3/reference/expressions.html#and",
    "http://docs.python.org/3.3/reference/expressions.html#or",
    "http://docs.python.org/3.3/reference/expressions.html#not",
    "http://docs.python.org/3.3/reference/expressions.html#conditional-expressions",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-or_test",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-or_test",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-expression",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-conditional_expression",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-lambda_form",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-or_test",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-lambda_form_nocond",
    "http://www.python.org/dev/peps/pep-0308",
    "http://docs.python.org/3.3/reference/expressions.html#lambda",
    "http://docs.python.org/3.3/reference/compound_stmts.html#grammar-token-parameter_list",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-expression",
    "http://docs.python.org/3.3/reference/compound_stmts.html#grammar-token-parameter_list",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-expression_nocond",
    "http://docs.python.org/3.3/reference/compound_stmts.html#function",
    "http://docs.python.org/3.3/reference/expressions.html#expression-lists",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-expression",
    "http://docs.python.org/3.3/reference/expressions.html#grammar-token-expression",
    "http://docs.python.org/3.3/reference/expressions.html#evaluation-order",
    "http://docs.python.org/3.3/reference/expressions.html#operator-precedence",
    "http://docs.python.org/3.3/reference/expressions.html#comparisons",
    "http://docs.python.org/3.3/reference/expressions.html#lambda",
    "http://docs.python.org/3.3/reference/compound_stmts.html#if",
    "http://docs.python.org/3.3/reference/compound_stmts.html#else",
    "http://docs.python.org/3.3/reference/expressions.html#or",
    "http://docs.python.org/3.3/reference/expressions.html#and",
    "http://docs.python.org/3.3/reference/expressions.html#not",
    "http://docs.python.org/3.3/reference/expressions.html#in",
    "http://docs.python.org/3.3/reference/expressions.html#not-in",
    "http://docs.python.org/3.3/reference/expressions.html#is",
    "http://docs.python.org/3.3/reference/expressions.html#is-not",
    "http://docs.python.org/3.3/reference/expressions.html#id20",
    "http://docs.python.org/3.3/reference/expressions.html#id21",
    "http://docs.python.org/3.3/reference/expressions.html#id8",
    "http://docs.python.org/3.3/library/math.html#math.fmod",
    "http://docs.python.org/3.3/reference/expressions.html#id9",
    "http://docs.python.org/3.3/reference/expressions.html#id11",
    "http://docs.python.org/3.3/library/unicodedata.html#unicodedata.normalize",
    "http://docs.python.org/3.3/reference/expressions.html#id12",
    "http://docs.python.org/3.3/reference/expressions.html#is",
    "http://docs.python.org/3.3/reference/expressions.html#id14",
    "http://docs.python.org/3.3/reference/expressions.html#id15",
    "http://docs.python.org/3.3/contents.html",
    "http://docs.python.org/3.3/reference/expressions.html#",
    "http://docs.python.org/3.3/reference/expressions.html#arithmetic-conversions",
    "http://docs.python.org/3.3/reference/expressions.html#atoms",
    "http://docs.python.org/3.3/reference/expressions.html#atom-identifiers",
    "http://docs.python.org/3.3/reference/expressions.html#literals",
    "http://docs.python.org/3.3/reference/expressions.html#parenthesized-forms",
    "http://docs.python.org/3.3/reference/expressions.html#displays-for-lists-sets-and-dictionaries",
    "http://docs.python.org/3.3/reference/expressions.html#list-displays",
    "http://docs.python.org/3.3/reference/expressions.html#set-displays",
    "http://docs.python.org/3.3/reference/expressions.html#dictionary-displays",
    "http://docs.python.org/3.3/reference/expressions.html#generator-expressions",
    "http://docs.python.org/3.3/reference/expressions.html#yield-expressions",
    "http://docs.python.org/3.3/reference/expressions.html#generator-iterator-methods",
    "http://docs.python.org/3.3/reference/expressions.html#examples",
    "http://docs.python.org/3.3/reference/expressions.html#primaries",
    "http://docs.python.org/3.3/reference/expressions.html#attribute-references",
    "http://docs.python.org/3.3/reference/expressions.html#subscriptions",
    "http://docs.python.org/3.3/reference/expressions.html#slicings",
    "http://docs.python.org/3.3/reference/expressions.html#calls",
    "http://docs.python.org/3.3/reference/expressions.html#the-power-operator",
    "http://docs.python.org/3.3/reference/expressions.html#unary-arithmetic-and-bitwise-operations",
    "http://docs.python.org/3.3/reference/expressions.html#binary-arithmetic-operations",
    "http://docs.python.org/3.3/reference/expressions.html#shifting-operations",
    "http://docs.python.org/3.3/reference/expressions.html#binary-bitwise-operations",
    "http://docs.python.org/3.3/reference/expressions.html#not-in",
    "http://docs.python.org/3.3/reference/expressions.html#boolean-operations",
    "http://docs.python.org/3.3/reference/expressions.html#conditional-expressions",
    "http://docs.python.org/3.3/reference/expressions.html#lambda",
    "http://docs.python.org/3.3/reference/expressions.html#expression-lists",
    "http://docs.python.org/3.3/reference/expressions.html#evaluation-order",
    "http://docs.python.org/3.3/reference/expressions.html#operator-precedence",
    "http://docs.python.org/3.3/reference/import.html",
    "http://docs.python.org/3.3/reference/simple_stmts.html",
    "http://docs.python.org/3.3/bugs.html",
    "http://docs.python.org/3.3/_sources/reference/expressions.txt",
    "http://docs.python.org/3.3/genindex.html",
    "http://docs.python.org/3.3/py-modindex.html",
    "http://docs.python.org/3.3/reference/simple_stmts.html",
    "http://docs.python.org/3.3/reference/import.html",
    "http://www.python.org/",
    "http://docs.python.org/3.3/index.html",
    "http://docs.python.org/3.3/reference/index.html",
    "http://docs.python.org/3.3/copyright.html",
    "http://www.python.org/psf/donations/",
    "http://docs.python.org/3.3/bugs.html",
    "http://sphinx.pocoo.org/"
  ],
  "texts": [
    {
      "bound": {
        "height": 30,
        "left": 1540,
        "top": 14,
        "width": 34
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "float": "right",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "10px",
        "outline-color": "rgb(102, 102, 102)"
      },
      "element": "li.right:nth-of-type(1)",
      "html": "\n          <a href=\"../genindex.html\" title=\"General Index\" accesskey=\"I\">index</a>",
      "path": "div > ul > li",
      "selector": "div.related:nth-of-type(1) > ul:nth-of-type(1) > li.right:nth-of-type(1)",
      "text": [
        "index"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 1473,
        "top": 14,
        "width": 62
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "float": "right",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "5px",
        "outline-color": "rgb(102, 102, 102)"
      },
      "element": "li.right:nth-of-type(2)",
      "html": "\n          <a href=\"../py-modindex.html\" title=\"Python Module Index\">modules</a> |",
      "path": "div > ul > li",
      "selector": "div.related:nth-of-type(1) > ul:nth-of-type(1) > li.right:nth-of-type(2)",
      "text": [
        "modules",
        " |"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 1430,
        "top": 14,
        "width": 38
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "float": "right",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "5px",
        "outline-color": "rgb(102, 102, 102)"
      },
      "element": "li.right:nth-of-type(3)",
      "html": "\n          <a href=\"simple_stmts.html\" title=\"7. Simple statements\" accesskey=\"N\">next</a> |",
      "path": "div > ul > li",
      "selector": "div.related:nth-of-type(1) > ul:nth-of-type(1) > li.right:nth-of-type(3)",
      "text": [
        "next",
        " |"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 1362,
        "top": 14,
        "width": 63
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "float": "right",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "5px",
        "outline-color": "rgb(102, 102, 102)"
      },
      "element": "li.right:nth-of-type(4)",
      "html": "\n          <a href=\"import.html\" title=\"5. The import system\" accesskey=\"P\">previous</a> |",
      "path": "div > ul > li",
      "selector": "div.related:nth-of-type(1) > ul:nth-of-type(1) > li.right:nth-of-type(4)",
      "text": [
        "previous",
        " |"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 16,
        "top": 14,
        "width": 1568
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(102, 102, 102)",
        "padding-left": "10px"
      },
      "element": "ul:nth-of-type(1)",
      "html": "\n        <li class=\"right\" style=\"margin-right: 10px\">\n          <a href=\"../genindex.html\" title=\"General Index\" accesskey=\"I\">index</a></li>\n        <li class=\"right\">\n          <a href=\"../py-modindex.html\" title=\"Python Module Index\">modules</a> |</li>\n        <li class=\"right\">\n          <a href=\"simple_stmts.html\" title=\"7. Simple statements\" accesskey=\"N\">next</a> |</li>\n        <li class=\"right\">\n          <a href=\"import.html\" title=\"5. The import system\" accesskey=\"P\">previous</a> |</li>\n        <li><img src=\"../_static/py.png\" alt=\"\" style=\"vertical-align: middle; margin-top: -1px\"></li>\n        <li><a href=\"http://www.python.org/\">Python</a> »</li>\n        <li>\n          <span class=\"version_switcher_placeholder\"><select><option value=\"3.4\">dev (3.4)</option><option value=\"3.3\" selected=\"selected\">3.3.2</option><option value=\"3.2\">3.2</option><option value=\"2.7\">2.7</option><option value=\"2.6\">2.6</option></select></span>\n          <a href=\"../index.html\">Documentation</a> »\n        </li>\n\n          <li><a href=\"index.html\" accesskey=\"U\">The Python Language Reference</a> »</li> \n      ",
      "path": "div > ul",
      "selector": "div.related:nth-of-type(1) > ul:nth-of-type(1)",
      "text": [
        "Python",
        " »",
        "Documentation",
        " »\n        ",
        "The Python Language Reference",
        " »"
      ]
    },
    {
      "bound": {
        "height": 56,
        "left": 265,
        "top": 69,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "32px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "9px",
        "padding-top": "9px"
      },
      "element": "h1:nth-of-type(1)",
      "html": "6. Expressions<a class=\"headerlink\" href=\"#expressions\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > h1",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > h1:nth-of-type(1)",
      "text": [
        "6. Expressions",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 141,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-0:nth-of-type(1)",
      "html": "This chapter explains the meaning of the elements of expressions in Python.",
      "path": "div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > p#index-0:nth-of-type(1)",
      "text": [
        "This chapter explains the meaning of the elements of expressions in Python."
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 179,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "<strong>Syntax Notes:</strong> In this and the following chapters, extended BNF notation will\nbe used to describe syntax, not lexical analysis.  When (one alternative of) a\nsyntax rule has the form",
      "path": "div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > p:nth-of-type(2)",
      "text": [
        "Syntax Notes:",
        " In this and the following chapters, extended BNF notation will\nbe used to describe syntax, not lexical analysis.  When (one alternative of) a\nsyntax rule has the form"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 265,
        "top": 239,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<strong id=\"grammar-token-name\">name</strong> ::=  <tt class=\"xref docutils literal\"><span class=\"pre\">othername</span></tt>\n",
      "path": "div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        "name",
        " ::=  ",
        "othername"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 285,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(3)",
      "html": "and no semantics are given, the semantics of this form of <tt class=\"docutils literal\"><span class=\"pre\">name</span></tt> are the same\nas for <tt class=\"docutils literal\"><span class=\"pre\">othername</span></tt>.",
      "path": "div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > p:nth-of-type(3)",
      "text": [
        "and no semantics are given, the semantics of this form of ",
        "name",
        " are the same\nas for ",
        "othername",
        "."
      ]
    },
    {
      "bound": {
        "height": 46,
        "left": 265,
        "top": 323,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "26px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "7px",
        "padding-top": "7px"
      },
      "element": "h2:nth-of-type(1)",
      "html": "6.1. Arithmetic conversions<a class=\"headerlink\" href=\"#arithmetic-conversions\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > div > h2",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#arithmetic-conversions.section:nth-of-type(1) > h2:nth-of-type(1)",
      "text": [
        "6.1. Arithmetic conversions",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 385,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-1:nth-of-type(1)",
      "html": "When a description of an arithmetic operator below uses the phrase “the numeric\narguments are converted to a common type,” this means that the operator\nimplementation for built-in types works that way:",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#arithmetic-conversions.section:nth-of-type(1) > p#index-1:nth-of-type(1)",
      "text": [
        "When a description of an arithmetic operator below uses the phrase “the numeric\narguments are converted to a common type,” this means that the operator\nimplementation for built-in types works that way:"
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 305,
        "top": 445,
        "width": 1279
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "display": "list-item",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "li:nth-of-type(1)",
      "html": "If either argument is a complex number, the other is converted to complex;",
      "path": "div > div > div > div > div > div > ul > li",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#arithmetic-conversions.section:nth-of-type(1) > ul.simple:nth-of-type(1) > li:nth-of-type(1)",
      "text": [
        "If either argument is a complex number, the other is converted to complex;"
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 305,
        "top": 465,
        "width": 1279
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "display": "list-item",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "li:nth-of-type(2)",
      "html": "otherwise, if either argument is a floating point number, the other is\nconverted to floating point;",
      "path": "div > div > div > div > div > div > ul > li",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#arithmetic-conversions.section:nth-of-type(1) > ul.simple:nth-of-type(1) > li:nth-of-type(2)",
      "text": [
        "otherwise, if either argument is a floating point number, the other is\nconverted to floating point;"
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 305,
        "top": 485,
        "width": 1279
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "display": "list-item",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "li:nth-of-type(3)",
      "html": "otherwise, both must be integers and no conversion is necessary.",
      "path": "div > div > div > div > div > div > ul > li",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#arithmetic-conversions.section:nth-of-type(1) > ul.simple:nth-of-type(1) > li:nth-of-type(3)",
      "text": [
        "otherwise, both must be integers and no conversion is necessary."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 521,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "Some additional rules apply for certain operators (e.g., a string left argument\nto the ‘%’ operator).  Extensions must define their own conversion behavior.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#arithmetic-conversions.section:nth-of-type(1) > p:nth-of-type(2)",
      "text": [
        "Some additional rules apply for certain operators (e.g., a string left argument\nto the ‘%’ operator).  Extensions must define their own conversion behavior."
      ]
    },
    {
      "bound": {
        "height": 46,
        "left": 265,
        "top": 559,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "26px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "7px",
        "padding-top": "7px"
      },
      "element": "h2:nth-of-type(1)",
      "html": "6.2. Atoms<a class=\"headerlink\" href=\"#atoms\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > div > h2",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > h2:nth-of-type(1)",
      "text": [
        "6.2. Atoms",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 621,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-2:nth-of-type(1)",
      "html": "Atoms are the most basic elements of expressions.  The simplest atoms are\nidentifiers or literals.  Forms enclosed in parentheses, brackets or braces are\nalso categorized syntactically as atoms.  The syntax for atoms is:",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > p#index-2:nth-of-type(1)",
      "text": [
        "Atoms are the most basic elements of expressions.  The simplest atoms are\nidentifiers or literals.  Forms enclosed in parentheses, brackets or braces are\nalso categorized syntactically as atoms.  The syntax for atoms is:"
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 265,
        "top": 681,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<strong id=\"grammar-token-atom\">atom     </strong> ::=  <a class=\"reference internal\" href=\"lexical_analysis.html#grammar-token-identifier\"><tt class=\"xref docutils literal\"><span class=\"pre\">identifier</span></tt></a> | <a class=\"reference internal\" href=\"#grammar-token-literal\"><tt class=\"xref docutils literal\"><span class=\"pre\">literal</span></tt></a> | <a class=\"reference internal\" href=\"#grammar-token-enclosure\"><tt class=\"xref docutils literal\"><span class=\"pre\">enclosure</span></tt></a>\n<strong id=\"grammar-token-enclosure\">enclosure</strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-parenth_form\"><tt class=\"xref docutils literal\"><span class=\"pre\">parenth_form</span></tt></a> | <a class=\"reference internal\" href=\"#grammar-token-list_display\"><tt class=\"xref docutils literal\"><span class=\"pre\">list_display</span></tt></a> | <a class=\"reference internal\" href=\"#grammar-token-dict_display\"><tt class=\"xref docutils literal\"><span class=\"pre\">dict_display</span></tt></a> | <a class=\"reference internal\" href=\"#grammar-token-set_display\"><tt class=\"xref docutils literal\"><span class=\"pre\">set_display</span></tt></a>\n               | <a class=\"reference internal\" href=\"#grammar-token-generator_expression\"><tt class=\"xref docutils literal\"><span class=\"pre\">generator_expression</span></tt></a> | <a class=\"reference internal\" href=\"#grammar-token-yield_atom\"><tt class=\"xref docutils literal\"><span class=\"pre\">yield_atom</span></tt></a>\n",
      "path": "div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > pre:nth-of-type(1)",
      "text": [
        "atom     ",
        " ::=  ",
        "identifier",
        " | ",
        "literal",
        " | ",
        "enclosure",
        "enclosure",
        " ::=  ",
        "parenth_form",
        " | ",
        "list_display",
        " | ",
        "dict_display",
        " | ",
        "set_display",
        "\n               | ",
        "generator_expression",
        " | ",
        "yield_atom"
      ]
    },
    {
      "bound": {
        "height": 39,
        "left": 265,
        "top": 762,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "22px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "6px",
        "padding-top": "6px"
      },
      "element": "h3:nth-of-type(1)",
      "html": "6.2.1. Identifiers (Names)<a class=\"headerlink\" href=\"#atom-identifiers\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > div > div > h3",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#atom-identifiers.section:nth-of-type(1) > h3:nth-of-type(1)",
      "text": [
        "6.2.1. Identifiers (Names)",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 817,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-3:nth-of-type(1)",
      "html": "An identifier occurring as an atom is a name.  See section <a class=\"reference internal\" href=\"lexical_analysis.html#identifiers\"><em>Identifiers and keywords</em></a>\nfor lexical definition and section <a class=\"reference internal\" href=\"executionmodel.html#naming\"><em>Naming and binding</em></a> for documentation of naming and\nbinding.",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#atom-identifiers.section:nth-of-type(1) > p#index-3:nth-of-type(1)",
      "text": [
        "An identifier occurring as an atom is a name.  See section ",
        "Identifiers and keywords",
        "\nfor lexical definition and section ",
        "Naming and binding",
        " for documentation of naming and\nbinding."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 877,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-4:nth-of-type(2)",
      "html": "When the name is bound to an object, evaluation of the atom yields that object.\nWhen a name is not bound, an attempt to evaluate it raises a <a class=\"reference internal\" href=\"../library/exceptions.html#NameError\" title=\"NameError\"><tt class=\"xref py py-exc docutils literal\"><span class=\"pre\">NameError</span></tt></a>\nexception.",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#atom-identifiers.section:nth-of-type(1) > p#index-4:nth-of-type(2)",
      "text": [
        "When the name is bound to an object, evaluation of the atom yields that object.\nWhen a name is not bound, an attempt to evaluate it raises a ",
        "NameError",
        "\nexception."
      ]
    },
    {
      "bound": {
        "height": 110,
        "left": 265,
        "top": 915,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-5:nth-of-type(3)",
      "html": "<strong>Private name mangling:</strong> When an identifier that textually occurs in a class\ndefinition begins with two or more underscore characters and does not end in two\nor more underscores, it is considered a <em class=\"dfn\">private name</em> of that class.\nPrivate names are transformed to a longer form before code is generated for\nthem.  The transformation inserts the class name, with leading underscores\nremoved and a single underscore inserted, in front of the name.  For example,\nthe identifier <tt class=\"docutils literal\"><span class=\"pre\">__spam</span></tt> occurring in a class named <tt class=\"docutils literal\"><span class=\"pre\">Ham</span></tt> will be transformed\nto <tt class=\"docutils literal\"><span class=\"pre\">_Ham__spam</span></tt>.  This transformation is independent of the syntactical\ncontext in which the identifier is used.  If the transformed name is extremely\nlong (longer than 255 characters), implementation defined truncation may happen.\nIf the class name consists only of underscores, no transformation is done.",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#atom-identifiers.section:nth-of-type(1) > p#index-5:nth-of-type(3)",
      "text": [
        "Private name mangling:",
        " When an identifier that textually occurs in a class\ndefinition begins with two or more underscore characters and does not end in two\nor more underscores, it is considered a ",
        "private name",
        " of that class.\nPrivate names are transformed to a longer form before code is generated for\nthem.  The transformation inserts the class name, with leading underscores\nremoved and a single underscore inserted, in front of the name.  For example,\nthe identifier ",
        "__spam",
        " occurring in a class named ",
        "Ham",
        " will be transformed\nto ",
        "_Ham__spam",
        ".  This transformation is independent of the syntactical\ncontext in which the identifier is used.  If the transformed name is extremely\nlong (longer than 255 characters), implementation defined truncation may happen.\nIf the class name consists only of underscores, no transformation is done."
      ]
    },
    {
      "bound": {
        "height": 39,
        "left": 265,
        "top": 1041,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "22px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "6px",
        "padding-top": "6px"
      },
      "element": "h3:nth-of-type(1)",
      "html": "6.2.2. Literals<a class=\"headerlink\" href=\"#literals\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > div > div > h3",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#literals.section:nth-of-type(2) > h3:nth-of-type(1)",
      "text": [
        "6.2.2. Literals",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 1096,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-6:nth-of-type(1)",
      "html": "Python supports string and bytes literals and various numeric literals:",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#literals.section:nth-of-type(2) > p#index-6:nth-of-type(1)",
      "text": [
        "Python supports string and bytes literals and various numeric literals:"
      ]
    },
    {
      "bound": {
        "height": 48,
        "left": 265,
        "top": 1134,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<strong id=\"grammar-token-literal\">literal</strong> ::=  <a class=\"reference internal\" href=\"lexical_analysis.html#grammar-token-stringliteral\"><tt class=\"xref docutils literal\"><span class=\"pre\">stringliteral</span></tt></a> | <a class=\"reference internal\" href=\"lexical_analysis.html#grammar-token-bytesliteral\"><tt class=\"xref docutils literal\"><span class=\"pre\">bytesliteral</span></tt></a>\n             | <a class=\"reference internal\" href=\"lexical_analysis.html#grammar-token-integer\"><tt class=\"xref docutils literal\"><span class=\"pre\">integer</span></tt></a> | <a class=\"reference internal\" href=\"lexical_analysis.html#grammar-token-floatnumber\"><tt class=\"xref docutils literal\"><span class=\"pre\">floatnumber</span></tt></a> | <a class=\"reference internal\" href=\"lexical_analysis.html#grammar-token-imagnumber\"><tt class=\"xref docutils literal\"><span class=\"pre\">imagnumber</span></tt></a>\n",
      "path": "div > div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#literals.section:nth-of-type(2) > pre:nth-of-type(1)",
      "text": [
        "literal",
        " ::=  ",
        "stringliteral",
        " | ",
        "bytesliteral",
        "\n             | ",
        "integer",
        " | ",
        "floatnumber",
        " | ",
        "imagnumber"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 1198,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "Evaluation of a literal yields an object of the given type (string, bytes,\ninteger, floating point number, complex number) with the given value.  The value\nmay be approximated in the case of floating point and imaginary (complex)\nliterals.  See section <a class=\"reference internal\" href=\"lexical_analysis.html#literals\"><em>Literals</em></a> for details.",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#literals.section:nth-of-type(2) > p:nth-of-type(2)",
      "text": [
        "Evaluation of a literal yields an object of the given type (string, bytes,\ninteger, floating point number, complex number) with the given value.  The value\nmay be approximated in the case of floating point and imaginary (complex)\nliterals.  See section ",
        "Literals",
        " for details."
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 1258,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-7:nth-of-type(3)",
      "html": "All literals correspond to immutable data types, and hence the object’s identity\nis less important than its value.  Multiple evaluations of literals with the\nsame value (either the same occurrence in the program text or a different\noccurrence) may obtain the same object or a different object with the same\nvalue.",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#literals.section:nth-of-type(2) > p#index-7:nth-of-type(3)",
      "text": [
        "All literals correspond to immutable data types, and hence the object’s identity\nis less important than its value.  Multiple evaluations of literals with the\nsame value (either the same occurrence in the program text or a different\noccurrence) may obtain the same object or a different object with the same\nvalue."
      ]
    },
    {
      "bound": {
        "height": 39,
        "left": 265,
        "top": 1318,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "22px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "6px",
        "padding-top": "6px"
      },
      "element": "h3:nth-of-type(1)",
      "html": "6.2.3. Parenthesized forms<a class=\"headerlink\" href=\"#parenthesized-forms\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > div > div > h3",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#parenthesized-forms.section:nth-of-type(3) > h3:nth-of-type(1)",
      "text": [
        "6.2.3. Parenthesized forms",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 1373,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-8:nth-of-type(1)",
      "html": "A parenthesized form is an optional expression list enclosed in parentheses:",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#parenthesized-forms.section:nth-of-type(3) > p#index-8:nth-of-type(1)",
      "text": [
        "A parenthesized form is an optional expression list enclosed in parentheses:"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 265,
        "top": 1411,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<strong id=\"grammar-token-parenth_form\">parenth_form</strong> ::=  \"(\" [<a class=\"reference internal\" href=\"#grammar-token-expression_list\"><tt class=\"xref docutils literal\"><span class=\"pre\">expression_list</span></tt></a>] \")\"\n",
      "path": "div > div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#parenthesized-forms.section:nth-of-type(3) > pre:nth-of-type(1)",
      "text": [
        "parenth_form",
        " ::=  \"(\" [",
        "expression_list",
        "] \")\"\n"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 1457,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "A parenthesized expression list yields whatever that expression list yields: if\nthe list contains at least one comma, it yields a tuple; otherwise, it yields\nthe single expression that makes up the expression list.",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#parenthesized-forms.section:nth-of-type(3) > p:nth-of-type(2)",
      "text": [
        "A parenthesized expression list yields whatever that expression list yields: if\nthe list contains at least one comma, it yields a tuple; otherwise, it yields\nthe single expression that makes up the expression list."
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 1517,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-9:nth-of-type(3)",
      "html": "An empty pair of parentheses yields an empty tuple object.  Since tuples are\nimmutable, the rules for literals apply (i.e., two occurrences of the empty\ntuple may or may not yield the same object).",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#parenthesized-forms.section:nth-of-type(3) > p#index-9:nth-of-type(3)",
      "text": [
        "An empty pair of parentheses yields an empty tuple object.  Since tuples are\nimmutable, the rules for literals apply (i.e., two occurrences of the empty\ntuple may or may not yield the same object)."
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 1577,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-10:nth-of-type(4)",
      "html": "Note that tuples are not formed by the parentheses, but rather by use of the\ncomma operator.  The exception is the empty tuple, for which parentheses <em>are</em>\nrequired — allowing unparenthesized “nothing” in expressions would cause\nambiguities and allow common typos to pass uncaught.",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#parenthesized-forms.section:nth-of-type(3) > p#index-10:nth-of-type(4)",
      "text": [
        "Note that tuples are not formed by the parentheses, but rather by use of the\ncomma operator.  The exception is the empty tuple, for which parentheses ",
        "are",
        "\nrequired — allowing unparenthesized “nothing” in expressions would cause\nambiguities and allow common typos to pass uncaught."
      ]
    },
    {
      "bound": {
        "height": 39,
        "left": 265,
        "top": 1637,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "22px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "6px",
        "padding-top": "6px"
      },
      "element": "h3:nth-of-type(1)",
      "html": "6.2.4. Displays for lists, sets and dictionaries<a class=\"headerlink\" href=\"#displays-for-lists-sets-and-dictionaries\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > div > div > h3",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#displays-for-lists-sets-and-dictionaries.section:nth-of-type(4) > h3:nth-of-type(1)",
      "text": [
        "6.2.4. Displays for lists, sets and dictionaries",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 1692,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "For constructing a list, a set or a dictionary Python provides special syntax\ncalled “displays”, each of them in two flavors:",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#displays-for-lists-sets-and-dictionaries.section:nth-of-type(4) > p:nth-of-type(1)",
      "text": [
        "For constructing a list, a set or a dictionary Python provides special syntax\ncalled “displays”, each of them in two flavors:"
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 305,
        "top": 1730,
        "width": 1279
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "display": "list-item",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "li:nth-of-type(1)",
      "html": "either the container contents are listed explicitly, or",
      "path": "div > div > div > div > div > div > div > ul > li",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#displays-for-lists-sets-and-dictionaries.section:nth-of-type(4) > ul.simple:nth-of-type(1) > li:nth-of-type(1)",
      "text": [
        "either the container contents are listed explicitly, or"
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 305,
        "top": 1750,
        "width": 1279
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "display": "list-item",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "li:nth-of-type(2)",
      "html": "they are computed via a set of looping and filtering instructions, called a\n<em class=\"dfn\">comprehension</em>.",
      "path": "div > div > div > div > div > div > div > ul > li",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#displays-for-lists-sets-and-dictionaries.section:nth-of-type(4) > ul.simple:nth-of-type(1) > li:nth-of-type(2)",
      "text": [
        "they are computed via a set of looping and filtering instructions, called a\n",
        "comprehension",
        "."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 1786,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "Common syntax elements for comprehensions are:",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#displays-for-lists-sets-and-dictionaries.section:nth-of-type(4) > p:nth-of-type(2)",
      "text": [
        "Common syntax elements for comprehensions are:"
      ]
    },
    {
      "bound": {
        "height": 84,
        "left": 265,
        "top": 1824,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<strong id=\"grammar-token-comprehension\">comprehension</strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-expression\"><tt class=\"xref docutils literal\"><span class=\"pre\">expression</span></tt></a> <a class=\"reference internal\" href=\"#grammar-token-comp_for\"><tt class=\"xref docutils literal\"><span class=\"pre\">comp_for</span></tt></a>\n<strong id=\"grammar-token-comp_for\">comp_for     </strong> ::=  \"for\" <a class=\"reference internal\" href=\"simple_stmts.html#grammar-token-target_list\"><tt class=\"xref docutils literal\"><span class=\"pre\">target_list</span></tt></a> \"in\" <a class=\"reference internal\" href=\"#grammar-token-or_test\"><tt class=\"xref docutils literal\"><span class=\"pre\">or_test</span></tt></a> [<a class=\"reference internal\" href=\"#grammar-token-comp_iter\"><tt class=\"xref docutils literal\"><span class=\"pre\">comp_iter</span></tt></a>]\n<strong id=\"grammar-token-comp_iter\">comp_iter    </strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-comp_for\"><tt class=\"xref docutils literal\"><span class=\"pre\">comp_for</span></tt></a> | <a class=\"reference internal\" href=\"#grammar-token-comp_if\"><tt class=\"xref docutils literal\"><span class=\"pre\">comp_if</span></tt></a>\n<strong id=\"grammar-token-comp_if\">comp_if      </strong> ::=  \"if\" <a class=\"reference internal\" href=\"#grammar-token-expression_nocond\"><tt class=\"xref docutils literal\"><span class=\"pre\">expression_nocond</span></tt></a> [<a class=\"reference internal\" href=\"#grammar-token-comp_iter\"><tt class=\"xref docutils literal\"><span class=\"pre\">comp_iter</span></tt></a>]\n",
      "path": "div > div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#displays-for-lists-sets-and-dictionaries.section:nth-of-type(4) > pre:nth-of-type(1)",
      "text": [
        "comprehension",
        " ::=  ",
        "expression",
        "comp_for",
        "comp_for     ",
        " ::=  \"for\" ",
        "target_list",
        " \"in\" ",
        "or_test",
        " [",
        "comp_iter",
        "]\n",
        "comp_iter    ",
        " ::=  ",
        "comp_for",
        " | ",
        "comp_if",
        "comp_if      ",
        " ::=  \"if\" ",
        "expression_nocond",
        " [",
        "comp_iter",
        "]\n"
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 265,
        "top": 1924,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(3)",
      "html": "The comprehension consists of a single expression followed by at least one\n<a class=\"reference internal\" href=\"compound_stmts.html#for\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">for</span></tt></a> clause and zero or more <a class=\"reference internal\" href=\"compound_stmts.html#for\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">for</span></tt></a> or <a class=\"reference internal\" href=\"compound_stmts.html#if\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">if</span></tt></a> clauses.\nIn this case, the elements of the new container are those that would be produced\nby considering each of the <a class=\"reference internal\" href=\"compound_stmts.html#for\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">for</span></tt></a> or <a class=\"reference internal\" href=\"compound_stmts.html#if\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">if</span></tt></a> clauses a block,\nnesting from left to right, and evaluating the expression to produce an element\neach time the innermost block is reached.",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#displays-for-lists-sets-and-dictionaries.section:nth-of-type(4) > p:nth-of-type(3)",
      "text": [
        "The comprehension consists of a single expression followed by at least one\n",
        "for",
        " clause and zero or more ",
        "for",
        " or ",
        "if",
        " clauses.\nIn this case, the elements of the new container are those that would be produced\nby considering each of the ",
        "for",
        " or ",
        "if",
        " clauses a block,\nnesting from left to right, and evaluating the expression to produce an element\neach time the innermost block is reached."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 2006,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(4)",
      "html": "Note that the comprehension is executed in a separate scope, so names assigned\nto in the target list don’t “leak” in the enclosing scope.",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#displays-for-lists-sets-and-dictionaries.section:nth-of-type(4) > p:nth-of-type(4)",
      "text": [
        "Note that the comprehension is executed in a separate scope, so names assigned\nto in the target list don’t “leak” in the enclosing scope."
      ]
    },
    {
      "bound": {
        "height": 39,
        "left": 265,
        "top": 2044,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "22px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "6px",
        "padding-top": "6px"
      },
      "element": "h3:nth-of-type(1)",
      "html": "6.2.5. List displays<a class=\"headerlink\" href=\"#list-displays\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > div > div > h3",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#list-displays.section:nth-of-type(5) > h3:nth-of-type(1)",
      "text": [
        "6.2.5. List displays",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 2099,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-11:nth-of-type(1)",
      "html": "A list display is a possibly empty series of expressions enclosed in square\nbrackets:",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#list-displays.section:nth-of-type(5) > p#index-11:nth-of-type(1)",
      "text": [
        "A list display is a possibly empty series of expressions enclosed in square\nbrackets:"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 265,
        "top": 2137,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<strong id=\"grammar-token-list_display\">list_display</strong> ::=  \"[\" [<a class=\"reference internal\" href=\"#grammar-token-expression_list\"><tt class=\"xref docutils literal\"><span class=\"pre\">expression_list</span></tt></a> | <a class=\"reference internal\" href=\"#grammar-token-comprehension\"><tt class=\"xref docutils literal\"><span class=\"pre\">comprehension</span></tt></a>] \"]\"\n",
      "path": "div > div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#list-displays.section:nth-of-type(5) > pre:nth-of-type(1)",
      "text": [
        "list_display",
        " ::=  \"[\" [",
        "expression_list",
        " | ",
        "comprehension",
        "] \"]\"\n"
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 265,
        "top": 2183,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "A list display yields a new list object, the contents being specified by either\na list of expressions or a comprehension.  When a comma-separated list of\nexpressions is supplied, its elements are evaluated from left to right and\nplaced into the list object in that order.  When a comprehension is supplied,\nthe list is constructed from the elements resulting from the comprehension.",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#list-displays.section:nth-of-type(5) > p:nth-of-type(2)",
      "text": [
        "A list display yields a new list object, the contents being specified by either\na list of expressions or a comprehension.  When a comma-separated list of\nexpressions is supplied, its elements are evaluated from left to right and\nplaced into the list object in that order.  When a comprehension is supplied,\nthe list is constructed from the elements resulting from the comprehension."
      ]
    },
    {
      "bound": {
        "height": 39,
        "left": 265,
        "top": 2265,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "22px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "6px",
        "padding-top": "6px"
      },
      "element": "h3:nth-of-type(1)",
      "html": "6.2.6. Set displays<a class=\"headerlink\" href=\"#set-displays\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > div > div > h3",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#set-displays.section:nth-of-type(6) > h3:nth-of-type(1)",
      "text": [
        "6.2.6. Set displays",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 2320,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-12:nth-of-type(1)",
      "html": "A set display is denoted by curly braces and distinguishable from dictionary\ndisplays by the lack of colons separating keys and values:",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#set-displays.section:nth-of-type(6) > p#index-12:nth-of-type(1)",
      "text": [
        "A set display is denoted by curly braces and distinguishable from dictionary\ndisplays by the lack of colons separating keys and values:"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 265,
        "top": 2358,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<strong id=\"grammar-token-set_display\">set_display</strong> ::=  \"{\" (<a class=\"reference internal\" href=\"#grammar-token-expression_list\"><tt class=\"xref docutils literal\"><span class=\"pre\">expression_list</span></tt></a> | <a class=\"reference internal\" href=\"#grammar-token-comprehension\"><tt class=\"xref docutils literal\"><span class=\"pre\">comprehension</span></tt></a>) \"}\"\n",
      "path": "div > div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#set-displays.section:nth-of-type(6) > pre:nth-of-type(1)",
      "text": [
        "set_display",
        " ::=  \"{\" (",
        "expression_list",
        " | ",
        "comprehension",
        ") \"}\"\n"
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 265,
        "top": 2404,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "A set display yields a new mutable set object, the contents being specified by\neither a sequence of expressions or a comprehension.  When a comma-separated\nlist of expressions is supplied, its elements are evaluated from left to right\nand added to the set object.  When a comprehension is supplied, the set is\nconstructed from the elements resulting from the comprehension.",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#set-displays.section:nth-of-type(6) > p:nth-of-type(2)",
      "text": [
        "A set display yields a new mutable set object, the contents being specified by\neither a sequence of expressions or a comprehension.  When a comma-separated\nlist of expressions is supplied, its elements are evaluated from left to right\nand added to the set object.  When a comprehension is supplied, the set is\nconstructed from the elements resulting from the comprehension."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 2486,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(3)",
      "html": "An empty set cannot be constructed with <tt class=\"docutils literal\"><span class=\"pre\">{}</span></tt>; this literal constructs an empty\ndictionary.",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#set-displays.section:nth-of-type(6) > p:nth-of-type(3)",
      "text": [
        "An empty set cannot be constructed with ",
        "{}",
        "; this literal constructs an empty\ndictionary."
      ]
    },
    {
      "bound": {
        "height": 39,
        "left": 265,
        "top": 2524,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "22px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "6px",
        "padding-top": "6px"
      },
      "element": "h3:nth-of-type(1)",
      "html": "6.2.7. Dictionary displays<a class=\"headerlink\" href=\"#dictionary-displays\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > div > div > h3",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#dictionary-displays.section:nth-of-type(7) > h3:nth-of-type(1)",
      "text": [
        "6.2.7. Dictionary displays",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 2579,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-13:nth-of-type(1)",
      "html": "A dictionary display is a possibly empty series of key/datum pairs enclosed in\ncurly braces:",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#dictionary-displays.section:nth-of-type(7) > p#index-13:nth-of-type(1)",
      "text": [
        "A dictionary display is a possibly empty series of key/datum pairs enclosed in\ncurly braces:"
      ]
    },
    {
      "bound": {
        "height": 84,
        "left": 265,
        "top": 2617,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<strong id=\"grammar-token-dict_display\">dict_display      </strong> ::=  \"{\" [<a class=\"reference internal\" href=\"#grammar-token-key_datum_list\"><tt class=\"xref docutils literal\"><span class=\"pre\">key_datum_list</span></tt></a> | <a class=\"reference internal\" href=\"#grammar-token-dict_comprehension\"><tt class=\"xref docutils literal\"><span class=\"pre\">dict_comprehension</span></tt></a>] \"}\"\n<strong id=\"grammar-token-key_datum_list\">key_datum_list    </strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-key_datum\"><tt class=\"xref docutils literal\"><span class=\"pre\">key_datum</span></tt></a> (\",\" <a class=\"reference internal\" href=\"#grammar-token-key_datum\"><tt class=\"xref docutils literal\"><span class=\"pre\">key_datum</span></tt></a>)* [\",\"]\n<strong id=\"grammar-token-key_datum\">key_datum         </strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-expression\"><tt class=\"xref docutils literal\"><span class=\"pre\">expression</span></tt></a> \":\" <a class=\"reference internal\" href=\"#grammar-token-expression\"><tt class=\"xref docutils literal\"><span class=\"pre\">expression</span></tt></a>\n<strong id=\"grammar-token-dict_comprehension\">dict_comprehension</strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-expression\"><tt class=\"xref docutils literal\"><span class=\"pre\">expression</span></tt></a> \":\" <a class=\"reference internal\" href=\"#grammar-token-expression\"><tt class=\"xref docutils literal\"><span class=\"pre\">expression</span></tt></a> <a class=\"reference internal\" href=\"#grammar-token-comp_for\"><tt class=\"xref docutils literal\"><span class=\"pre\">comp_for</span></tt></a>\n",
      "path": "div > div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#dictionary-displays.section:nth-of-type(7) > pre:nth-of-type(1)",
      "text": [
        "dict_display      ",
        " ::=  \"{\" [",
        "key_datum_list",
        " | ",
        "dict_comprehension",
        "] \"}\"\n",
        "key_datum_list    ",
        " ::=  ",
        "key_datum",
        " (\",\" ",
        "key_datum",
        ")* [\",\"]\n",
        "key_datum         ",
        " ::=  ",
        "expression",
        " \":\" ",
        "expression",
        "dict_comprehension",
        " ::=  ",
        "expression",
        " \":\" ",
        "expression",
        "comp_for"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 2717,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "A dictionary display yields a new dictionary object.",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#dictionary-displays.section:nth-of-type(7) > p:nth-of-type(2)",
      "text": [
        "A dictionary display yields a new dictionary object."
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 265,
        "top": 2755,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(3)",
      "html": "If a comma-separated sequence of key/datum pairs is given, they are evaluated\nfrom left to right to define the entries of the dictionary: each key object is\nused as a key into the dictionary to store the corresponding datum.  This means\nthat you can specify the same key multiple times in the key/datum list, and the\nfinal dictionary’s value for that key will be the last one given.",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#dictionary-displays.section:nth-of-type(7) > p:nth-of-type(3)",
      "text": [
        "If a comma-separated sequence of key/datum pairs is given, they are evaluated\nfrom left to right to define the entries of the dictionary: each key object is\nused as a key into the dictionary to store the corresponding datum.  This means\nthat you can specify the same key multiple times in the key/datum list, and the\nfinal dictionary’s value for that key will be the last one given."
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 2837,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(4)",
      "html": "A dict comprehension, in contrast to list and set comprehensions, needs two\nexpressions separated with a colon followed by the usual “for” and “if” clauses.\nWhen the comprehension is run, the resulting key and value elements are inserted\nin the new dictionary in the order they are produced.",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#dictionary-displays.section:nth-of-type(7) > p:nth-of-type(4)",
      "text": [
        "A dict comprehension, in contrast to list and set comprehensions, needs two\nexpressions separated with a colon followed by the usual “for” and “if” clauses.\nWhen the comprehension is run, the resulting key and value elements are inserted\nin the new dictionary in the order they are produced."
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 2897,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-14:nth-of-type(5)",
      "html": "Restrictions on the types of the key values are listed earlier in section\n<a class=\"reference internal\" href=\"datamodel.html#types\"><em>The standard type hierarchy</em></a>.  (To summarize, the key type should be <a class=\"reference internal\" href=\"../glossary.html#term-hashable\"><em class=\"xref std std-term\">hashable</em></a>, which excludes\nall mutable objects.)  Clashes between duplicate keys are not detected; the last\ndatum (textually rightmost in the display) stored for a given key value\nprevails.",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#dictionary-displays.section:nth-of-type(7) > p#index-14:nth-of-type(5)",
      "text": [
        "Restrictions on the types of the key values are listed earlier in section\n",
        "The standard type hierarchy",
        ".  (To summarize, the key type should be ",
        "hashable",
        ", which excludes\nall mutable objects.)  Clashes between duplicate keys are not detected; the last\ndatum (textually rightmost in the display) stored for a given key value\nprevails."
      ]
    },
    {
      "bound": {
        "height": 39,
        "left": 265,
        "top": 2957,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "22px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "6px",
        "padding-top": "6px"
      },
      "element": "h3:nth-of-type(1)",
      "html": "6.2.8. Generator expressions<a class=\"headerlink\" href=\"#generator-expressions\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > div > div > h3",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#generator-expressions.section:nth-of-type(8) > h3:nth-of-type(1)",
      "text": [
        "6.2.8. Generator expressions",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 3012,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-15:nth-of-type(1)",
      "html": "A generator expression is a compact generator notation in parentheses:",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#generator-expressions.section:nth-of-type(8) > p#index-15:nth-of-type(1)",
      "text": [
        "A generator expression is a compact generator notation in parentheses:"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 265,
        "top": 3050,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<strong id=\"grammar-token-generator_expression\">generator_expression</strong> ::=  \"(\" <a class=\"reference internal\" href=\"#grammar-token-expression\"><tt class=\"xref docutils literal\"><span class=\"pre\">expression</span></tt></a> <a class=\"reference internal\" href=\"#grammar-token-comp_for\"><tt class=\"xref docutils literal\"><span class=\"pre\">comp_for</span></tt></a> \")\"\n",
      "path": "div > div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#generator-expressions.section:nth-of-type(8) > pre:nth-of-type(1)",
      "text": [
        "generator_expression",
        " ::=  \"(\" ",
        "expression",
        "comp_for",
        " \")\"\n"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 3096,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "A generator expression yields a new generator object.  Its syntax is the same as\nfor comprehensions, except that it is enclosed in parentheses instead of\nbrackets or curly braces.",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#generator-expressions.section:nth-of-type(8) > p:nth-of-type(2)",
      "text": [
        "A generator expression yields a new generator object.  Its syntax is the same as\nfor comprehensions, except that it is enclosed in parentheses instead of\nbrackets or curly braces."
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 265,
        "top": 3156,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(3)",
      "html": "Variables used in the generator expression are evaluated lazily when the\n<a class=\"reference internal\" href=\"#generator.__next__\" title=\"generator.__next__\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">__next__()</span></tt></a> method is called for generator object (in the same\nfashion as normal generators).  However, the leftmost <a class=\"reference internal\" href=\"compound_stmts.html#for\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">for</span></tt></a> clause is\nimmediately evaluated, so that an error produced by it can be seen before any\nother possible error in the code that handles the generator expression.\nSubsequent <a class=\"reference internal\" href=\"compound_stmts.html#for\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">for</span></tt></a> clauses cannot be evaluated immediately since they\nmay depend on the previous <a class=\"reference internal\" href=\"compound_stmts.html#for\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">for</span></tt></a> loop. For example: <tt class=\"docutils literal\"><span class=\"pre\">(x*y</span> <span class=\"pre\">for</span> <span class=\"pre\">x</span> <span class=\"pre\">in</span>\n<span class=\"pre\">range(10)</span> <span class=\"pre\">for</span> <span class=\"pre\">y</span> <span class=\"pre\">in</span> <span class=\"pre\">bar(x))</span></tt>.",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#generator-expressions.section:nth-of-type(8) > p:nth-of-type(3)",
      "text": [
        "Variables used in the generator expression are evaluated lazily when the\n",
        "__next__()",
        " method is called for generator object (in the same\nfashion as normal generators).  However, the leftmost ",
        "for",
        " clause is\nimmediately evaluated, so that an error produced by it can be seen before any\nother possible error in the code that handles the generator expression.\nSubsequent ",
        "for",
        " clauses cannot be evaluated immediately since they\nmay depend on the previous ",
        "for",
        " loop. For example: ",
        "(x*y",
        "for",
        "x",
        "in",
        "range(10)",
        "for",
        "y",
        "in",
        "bar(x))",
        "."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 3238,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(4)",
      "html": "The parentheses can be omitted on calls with only one argument.  See section\n<a class=\"reference internal\" href=\"#calls\"><em>Calls</em></a> for the detail.",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#generator-expressions.section:nth-of-type(8) > p:nth-of-type(4)",
      "text": [
        "The parentheses can be omitted on calls with only one argument.  See section\n",
        "Calls",
        " for the detail."
      ]
    },
    {
      "bound": {
        "height": 39,
        "left": 265,
        "top": 3276,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "22px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "6px",
        "padding-top": "6px"
      },
      "element": "h3:nth-of-type(1)",
      "html": "6.2.9. Yield expressions<a class=\"headerlink\" href=\"#yield-expressions\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > div > div > h3",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#yield-expressions.section:nth-of-type(9) > h3:nth-of-type(1)",
      "text": [
        "6.2.9. Yield expressions",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 48,
        "left": 265,
        "top": 3330,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre#index-16:nth-of-type(1)",
      "html": "<strong id=\"grammar-token-yield_atom\">yield_atom      </strong> ::=  \"(\" <a class=\"reference internal\" href=\"#grammar-token-yield_expression\"><tt class=\"xref docutils literal\"><span class=\"pre\">yield_expression</span></tt></a> \")\"\n<strong id=\"grammar-token-yield_expression\">yield_expression</strong> ::=  \"yield\" [<a class=\"reference internal\" href=\"#grammar-token-expression_list\"><tt class=\"xref docutils literal\"><span class=\"pre\">expression_list</span></tt></a> | \"from\" <a class=\"reference internal\" href=\"#grammar-token-expression\"><tt class=\"xref docutils literal\"><span class=\"pre\">expression</span></tt></a>]\n",
      "path": "div > div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#yield-expressions.section:nth-of-type(9) > pre#index-16:nth-of-type(1)",
      "text": [
        "yield_atom      ",
        " ::=  \"(\" ",
        "yield_expression",
        " \")\"\n",
        "yield_expression",
        " ::=  \"yield\" [",
        "expression_list",
        " | \"from\" ",
        "expression",
        "]\n"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 3394,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "The <a class=\"reference internal\" href=\"simple_stmts.html#yield\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">yield</span></tt></a> expression is only used when defining a <a class=\"reference internal\" href=\"../glossary.html#term-generator\"><em class=\"xref std std-term\">generator</em></a>\nfunction,\nand can only be used in the body of a function definition.  Using a\n<a class=\"reference internal\" href=\"simple_stmts.html#yield\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">yield</span></tt></a> expression in a function definition is sufficient to cause that\ndefinition to create a generator function instead of a normal function.",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#yield-expressions.section:nth-of-type(9) > p:nth-of-type(1)",
      "text": [
        "The ",
        "yield",
        " expression is only used when defining a ",
        "generator",
        "\nfunction,\nand can only be used in the body of a function definition.  Using a\n",
        "yield",
        " expression in a function definition is sufficient to cause that\ndefinition to create a generator function instead of a normal function."
      ]
    },
    {
      "bound": {
        "height": 132,
        "left": 265,
        "top": 3454,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "When a generator function is called, it returns an iterator known as a\ngenerator.  That generator then controls the execution of a generator function.\nThe execution starts when one of the generator’s methods is called.  At that\ntime, the execution proceeds to the first <a class=\"reference internal\" href=\"simple_stmts.html#yield\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">yield</span></tt></a> expression, where it\nis suspended again, returning the value of <a class=\"reference internal\" href=\"#grammar-token-expression_list\"><tt class=\"xref std std-token docutils literal\"><span class=\"pre\">expression_list</span></tt></a> to\ngenerator’s caller.  By suspended we mean that all local state is retained,\nincluding the current bindings of local variables, the instruction pointer, and\nthe internal evaluation stack.  When the execution is resumed by calling one of\nthe generator’s methods, the function can proceed exactly as if the\n<a class=\"reference internal\" href=\"simple_stmts.html#yield\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">yield</span></tt></a> expression was just another external call.  The value of the\n<a class=\"reference internal\" href=\"simple_stmts.html#yield\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">yield</span></tt></a> expression after resuming depends on the method which resumed\nthe execution. If <tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">__next__()</span></tt> is used (typically via either a\n<a class=\"reference internal\" href=\"compound_stmts.html#for\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">for</span></tt></a> or the <a class=\"reference internal\" href=\"../library/functions.html#next\" title=\"next\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">next()</span></tt></a> builtin) then the result is <a class=\"reference internal\" href=\"../library/constants.html#None\" title=\"None\"><tt class=\"xref py py-const xref docutils literal\"><span class=\"pre\">None</span></tt></a>,\notherwise, if <tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">send()</span></tt> is used, then the result will be the value passed\nin to that method.",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#yield-expressions.section:nth-of-type(9) > p:nth-of-type(2)",
      "text": [
        "When a generator function is called, it returns an iterator known as a\ngenerator.  That generator then controls the execution of a generator function.\nThe execution starts when one of the generator’s methods is called.  At that\ntime, the execution proceeds to the first ",
        "yield",
        " expression, where it\nis suspended again, returning the value of ",
        "expression_list",
        " to\ngenerator’s caller.  By suspended we mean that all local state is retained,\nincluding the current bindings of local variables, the instruction pointer, and\nthe internal evaluation stack.  When the execution is resumed by calling one of\nthe generator’s methods, the function can proceed exactly as if the\n",
        "yield",
        " expression was just another external call.  The value of the\n",
        "yield",
        " expression after resuming depends on the method which resumed\nthe execution. If ",
        "__next__()",
        " is used (typically via either a\n",
        "for",
        " or the ",
        "next()",
        " builtin) then the result is ",
        "None",
        ",\notherwise, if ",
        "send()",
        " is used, then the result will be the value passed\nin to that method."
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 3602,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-17:nth-of-type(3)",
      "html": "All of this makes generator functions quite similar to coroutines; they yield\nmultiple times, they have more than one entry point and their execution can be\nsuspended.  The only difference is that a generator function cannot control\nwhere should the execution continue after it yields; the control is always\ntransferred to the generator’s caller.",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#yield-expressions.section:nth-of-type(9) > p#index-17:nth-of-type(3)",
      "text": [
        "All of this makes generator functions quite similar to coroutines; they yield\nmultiple times, they have more than one entry point and their execution can be\nsuspended.  The only difference is that a generator function cannot control\nwhere should the execution continue after it yields; the control is always\ntransferred to the generator’s caller."
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 3662,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(4)",
      "html": "<a class=\"reference internal\" href=\"simple_stmts.html#yield\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">yield</span></tt></a> expressions are allowed in the <a class=\"reference internal\" href=\"compound_stmts.html#try\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">try</span></tt></a> clause of a\n<a class=\"reference internal\" href=\"compound_stmts.html#try\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">try</span></tt></a> ...  <a class=\"reference internal\" href=\"compound_stmts.html#finally\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">finally</span></tt></a> construct.  If the generator is not\nresumed before it is finalized (by reaching a zero reference count or by being\ngarbage collected), the generator-iterator’s <tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">close()</span></tt> method will be\ncalled, allowing any pending <a class=\"reference internal\" href=\"compound_stmts.html#finally\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">finally</span></tt></a> clauses to execute.",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#yield-expressions.section:nth-of-type(9) > p:nth-of-type(4)",
      "text": [
        "yield",
        " expressions are allowed in the ",
        "try",
        " clause of a\n",
        "try",
        " ...  ",
        "finally",
        " construct.  If the generator is not\nresumed before it is finalized (by reaching a zero reference count or by being\ngarbage collected), the generator-iterator’s ",
        "close()",
        " method will be\ncalled, allowing any pending ",
        "finally",
        " clauses to execute."
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 265,
        "top": 3722,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(5)",
      "html": "When <tt class=\"docutils literal\"><span class=\"pre\">yield</span> <span class=\"pre\">from</span> <span class=\"pre\">&lt;expr&gt;</span></tt> is used, it treats the supplied expression as\na subiterator. All values produced by that subiterator are passed directly\nto the caller of the current generator’s methods. Any values passed in with\n<tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">send()</span></tt> and any exceptions passed in with <tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">throw()</span></tt> are passed to\nthe underlying iterator if it has the appropriate methods. If this is not the\ncase, then <tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">send()</span></tt> will raise <a class=\"reference internal\" href=\"../library/exceptions.html#AttributeError\" title=\"AttributeError\"><tt class=\"xref py py-exc docutils literal\"><span class=\"pre\">AttributeError</span></tt></a> or <a class=\"reference internal\" href=\"../library/exceptions.html#TypeError\" title=\"TypeError\"><tt class=\"xref py py-exc docutils literal\"><span class=\"pre\">TypeError</span></tt></a>,\nwhile <tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">throw()</span></tt> will just raise the passed in exception immediately.",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#yield-expressions.section:nth-of-type(9) > p:nth-of-type(5)",
      "text": [
        "When ",
        "yield",
        "from",
        "<expr>",
        " is used, it treats the supplied expression as\na subiterator. All values produced by that subiterator are passed directly\nto the caller of the current generator’s methods. Any values passed in with\n",
        "send()",
        " and any exceptions passed in with ",
        "throw()",
        " are passed to\nthe underlying iterator if it has the appropriate methods. If this is not the\ncase, then ",
        "send()",
        " will raise ",
        "AttributeError",
        " or ",
        "TypeError",
        ",\nwhile ",
        "throw()",
        " will just raise the passed in exception immediately."
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 3804,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(6)",
      "html": "When the underlying iterator is complete, the <tt class=\"xref py py-attr docutils literal\"><span class=\"pre\">value</span></tt>\nattribute of the raised <a class=\"reference internal\" href=\"../library/exceptions.html#StopIteration\" title=\"StopIteration\"><tt class=\"xref py py-exc docutils literal\"><span class=\"pre\">StopIteration</span></tt></a> instance becomes the value of\nthe yield expression. It can be either set explicitly when raising\n<a class=\"reference internal\" href=\"../library/exceptions.html#StopIteration\" title=\"StopIteration\"><tt class=\"xref py py-exc docutils literal\"><span class=\"pre\">StopIteration</span></tt></a>, or automatically when the sub-iterator is a generator\n(by returning a value from the sub-generator).",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#yield-expressions.section:nth-of-type(9) > p:nth-of-type(6)",
      "text": [
        "When the underlying iterator is complete, the ",
        "value",
        "\nattribute of the raised ",
        "StopIteration",
        " instance becomes the value of\nthe yield expression. It can be either set explicitly when raising\n",
        "StopIteration",
        ", or automatically when the sub-iterator is a generator\n(by returning a value from the sub-generator)."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 305,
        "top": 3864,
        "width": 1239
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p.versionchanged:nth-of-type(1)",
      "html": "\n<span class=\"versionmodified\">Changed in version 3.3:</span> Added <tt class=\"docutils literal\"><span class=\"pre\">yield</span> <span class=\"pre\">from</span> <span class=\"pre\">&lt;expr&gt;</span></tt> to delegate control flow to a subiterator",
      "path": "div > div > div > div > div > div > div > blockquote > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#yield-expressions.section:nth-of-type(9) > blockquote:nth-of-type(1) > div:nth-of-type(1) > p.versionchanged:nth-of-type(1)",
      "text": [
        "Changed in version 3.3:",
        " Added ",
        "yield",
        "from",
        "<expr>",
        " to delegate control flow to a subiterator"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 3902,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(7)",
      "html": "The parentheses can be omitted when the <a class=\"reference internal\" href=\"simple_stmts.html#yield\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">yield</span></tt></a> expression is the\nsole expression on the right hand side of an assignment statement.",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#yield-expressions.section:nth-of-type(9) > p:nth-of-type(7)",
      "text": [
        "The parentheses can be omitted when the ",
        "yield",
        " expression is the\nsole expression on the right hand side of an assignment statement."
      ]
    },
    {
      "bound": {
        "height": 33,
        "left": 265,
        "top": 3940,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "19px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "5px",
        "padding-top": "5px"
      },
      "element": "h4:nth-of-type(1)",
      "html": "6.2.9.1. Generator-iterator methods<a class=\"headerlink\" href=\"#generator-iterator-methods\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > div > div > div > h4",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#yield-expressions.section:nth-of-type(9) > div#generator-iterator-methods.section:nth-of-type(1) > h4:nth-of-type(1)",
      "text": [
        "6.2.9.1. Generator-iterator methods",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 3989,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "This subsection describes the methods of a generator iterator.  They can\nbe used to control the execution of a generator function.",
      "path": "div > div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#yield-expressions.section:nth-of-type(9) > div#generator-iterator-methods.section:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "This subsection describes the methods of a generator iterator.  They can\nbe used to control the execution of a generator function."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 4027,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "Note that calling any of the generator methods below when the generator\nis already executing raises a <a class=\"reference internal\" href=\"../library/exceptions.html#ValueError\" title=\"ValueError\"><tt class=\"xref py py-exc docutils literal\"><span class=\"pre\">ValueError</span></tt></a> exception.",
      "path": "div > div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#yield-expressions.section:nth-of-type(9) > div#generator-iterator-methods.section:nth-of-type(1) > p:nth-of-type(2)",
      "text": [
        "Note that calling any of the generator methods below when the generator\nis already executing raises a ",
        "ValueError",
        " exception."
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 4065,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#generator.__next__:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">generator.</tt><tt class=\"descname\">__next__</tt><big>(</big><big>)</big><a class=\"headerlink\" href=\"#generator.__next__\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#yield-expressions.section:nth-of-type(9) > div#generator-iterator-methods.section:nth-of-type(1) > dl.method:nth-of-type(1) > dt#generator.__next__:nth-of-type(1)",
      "text": [
        "generator.",
        "__next__",
        "(",
        ")",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 295,
        "top": 4093,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "Starts the execution of a generator function or resumes it at the last\nexecuted <a class=\"reference internal\" href=\"simple_stmts.html#yield\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">yield</span></tt></a> expression.  When a generator function is resumed\nwith a <a class=\"reference internal\" href=\"#generator.__next__\" title=\"generator.__next__\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">__next__()</span></tt></a> method, the current <a class=\"reference internal\" href=\"simple_stmts.html#yield\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">yield</span></tt></a>\nexpression always evaluates to <a class=\"reference internal\" href=\"../library/constants.html#None\" title=\"None\"><tt class=\"xref py py-const xref docutils literal\"><span class=\"pre\">None</span></tt></a>.  The execution then continues\nto the next <a class=\"reference internal\" href=\"simple_stmts.html#yield\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">yield</span></tt></a> expression, where the generator is suspended\nagain, and the value of the <a class=\"reference internal\" href=\"#grammar-token-expression_list\"><tt class=\"xref std std-token docutils literal\"><span class=\"pre\">expression_list</span></tt></a> is returned to\n<a class=\"reference internal\" href=\"../library/functions.html#next\" title=\"next\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">next()</span></tt></a>‘s caller.\nIf the generator exits without yielding another value, a <a class=\"reference internal\" href=\"../library/exceptions.html#StopIteration\" title=\"StopIteration\"><tt class=\"xref py py-exc docutils literal\"><span class=\"pre\">StopIteration</span></tt></a>\nexception is raised.",
      "path": "div > div > div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#yield-expressions.section:nth-of-type(9) > div#generator-iterator-methods.section:nth-of-type(1) > dl.method:nth-of-type(1) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "Starts the execution of a generator function or resumes it at the last\nexecuted ",
        "yield",
        " expression.  When a generator function is resumed\nwith a ",
        "__next__()",
        " method, the current ",
        "yield",
        "\nexpression always evaluates to ",
        "None",
        ".  The execution then continues\nto the next ",
        "yield",
        " expression, where the generator is suspended\nagain, and the value of the ",
        "expression_list",
        " is returned to\n",
        "next()",
        "‘s caller.\nIf the generator exits without yielding another value, a ",
        "StopIteration",
        "\nexception is raised."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 4175,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "This method is normally called implicitly, e.g. by a <a class=\"reference internal\" href=\"compound_stmts.html#for\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">for</span></tt></a> loop, or\nby the built-in <a class=\"reference internal\" href=\"../library/functions.html#next\" title=\"next\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">next()</span></tt></a> function.",
      "path": "div > div > div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#yield-expressions.section:nth-of-type(9) > div#generator-iterator-methods.section:nth-of-type(1) > dl.method:nth-of-type(1) > dd:nth-of-type(1) > p:nth-of-type(2)",
      "text": [
        "This method is normally called implicitly, e.g. by a ",
        "for",
        " loop, or\nby the built-in ",
        "next()",
        " function."
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 4213,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#generator.send:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">generator.</tt><tt class=\"descname\">send</tt><big>(</big><em>value</em><big>)</big><a class=\"headerlink\" href=\"#generator.send\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#yield-expressions.section:nth-of-type(9) > div#generator-iterator-methods.section:nth-of-type(1) > dl.method:nth-of-type(2) > dt#generator.send:nth-of-type(1)",
      "text": [
        "generator.",
        "send",
        "(",
        "value",
        ")",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 295,
        "top": 4241,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "Resumes the execution and “sends” a value into the generator function.  The\n<tt class=\"docutils literal\"><span class=\"pre\">value</span></tt> argument becomes the result of the current <a class=\"reference internal\" href=\"simple_stmts.html#yield\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">yield</span></tt></a>\nexpression.  The <a class=\"reference internal\" href=\"#generator.send\" title=\"generator.send\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">send()</span></tt></a> method returns the next value yielded by the\ngenerator, or raises <a class=\"reference internal\" href=\"../library/exceptions.html#StopIteration\" title=\"StopIteration\"><tt class=\"xref py py-exc docutils literal\"><span class=\"pre\">StopIteration</span></tt></a> if the generator exits without\nyielding another value.  When <a class=\"reference internal\" href=\"#generator.send\" title=\"generator.send\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">send()</span></tt></a> is called to start the generator,\nit must be called with <a class=\"reference internal\" href=\"../library/constants.html#None\" title=\"None\"><tt class=\"xref py py-const xref docutils literal\"><span class=\"pre\">None</span></tt></a> as the argument, because there is no\n<a class=\"reference internal\" href=\"simple_stmts.html#yield\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">yield</span></tt></a> expression that could receive the value.",
      "path": "div > div > div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#yield-expressions.section:nth-of-type(9) > div#generator-iterator-methods.section:nth-of-type(1) > dl.method:nth-of-type(2) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "Resumes the execution and “sends” a value into the generator function.  The\n",
        "value",
        " argument becomes the result of the current ",
        "yield",
        "\nexpression.  The ",
        "send()",
        " method returns the next value yielded by the\ngenerator, or raises ",
        "StopIteration",
        " if the generator exits without\nyielding another value.  When ",
        "send()",
        " is called to start the generator,\nit must be called with ",
        "None",
        " as the argument, because there is no\n",
        "yield",
        " expression that could receive the value."
      ]
    },
    {
      "bound": {
        "height": 26,
        "left": 265,
        "top": 4323,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#generator.throw:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">generator.</tt><tt class=\"descname\">throw</tt><big>(</big><em>type</em><span class=\"optional\">[</span>, <em>value</em><span class=\"optional\">[</span>, <em>traceback</em><span class=\"optional\">]</span><span class=\"optional\">]</span><big>)</big><a class=\"headerlink\" href=\"#generator.throw\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#yield-expressions.section:nth-of-type(9) > div#generator-iterator-methods.section:nth-of-type(1) > dl.method:nth-of-type(3) > dt#generator.throw:nth-of-type(1)",
      "text": [
        "generator.",
        "throw",
        "(",
        "type",
        "[",
        ", ",
        "value",
        "[",
        ", ",
        "traceback",
        "]",
        "]",
        ")",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 295,
        "top": 4352,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "Raises an exception of type <tt class=\"docutils literal\"><span class=\"pre\">type</span></tt> at the point where generator was paused,\nand returns the next value yielded by the generator function.  If the generator\nexits without yielding another value, a <a class=\"reference internal\" href=\"../library/exceptions.html#StopIteration\" title=\"StopIteration\"><tt class=\"xref py py-exc docutils literal\"><span class=\"pre\">StopIteration</span></tt></a> exception is\nraised.  If the generator function does not catch the passed-in exception, or\nraises a different exception, then that exception propagates to the caller.",
      "path": "div > div > div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#yield-expressions.section:nth-of-type(9) > div#generator-iterator-methods.section:nth-of-type(1) > dl.method:nth-of-type(3) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "Raises an exception of type ",
        "type",
        " at the point where generator was paused,\nand returns the next value yielded by the generator function.  If the generator\nexits without yielding another value, a ",
        "StopIteration",
        " exception is\nraised.  If the generator function does not catch the passed-in exception, or\nraises a different exception, then that exception propagates to the caller."
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 4434,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#generator.close:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">generator.</tt><tt class=\"descname\">close</tt><big>(</big><big>)</big><a class=\"headerlink\" href=\"#generator.close\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#yield-expressions.section:nth-of-type(9) > div#generator-iterator-methods.section:nth-of-type(1) > dl.method:nth-of-type(4) > dt#generator.close:nth-of-type(1)",
      "text": [
        "generator.",
        "close",
        "(",
        ")",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 295,
        "top": 4462,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "Raises a <a class=\"reference internal\" href=\"../library/exceptions.html#GeneratorExit\" title=\"GeneratorExit\"><tt class=\"xref py py-exc docutils literal\"><span class=\"pre\">GeneratorExit</span></tt></a> at the point where the generator function was\npaused.  If the generator function then raises <a class=\"reference internal\" href=\"../library/exceptions.html#StopIteration\" title=\"StopIteration\"><tt class=\"xref py py-exc docutils literal\"><span class=\"pre\">StopIteration</span></tt></a> (by\nexiting normally, or due to already being closed) or <a class=\"reference internal\" href=\"../library/exceptions.html#GeneratorExit\" title=\"GeneratorExit\"><tt class=\"xref py py-exc docutils literal\"><span class=\"pre\">GeneratorExit</span></tt></a> (by\nnot catching the exception), close returns to its caller.  If the generator\nyields a value, a <a class=\"reference internal\" href=\"../library/exceptions.html#RuntimeError\" title=\"RuntimeError\"><tt class=\"xref py py-exc docutils literal\"><span class=\"pre\">RuntimeError</span></tt></a> is raised.  If the generator raises any\nother exception, it is propagated to the caller.  <a class=\"reference internal\" href=\"#generator.close\" title=\"generator.close\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">close()</span></tt></a> does nothing\nif the generator has already exited due to an exception or normal exit.",
      "path": "div > div > div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#yield-expressions.section:nth-of-type(9) > div#generator-iterator-methods.section:nth-of-type(1) > dl.method:nth-of-type(4) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "Raises a ",
        "GeneratorExit",
        " at the point where the generator function was\npaused.  If the generator function then raises ",
        "StopIteration",
        " (by\nexiting normally, or due to already being closed) or ",
        "GeneratorExit",
        " (by\nnot catching the exception), close returns to its caller.  If the generator\nyields a value, a ",
        "RuntimeError",
        " is raised.  If the generator raises any\nother exception, it is propagated to the caller.  ",
        "close()",
        " does nothing\nif the generator has already exited due to an exception or normal exit."
      ]
    },
    {
      "bound": {
        "height": 33,
        "left": 265,
        "top": 4544,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "19px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "5px",
        "padding-top": "5px"
      },
      "element": "h4:nth-of-type(1)",
      "html": "6.2.9.2. Examples<a class=\"headerlink\" href=\"#examples\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > div > div > div > h4",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#yield-expressions.section:nth-of-type(9) > div#examples.section:nth-of-type(2) > h4:nth-of-type(1)",
      "text": [
        "6.2.9.2. Examples",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 4593,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "Here is a simple example that demonstrates the behavior of generators and\ngenerator functions:",
      "path": "div > div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#yield-expressions.section:nth-of-type(9) > div#examples.section:nth-of-type(2) > p:nth-of-type(1)",
      "text": [
        "Here is a simple example that demonstrates the behavior of generators and\ngenerator functions:"
      ]
    },
    {
      "bound": {
        "height": 19,
        "left": 1554,
        "top": 4631,
        "width": 30
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(170, 204, 153)",
        "cursor": "pointer",
        "font-family": "monospace",
        "font-size": "13px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(170, 204, 153)",
        "padding-left": "2px",
        "padding-right": "2px",
        "position": "absolute"
      },
      "element": "span.copybutton:nth-of-type(1)",
      "html": "&gt;&gt;&gt;",
      "path": "div > div > div > div > div > div > div > div > div > div > span",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#yield-expressions.section:nth-of-type(9) > div#examples.section:nth-of-type(2) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > span.copybutton:nth-of-type(1)",
      "text": [
        ">>>"
      ]
    },
    {
      "bound": {
        "height": 426,
        "left": 265,
        "top": 4631,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">echo</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"k\">None</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s\">\"Execution starts when 'next()' is called for the first time.\"</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>        <span class=\"k\">while</span> <span class=\"k\">True</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>            <span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>                <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">yield</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>            <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>                <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">e</span>\n<span class=\"gp\">... </span>    <span class=\"k\">finally</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s\">\"Don't forget to clean up when 'close()' is called.\"</span><span class=\"p\">)</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">generator</span> <span class=\"o\">=</span> <span class=\"n\">echo</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">generator</span><span class=\"p\">))</span>\n<span class=\"go\">Execution starts when 'next()' is called for the first time.</span>\n<span class=\"go\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">generator</span><span class=\"p\">))</span>\n<span class=\"go\">None</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"go\">2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">throw</span><span class=\"p\">(</span><span class=\"ne\">TypeError</span><span class=\"p\">,</span> <span class=\"s\">\"spam\"</span><span class=\"p\">)</span>\n<span class=\"go\">TypeError('spam',)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n<span class=\"go\">Don't forget to clean up when 'close()' is called.</span>\n",
      "path": "div > div > div > div > div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#yield-expressions.section:nth-of-type(9) > div#examples.section:nth-of-type(2) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        ">>> ",
        "def",
        "echo",
        "(",
        "value",
        "=",
        "None",
        "):",
        "... ",
        "print",
        "(",
        "\"Execution starts when 'next()' is called for the first time.\"",
        ")",
        "... ",
        "try",
        ":",
        "... ",
        "while",
        "True",
        ":",
        "... ",
        "try",
        ":",
        "... ",
        "value",
        "=",
        "(",
        "yield",
        "value",
        ")",
        "... ",
        "except",
        "Exception",
        "as",
        "e",
        ":",
        "... ",
        "value",
        "=",
        "e",
        "... ",
        "finally",
        ":",
        "... ",
        "print",
        "(",
        "\"Don't forget to clean up when 'close()' is called.\"",
        ")",
        "...",
        ">>> ",
        "generator",
        "=",
        "echo",
        "(",
        "1",
        ")",
        ">>> ",
        "print",
        "(",
        "next",
        "(",
        "generator",
        "))",
        "Execution starts when 'next()' is called for the first time.",
        "1",
        ">>> ",
        "print",
        "(",
        "next",
        "(",
        "generator",
        "))",
        "None",
        ">>> ",
        "print",
        "(",
        "generator",
        ".",
        "send",
        "(",
        "2",
        "))",
        "2",
        ">>> ",
        "generator",
        ".",
        "throw",
        "(",
        "TypeError",
        ",",
        "\"spam\"",
        ")",
        "TypeError('spam',)",
        ">>> ",
        "generator",
        ".",
        "close",
        "()",
        "Don't forget to clean up when 'close()' is called."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 5073,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "For examples using <tt class=\"docutils literal\"><span class=\"pre\">yield</span> <span class=\"pre\">from</span></tt>, see <a class=\"reference internal\" href=\"../whatsnew/3.3.html#pep-380\"><em>PEP 380: Syntax for Delegating to a Subgenerator</em></a> in “What’s New in\nPython.”",
      "path": "div > div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#yield-expressions.section:nth-of-type(9) > div#examples.section:nth-of-type(2) > p:nth-of-type(2)",
      "text": [
        "For examples using ",
        "yield",
        "from",
        ", see ",
        "PEP 380: Syntax for Delegating to a Subgenerator",
        " in “What’s New in\nPython.”"
      ]
    },
    {
      "bound": {
        "height": 210,
        "left": 265,
        "top": 5111,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(255, 255, 204)",
        "border-bottom-color": "rgb(221, 221, 102)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(221, 221, 102)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 102)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 102)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "margin-bottom": "10px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "10px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "7px",
        "padding-left": "7px",
        "padding-right": "7px",
        "padding-top": "7px"
      },
      "element": "div.admonition.admonition-see-also.seealso:nth-of-type(2)",
      "html": "\n<p class=\"first admonition-title\">See also</p>\n<dl class=\"last docutils\">\n<dt><span class=\"target\" id=\"index-22\"></span><a class=\"pep reference external\" href=\"http://www.python.org/dev/peps/pep-0255\"><strong>PEP 0255</strong></a> - Simple Generators</dt>\n<dd>The proposal for adding generators and the <a class=\"reference internal\" href=\"simple_stmts.html#yield\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">yield</span></tt></a> statement to Python.</dd>\n<dt><span class=\"target\" id=\"index-23\"></span><a class=\"pep reference external\" href=\"http://www.python.org/dev/peps/pep-0342\"><strong>PEP 0342</strong></a> - Coroutines via Enhanced Generators</dt>\n<dd>The proposal to enhance the API and syntax of generators, making them\nusable as simple coroutines.</dd>\n<dt><span class=\"target\" id=\"index-24\"></span><a class=\"pep reference external\" href=\"http://www.python.org/dev/peps/pep-0380\"><strong>PEP 0380</strong></a> - Syntax for Delegating to a Subgenerator</dt>\n<dd>The proposal to introduce the <tt class=\"xref std std-token docutils literal\"><span class=\"pre\">yield_from</span></tt> syntax, making delegation\nto sub-generators easy.</dd>\n</dl>\n",
      "path": "div > div > div > div > div > div > div > div > div",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#yield-expressions.section:nth-of-type(9) > div#examples.section:nth-of-type(2) > div.admonition.admonition-see-also.seealso:nth-of-type(2)",
      "text": [
        "See also"
      ]
    },
    {
      "bound": {
        "height": 19,
        "left": 273,
        "top": 5157,
        "width": 1303
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "font-weight": "bold",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt:nth-of-type(1)",
      "html": "<span class=\"target\" id=\"index-22\"></span><a class=\"pep reference external\" href=\"http://www.python.org/dev/peps/pep-0255\"><strong>PEP 0255</strong></a> - Simple Generators",
      "path": "div > div > div > div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#yield-expressions.section:nth-of-type(9) > div#examples.section:nth-of-type(2) > div.admonition.admonition-see-also.seealso:nth-of-type(2) > dl.docutils.last:nth-of-type(1) > dt:nth-of-type(1)",
      "text": [
        "PEP 0255",
        " - Simple Generators"
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 303,
        "top": 5179,
        "width": 1273
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-bottom": "10px",
        "margin-left": "30px",
        "margin-right": "0px",
        "margin-top": "3px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dd:nth-of-type(1)",
      "html": "The proposal for adding generators and the <a class=\"reference internal\" href=\"simple_stmts.html#yield\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">yield</span></tt></a> statement to Python.",
      "path": "div > div > div > div > div > div > div > div > div > dl > dd",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#yield-expressions.section:nth-of-type(9) > div#examples.section:nth-of-type(2) > div.admonition.admonition-see-also.seealso:nth-of-type(2) > dl.docutils.last:nth-of-type(1) > dd:nth-of-type(1)",
      "text": [
        "The proposal for adding generators and the ",
        "yield",
        " statement to Python."
      ]
    },
    {
      "bound": {
        "height": 19,
        "left": 273,
        "top": 5209,
        "width": 1303
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "font-weight": "bold",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt:nth-of-type(2)",
      "html": "<span class=\"target\" id=\"index-23\"></span><a class=\"pep reference external\" href=\"http://www.python.org/dev/peps/pep-0342\"><strong>PEP 0342</strong></a> - Coroutines via Enhanced Generators",
      "path": "div > div > div > div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#yield-expressions.section:nth-of-type(9) > div#examples.section:nth-of-type(2) > div.admonition.admonition-see-also.seealso:nth-of-type(2) > dl.docutils.last:nth-of-type(1) > dt:nth-of-type(2)",
      "text": [
        "PEP 0342",
        " - Coroutines via Enhanced Generators"
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 303,
        "top": 5231,
        "width": 1273
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-bottom": "10px",
        "margin-left": "30px",
        "margin-right": "0px",
        "margin-top": "3px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dd:nth-of-type(2)",
      "html": "The proposal to enhance the API and syntax of generators, making them\nusable as simple coroutines.",
      "path": "div > div > div > div > div > div > div > div > div > dl > dd",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#yield-expressions.section:nth-of-type(9) > div#examples.section:nth-of-type(2) > div.admonition.admonition-see-also.seealso:nth-of-type(2) > dl.docutils.last:nth-of-type(1) > dd:nth-of-type(2)",
      "text": [
        "The proposal to enhance the API and syntax of generators, making them\nusable as simple coroutines."
      ]
    },
    {
      "bound": {
        "height": 19,
        "left": 273,
        "top": 5261,
        "width": 1303
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "font-weight": "bold",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt:nth-of-type(3)",
      "html": "<span class=\"target\" id=\"index-24\"></span><a class=\"pep reference external\" href=\"http://www.python.org/dev/peps/pep-0380\"><strong>PEP 0380</strong></a> - Syntax for Delegating to a Subgenerator",
      "path": "div > div > div > div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#yield-expressions.section:nth-of-type(9) > div#examples.section:nth-of-type(2) > div.admonition.admonition-see-also.seealso:nth-of-type(2) > dl.docutils.last:nth-of-type(1) > dt:nth-of-type(3)",
      "text": [
        "PEP 0380",
        " - Syntax for Delegating to a Subgenerator"
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 303,
        "top": 5283,
        "width": 1273
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-bottom": "10px",
        "margin-left": "30px",
        "margin-right": "0px",
        "margin-top": "3px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dd:nth-of-type(3)",
      "html": "The proposal to introduce the <tt class=\"xref std std-token docutils literal\"><span class=\"pre\">yield_from</span></tt> syntax, making delegation\nto sub-generators easy.",
      "path": "div > div > div > div > div > div > div > div > div > dl > dd",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#atoms.section:nth-of-type(2) > div#yield-expressions.section:nth-of-type(9) > div#examples.section:nth-of-type(2) > div.admonition.admonition-see-also.seealso:nth-of-type(2) > dl.docutils.last:nth-of-type(1) > dd:nth-of-type(3)",
      "text": [
        "The proposal to introduce the ",
        "yield_from",
        " syntax, making delegation\nto sub-generators easy."
      ]
    },
    {
      "bound": {
        "height": 46,
        "left": 265,
        "top": 5331,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "26px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "7px",
        "padding-top": "7px"
      },
      "element": "h2:nth-of-type(1)",
      "html": "6.3. Primaries<a class=\"headerlink\" href=\"#primaries\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > div > h2",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > h2:nth-of-type(1)",
      "text": [
        "6.3. Primaries",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 5393,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-25:nth-of-type(1)",
      "html": "Primaries represent the most tightly bound operations of the language. Their\nsyntax is:",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > p#index-25:nth-of-type(1)",
      "text": [
        "Primaries represent the most tightly bound operations of the language. Their\nsyntax is:"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 265,
        "top": 5431,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<strong id=\"grammar-token-primary\">primary</strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-atom\"><tt class=\"xref docutils literal\"><span class=\"pre\">atom</span></tt></a> | <a class=\"reference internal\" href=\"#grammar-token-attributeref\"><tt class=\"xref docutils literal\"><span class=\"pre\">attributeref</span></tt></a> | <a class=\"reference internal\" href=\"#grammar-token-subscription\"><tt class=\"xref docutils literal\"><span class=\"pre\">subscription</span></tt></a> | <a class=\"reference internal\" href=\"#grammar-token-slicing\"><tt class=\"xref docutils literal\"><span class=\"pre\">slicing</span></tt></a> | <a class=\"reference internal\" href=\"#grammar-token-call\"><tt class=\"xref docutils literal\"><span class=\"pre\">call</span></tt></a>\n",
      "path": "div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > pre:nth-of-type(1)",
      "text": [
        "primary",
        " ::=  ",
        "atom",
        " | ",
        "attributeref",
        " | ",
        "subscription",
        " | ",
        "slicing",
        " | ",
        "call"
      ]
    },
    {
      "bound": {
        "height": 39,
        "left": 265,
        "top": 5476,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "22px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "6px",
        "padding-top": "6px"
      },
      "element": "h3:nth-of-type(1)",
      "html": "6.3.1. Attribute references<a class=\"headerlink\" href=\"#attribute-references\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > div > div > h3",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#attribute-references.section:nth-of-type(1) > h3:nth-of-type(1)",
      "text": [
        "6.3.1. Attribute references",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 5531,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-26:nth-of-type(1)",
      "html": "An attribute reference is a primary followed by a period and a name:",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#attribute-references.section:nth-of-type(1) > p#index-26:nth-of-type(1)",
      "text": [
        "An attribute reference is a primary followed by a period and a name:"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 265,
        "top": 5569,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<strong id=\"grammar-token-attributeref\">attributeref</strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-primary\"><tt class=\"xref docutils literal\"><span class=\"pre\">primary</span></tt></a> \".\" <a class=\"reference internal\" href=\"lexical_analysis.html#grammar-token-identifier\"><tt class=\"xref docutils literal\"><span class=\"pre\">identifier</span></tt></a>\n",
      "path": "div > div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#attribute-references.section:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        "attributeref",
        " ::=  ",
        "primary",
        " \".\" ",
        "identifier"
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 265,
        "top": 5615,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-27:nth-of-type(2)",
      "html": "The primary must evaluate to an object of a type that supports attribute\nreferences, which most objects do.  This object is then asked to produce the\nattribute whose name is the identifier (which can be customized by overriding\nthe <a class=\"reference internal\" href=\"datamodel.html#object.__getattr__\" title=\"object.__getattr__\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">__getattr__()</span></tt></a> method).  If this attribute is not available, the\nexception <a class=\"reference internal\" href=\"../library/exceptions.html#AttributeError\" title=\"AttributeError\"><tt class=\"xref py py-exc docutils literal\"><span class=\"pre\">AttributeError</span></tt></a> is raised.  Otherwise, the type and value of the\nobject produced is determined by the object.  Multiple evaluations of the same\nattribute reference may yield different objects.",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#attribute-references.section:nth-of-type(1) > p#index-27:nth-of-type(2)",
      "text": [
        "The primary must evaluate to an object of a type that supports attribute\nreferences, which most objects do.  This object is then asked to produce the\nattribute whose name is the identifier (which can be customized by overriding\nthe ",
        "__getattr__()",
        " method).  If this attribute is not available, the\nexception ",
        "AttributeError",
        " is raised.  Otherwise, the type and value of the\nobject produced is determined by the object.  Multiple evaluations of the same\nattribute reference may yield different objects."
      ]
    },
    {
      "bound": {
        "height": 39,
        "left": 265,
        "top": 5697,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "22px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "6px",
        "padding-top": "6px"
      },
      "element": "h3:nth-of-type(1)",
      "html": "6.3.2. Subscriptions<a class=\"headerlink\" href=\"#subscriptions\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > div > div > h3",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#subscriptions.section:nth-of-type(2) > h3:nth-of-type(1)",
      "text": [
        "6.3.2. Subscriptions",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 5752,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-29:nth-of-type(1)",
      "html": "A subscription selects an item of a sequence (string, tuple or list) or mapping\n(dictionary) object:",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#subscriptions.section:nth-of-type(2) > p#index-29:nth-of-type(1)",
      "text": [
        "A subscription selects an item of a sequence (string, tuple or list) or mapping\n(dictionary) object:"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 265,
        "top": 5790,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<strong id=\"grammar-token-subscription\">subscription</strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-primary\"><tt class=\"xref docutils literal\"><span class=\"pre\">primary</span></tt></a> \"[\" <a class=\"reference internal\" href=\"#grammar-token-expression_list\"><tt class=\"xref docutils literal\"><span class=\"pre\">expression_list</span></tt></a> \"]\"\n",
      "path": "div > div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#subscriptions.section:nth-of-type(2) > pre:nth-of-type(1)",
      "text": [
        "subscription",
        " ::=  ",
        "primary",
        " \"[\" ",
        "expression_list",
        " \"]\"\n"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 5836,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "The primary must evaluate to an object that supports subscription, e.g. a list\nor dictionary.  User-defined objects can support subscription by defining a\n<a class=\"reference internal\" href=\"datamodel.html#object.__getitem__\" title=\"object.__getitem__\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">__getitem__()</span></tt></a> method.",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#subscriptions.section:nth-of-type(2) > p:nth-of-type(2)",
      "text": [
        "The primary must evaluate to an object that supports subscription, e.g. a list\nor dictionary.  User-defined objects can support subscription by defining a\n",
        "__getitem__()",
        " method."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 5874,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(3)",
      "html": "For built-in objects, there are two types of objects that support subscription:",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#subscriptions.section:nth-of-type(2) > p:nth-of-type(3)",
      "text": [
        "For built-in objects, there are two types of objects that support subscription:"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 5912,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(4)",
      "html": "If the primary is a mapping, the expression list must evaluate to an object\nwhose value is one of the keys of the mapping, and the subscription selects the\nvalue in the mapping that corresponds to that key.  (The expression list is a\ntuple except if it has exactly one item.)",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#subscriptions.section:nth-of-type(2) > p:nth-of-type(4)",
      "text": [
        "If the primary is a mapping, the expression list must evaluate to an object\nwhose value is one of the keys of the mapping, and the subscription selects the\nvalue in the mapping that corresponds to that key.  (The expression list is a\ntuple except if it has exactly one item.)"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 5972,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(5)",
      "html": "If the primary is a sequence, the expression (list) must evaluate to an integer\nor a slice (as discussed in the following section).",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#subscriptions.section:nth-of-type(2) > p:nth-of-type(5)",
      "text": [
        "If the primary is a sequence, the expression (list) must evaluate to an integer\nor a slice (as discussed in the following section)."
      ]
    },
    {
      "bound": {
        "height": 88,
        "left": 265,
        "top": 6010,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(6)",
      "html": "The formal syntax makes no special provision for negative indices in\nsequences; however, built-in sequences all provide a <a class=\"reference internal\" href=\"datamodel.html#object.__getitem__\" title=\"object.__getitem__\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">__getitem__()</span></tt></a>\nmethod that interprets negative indices by adding the length of the sequence\nto the index (so that <tt class=\"docutils literal\"><span class=\"pre\">x[-1]</span></tt> selects the last item of <tt class=\"docutils literal\"><span class=\"pre\">x</span></tt>).  The\nresulting value must be a nonnegative integer less than the number of items in\nthe sequence, and the subscription selects the item whose index is that value\n(counting from zero). Since the support for negative indices and slicing\noccurs in the object’s <a class=\"reference internal\" href=\"datamodel.html#object.__getitem__\" title=\"object.__getitem__\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">__getitem__()</span></tt></a> method, subclasses overriding\nthis method will need to explicitly add that support.",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#subscriptions.section:nth-of-type(2) > p:nth-of-type(6)",
      "text": [
        "The formal syntax makes no special provision for negative indices in\nsequences; however, built-in sequences all provide a ",
        "__getitem__()",
        "\nmethod that interprets negative indices by adding the length of the sequence\nto the index (so that ",
        "x[-1]",
        " selects the last item of ",
        "x",
        ").  The\nresulting value must be a nonnegative integer less than the number of items in\nthe sequence, and the subscription selects the item whose index is that value\n(counting from zero). Since the support for negative indices and slicing\noccurs in the object’s ",
        "__getitem__()",
        " method, subclasses overriding\nthis method will need to explicitly add that support."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 6114,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-30:nth-of-type(7)",
      "html": "A string’s items are characters.  A character is not a separate data type but a\nstring of exactly one character.",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#subscriptions.section:nth-of-type(2) > p#index-30:nth-of-type(7)",
      "text": [
        "A string’s items are characters.  A character is not a separate data type but a\nstring of exactly one character."
      ]
    },
    {
      "bound": {
        "height": 39,
        "left": 265,
        "top": 6152,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "22px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "6px",
        "padding-top": "6px"
      },
      "element": "h3:nth-of-type(1)",
      "html": "6.3.3. Slicings<a class=\"headerlink\" href=\"#slicings\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > div > div > h3",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#slicings.section:nth-of-type(3) > h3:nth-of-type(1)",
      "text": [
        "6.3.3. Slicings",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 6207,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-32:nth-of-type(1)",
      "html": "A slicing selects a range of items in a sequence object (e.g., a string, tuple\nor list).  Slicings may be used as expressions or as targets in assignment or\n<a class=\"reference internal\" href=\"simple_stmts.html#del\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">del</span></tt></a> statements.  The syntax for a slicing:",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#slicings.section:nth-of-type(3) > p#index-32:nth-of-type(1)",
      "text": [
        "A slicing selects a range of items in a sequence object (e.g., a string, tuple\nor list).  Slicings may be used as expressions or as targets in assignment or\n",
        "del",
        " statements.  The syntax for a slicing:"
      ]
    },
    {
      "bound": {
        "height": 138,
        "left": 265,
        "top": 6267,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<strong id=\"grammar-token-slicing\">slicing     </strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-primary\"><tt class=\"xref docutils literal\"><span class=\"pre\">primary</span></tt></a> \"[\" <a class=\"reference internal\" href=\"#grammar-token-slice_list\"><tt class=\"xref docutils literal\"><span class=\"pre\">slice_list</span></tt></a> \"]\"\n<strong id=\"grammar-token-slice_list\">slice_list  </strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-slice_item\"><tt class=\"xref docutils literal\"><span class=\"pre\">slice_item</span></tt></a> (\",\" <a class=\"reference internal\" href=\"#grammar-token-slice_item\"><tt class=\"xref docutils literal\"><span class=\"pre\">slice_item</span></tt></a>)* [\",\"]\n<strong id=\"grammar-token-slice_item\">slice_item  </strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-expression\"><tt class=\"xref docutils literal\"><span class=\"pre\">expression</span></tt></a> | <a class=\"reference internal\" href=\"#grammar-token-proper_slice\"><tt class=\"xref docutils literal\"><span class=\"pre\">proper_slice</span></tt></a>\n<strong id=\"grammar-token-proper_slice\">proper_slice</strong> ::=  [<a class=\"reference internal\" href=\"#grammar-token-lower_bound\"><tt class=\"xref docutils literal\"><span class=\"pre\">lower_bound</span></tt></a>] \":\" [<a class=\"reference internal\" href=\"#grammar-token-upper_bound\"><tt class=\"xref docutils literal\"><span class=\"pre\">upper_bound</span></tt></a>] [ \":\" [<a class=\"reference internal\" href=\"#grammar-token-stride\"><tt class=\"xref docutils literal\"><span class=\"pre\">stride</span></tt></a>] ]\n<strong id=\"grammar-token-lower_bound\">lower_bound </strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-expression\"><tt class=\"xref docutils literal\"><span class=\"pre\">expression</span></tt></a>\n<strong id=\"grammar-token-upper_bound\">upper_bound </strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-expression\"><tt class=\"xref docutils literal\"><span class=\"pre\">expression</span></tt></a>\n<strong id=\"grammar-token-stride\">stride      </strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-expression\"><tt class=\"xref docutils literal\"><span class=\"pre\">expression</span></tt></a>\n",
      "path": "div > div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#slicings.section:nth-of-type(3) > pre:nth-of-type(1)",
      "text": [
        "slicing     ",
        " ::=  ",
        "primary",
        " \"[\" ",
        "slice_list",
        " \"]\"\n",
        "slice_list  ",
        " ::=  ",
        "slice_item",
        " (\",\" ",
        "slice_item",
        ")* [\",\"]\n",
        "slice_item  ",
        " ::=  ",
        "expression",
        " | ",
        "proper_slice",
        "proper_slice",
        " ::=  [",
        "lower_bound",
        "] \":\" [",
        "upper_bound",
        "] [ \":\" [",
        "stride",
        "] ]\n",
        "lower_bound ",
        " ::=  ",
        "expression",
        "upper_bound ",
        " ::=  ",
        "expression",
        "stride      ",
        " ::=  ",
        "expression"
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 265,
        "top": 6421,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "There is ambiguity in the formal syntax here: anything that looks like an\nexpression list also looks like a slice list, so any subscription can be\ninterpreted as a slicing.  Rather than further complicating the syntax, this is\ndisambiguated by defining that in this case the interpretation as a subscription\ntakes priority over the interpretation as a slicing (this is the case if the\nslice list contains no proper slice).",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#slicings.section:nth-of-type(3) > p:nth-of-type(2)",
      "text": [
        "There is ambiguity in the formal syntax here: anything that looks like an\nexpression list also looks like a slice list, so any subscription can be\ninterpreted as a slicing.  Rather than further complicating the syntax, this is\ndisambiguated by defining that in this case the interpretation as a subscription\ntakes priority over the interpretation as a slicing (this is the case if the\nslice list contains no proper slice)."
      ]
    },
    {
      "bound": {
        "height": 110,
        "left": 265,
        "top": 6503,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-33:nth-of-type(3)",
      "html": "The semantics for a slicing are as follows.  The primary must evaluate to a\nmapping object, and it is indexed (using the same <a class=\"reference internal\" href=\"datamodel.html#object.__getitem__\" title=\"object.__getitem__\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">__getitem__()</span></tt></a> method as\nnormal subscription) with a key that is constructed from the slice list, as\nfollows.  If the slice list contains at least one comma, the key is a tuple\ncontaining the conversion of the slice items; otherwise, the conversion of the\nlone slice item is the key.  The conversion of a slice item that is an\nexpression is that expression.  The conversion of a proper slice is a slice\nobject (see section <a class=\"reference internal\" href=\"datamodel.html#types\"><em>The standard type hierarchy</em></a>) whose <tt class=\"xref py py-attr docutils literal\"><span class=\"pre\">start</span></tt>, <tt class=\"xref py py-attr docutils literal\"><span class=\"pre\">stop</span></tt> and\n<tt class=\"xref py py-attr docutils literal\"><span class=\"pre\">step</span></tt> attributes are the values of the expressions given as lower bound,\nupper bound and stride, respectively, substituting <tt class=\"xref docutils literal\"><span class=\"pre\">None</span></tt> for missing\nexpressions.",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#slicings.section:nth-of-type(3) > p#index-33:nth-of-type(3)",
      "text": [
        "The semantics for a slicing are as follows.  The primary must evaluate to a\nmapping object, and it is indexed (using the same ",
        "__getitem__()",
        " method as\nnormal subscription) with a key that is constructed from the slice list, as\nfollows.  If the slice list contains at least one comma, the key is a tuple\ncontaining the conversion of the slice items; otherwise, the conversion of the\nlone slice item is the key.  The conversion of a slice item that is an\nexpression is that expression.  The conversion of a proper slice is a slice\nobject (see section ",
        "The standard type hierarchy",
        ") whose ",
        "start",
        ", ",
        "stop",
        " and\n",
        "step",
        " attributes are the values of the expressions given as lower bound,\nupper bound and stride, respectively, substituting ",
        "None",
        " for missing\nexpressions."
      ]
    },
    {
      "bound": {
        "height": 39,
        "left": 265,
        "top": 6629,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "22px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "6px",
        "padding-top": "6px"
      },
      "element": "h3:nth-of-type(1)",
      "html": "6.3.4. Calls<a class=\"headerlink\" href=\"#calls\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > div > div > h3",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#calls.section:nth-of-type(4) > h3:nth-of-type(1)",
      "text": [
        "6.3.4. Calls",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 6684,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "A call calls a callable object (e.g., a <a class=\"reference internal\" href=\"../glossary.html#term-function\"><em class=\"xref std std-term\">function</em></a>) with a possibly empty\nseries of <a class=\"reference internal\" href=\"../glossary.html#term-argument\"><em class=\"xref std std-term\">arguments</em></a>:",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#calls.section:nth-of-type(4) > p:nth-of-type(1)",
      "text": [
        "A call calls a callable object (e.g., a ",
        "function",
        ") with a possibly empty\nseries of ",
        "arguments",
        ":"
      ]
    },
    {
      "bound": {
        "height": 210,
        "left": 265,
        "top": 6722,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<strong id=\"grammar-token-call\">call                </strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-primary\"><tt class=\"xref docutils literal\"><span class=\"pre\">primary</span></tt></a> \"(\" [<a class=\"reference internal\" href=\"#grammar-token-argument_list\"><tt class=\"xref docutils literal\"><span class=\"pre\">argument_list</span></tt></a> [\",\"] | <a class=\"reference internal\" href=\"#grammar-token-comprehension\"><tt class=\"xref docutils literal\"><span class=\"pre\">comprehension</span></tt></a>] \")\"\n<strong id=\"grammar-token-argument_list\">argument_list       </strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-positional_arguments\"><tt class=\"xref docutils literal\"><span class=\"pre\">positional_arguments</span></tt></a> [\",\" <a class=\"reference internal\" href=\"#grammar-token-keyword_arguments\"><tt class=\"xref docutils literal\"><span class=\"pre\">keyword_arguments</span></tt></a>]\n                            [\",\" \"*\" <a class=\"reference internal\" href=\"#grammar-token-expression\"><tt class=\"xref docutils literal\"><span class=\"pre\">expression</span></tt></a>] [\",\" <a class=\"reference internal\" href=\"#grammar-token-keyword_arguments\"><tt class=\"xref docutils literal\"><span class=\"pre\">keyword_arguments</span></tt></a>]\n                            [\",\" \"**\" <a class=\"reference internal\" href=\"#grammar-token-expression\"><tt class=\"xref docutils literal\"><span class=\"pre\">expression</span></tt></a>]\n                          | <a class=\"reference internal\" href=\"#grammar-token-keyword_arguments\"><tt class=\"xref docutils literal\"><span class=\"pre\">keyword_arguments</span></tt></a> [\",\" \"*\" <a class=\"reference internal\" href=\"#grammar-token-expression\"><tt class=\"xref docutils literal\"><span class=\"pre\">expression</span></tt></a>]\n                            [\",\" <a class=\"reference internal\" href=\"#grammar-token-keyword_arguments\"><tt class=\"xref docutils literal\"><span class=\"pre\">keyword_arguments</span></tt></a>] [\",\" \"**\" <a class=\"reference internal\" href=\"#grammar-token-expression\"><tt class=\"xref docutils literal\"><span class=\"pre\">expression</span></tt></a>]\n                          | \"*\" <a class=\"reference internal\" href=\"#grammar-token-expression\"><tt class=\"xref docutils literal\"><span class=\"pre\">expression</span></tt></a> [\",\" <a class=\"reference internal\" href=\"#grammar-token-keyword_arguments\"><tt class=\"xref docutils literal\"><span class=\"pre\">keyword_arguments</span></tt></a>] [\",\" \"**\" <a class=\"reference internal\" href=\"#grammar-token-expression\"><tt class=\"xref docutils literal\"><span class=\"pre\">expression</span></tt></a>]\n                          | \"**\" <a class=\"reference internal\" href=\"#grammar-token-expression\"><tt class=\"xref docutils literal\"><span class=\"pre\">expression</span></tt></a>\n<strong id=\"grammar-token-positional_arguments\">positional_arguments</strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-expression\"><tt class=\"xref docutils literal\"><span class=\"pre\">expression</span></tt></a> (\",\" <a class=\"reference internal\" href=\"#grammar-token-expression\"><tt class=\"xref docutils literal\"><span class=\"pre\">expression</span></tt></a>)*\n<strong id=\"grammar-token-keyword_arguments\">keyword_arguments   </strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-keyword_item\"><tt class=\"xref docutils literal\"><span class=\"pre\">keyword_item</span></tt></a> (\",\" <a class=\"reference internal\" href=\"#grammar-token-keyword_item\"><tt class=\"xref docutils literal\"><span class=\"pre\">keyword_item</span></tt></a>)*\n<strong id=\"grammar-token-keyword_item\">keyword_item        </strong> ::=  <a class=\"reference internal\" href=\"lexical_analysis.html#grammar-token-identifier\"><tt class=\"xref docutils literal\"><span class=\"pre\">identifier</span></tt></a> \"=\" <a class=\"reference internal\" href=\"#grammar-token-expression\"><tt class=\"xref docutils literal\"><span class=\"pre\">expression</span></tt></a>\n",
      "path": "div > div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#calls.section:nth-of-type(4) > pre:nth-of-type(1)",
      "text": [
        "call                ",
        " ::=  ",
        "primary",
        " \"(\" [",
        "argument_list",
        " [\",\"] | ",
        "comprehension",
        "] \")\"\n",
        "argument_list       ",
        " ::=  ",
        "positional_arguments",
        " [\",\" ",
        "keyword_arguments",
        "]\n                            [\",\" \"*\" ",
        "expression",
        "] [\",\" ",
        "keyword_arguments",
        "]\n                            [\",\" \"**\" ",
        "expression",
        "]\n                          | ",
        "keyword_arguments",
        " [\",\" \"*\" ",
        "expression",
        "]\n                            [\",\" ",
        "keyword_arguments",
        "] [\",\" \"**\" ",
        "expression",
        "]\n                          | \"*\" ",
        "expression",
        " [\",\" ",
        "keyword_arguments",
        "] [\",\" \"**\" ",
        "expression",
        "]\n                          | \"**\" ",
        "expression",
        "positional_arguments",
        " ::=  ",
        "expression",
        " (\",\" ",
        "expression",
        ")*\n",
        "keyword_arguments   ",
        " ::=  ",
        "keyword_item",
        " (\",\" ",
        "keyword_item",
        ")*\n",
        "keyword_item        ",
        " ::=  ",
        "identifier",
        " \"=\" ",
        "expression"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 6948,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "A trailing comma may be present after the positional and keyword arguments but\ndoes not affect the semantics.",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#calls.section:nth-of-type(4) > p:nth-of-type(2)",
      "text": [
        "A trailing comma may be present after the positional and keyword arguments but\ndoes not affect the semantics."
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 265,
        "top": 6986,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-35:nth-of-type(3)",
      "html": "The primary must evaluate to a callable object (user-defined functions, built-in\nfunctions, methods of built-in objects, class objects, methods of class\ninstances, and all objects having a <a class=\"reference internal\" href=\"datamodel.html#object.__call__\" title=\"object.__call__\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">__call__()</span></tt></a> method are callable).  All\nargument expressions are evaluated before the call is attempted.  Please refer\nto section <a class=\"reference internal\" href=\"compound_stmts.html#function\"><em>Function definitions</em></a> for the syntax of formal <a class=\"reference internal\" href=\"../glossary.html#term-parameter\"><em class=\"xref std std-term\">parameter</em></a> lists.",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#calls.section:nth-of-type(4) > p#index-35:nth-of-type(3)",
      "text": [
        "The primary must evaluate to a callable object (user-defined functions, built-in\nfunctions, methods of built-in objects, class objects, methods of class\ninstances, and all objects having a ",
        "__call__()",
        " method are callable).  All\nargument expressions are evaluated before the call is attempted.  Please refer\nto section ",
        "Function definitions",
        " for the syntax of formal ",
        "parameter",
        " lists."
      ]
    },
    {
      "bound": {
        "height": 154,
        "left": 265,
        "top": 7068,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(4)",
      "html": "If keyword arguments are present, they are first converted to positional\narguments, as follows.  First, a list of unfilled slots is created for the\nformal parameters.  If there are N positional arguments, they are placed in the\nfirst N slots.  Next, for each keyword argument, the identifier is used to\ndetermine the corresponding slot (if the identifier is the same as the first\nformal parameter name, the first slot is used, and so on).  If the slot is\nalready filled, a <a class=\"reference internal\" href=\"../library/exceptions.html#TypeError\" title=\"TypeError\"><tt class=\"xref py py-exc docutils literal\"><span class=\"pre\">TypeError</span></tt></a> exception is raised. Otherwise, the value of\nthe argument is placed in the slot, filling it (even if the expression is\n<tt class=\"xref docutils literal\"><span class=\"pre\">None</span></tt>, it fills the slot).  When all arguments have been processed, the slots\nthat are still unfilled are filled with the corresponding default value from the\nfunction definition.  (Default values are calculated, once, when the function is\ndefined; thus, a mutable object such as a list or dictionary used as default\nvalue will be shared by all calls that don’t specify an argument value for the\ncorresponding slot; this should usually be avoided.)  If there are any unfilled\nslots for which no default value is specified, a <a class=\"reference internal\" href=\"../library/exceptions.html#TypeError\" title=\"TypeError\"><tt class=\"xref py py-exc docutils literal\"><span class=\"pre\">TypeError</span></tt></a> exception is\nraised.  Otherwise, the list of filled slots is used as the argument list for\nthe call.",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#calls.section:nth-of-type(4) > p:nth-of-type(4)",
      "text": [
        "If keyword arguments are present, they are first converted to positional\narguments, as follows.  First, a list of unfilled slots is created for the\nformal parameters.  If there are N positional arguments, they are placed in the\nfirst N slots.  Next, for each keyword argument, the identifier is used to\ndetermine the corresponding slot (if the identifier is the same as the first\nformal parameter name, the first slot is used, and so on).  If the slot is\nalready filled, a ",
        "TypeError",
        " exception is raised. Otherwise, the value of\nthe argument is placed in the slot, filling it (even if the expression is\n",
        "None",
        ", it fills the slot).  When all arguments have been processed, the slots\nthat are still unfilled are filled with the corresponding default value from the\nfunction definition.  (Default values are calculated, once, when the function is\ndefined; thus, a mutable object such as a list or dictionary used as default\nvalue will be shared by all calls that don’t specify an argument value for the\ncorresponding slot; this should usually be avoided.)  If there are any unfilled\nslots for which no default value is specified, a ",
        "TypeError",
        " exception is\nraised.  Otherwise, the list of filled slots is used as the argument list for\nthe call."
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 273,
        "top": 7246,
        "width": 1303
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "<strong>CPython implementation detail:</strong> An implementation may provide built-in functions whose positional parameters\ndo not have names, even if they are ‘named’ for the purpose of documentation,\nand which therefore cannot be supplied by keyword.  In CPython, this is the\ncase for functions implemented in C that use <a class=\"reference internal\" href=\"../c-api/arg.html#PyArg_ParseTuple\" title=\"PyArg_ParseTuple\"><tt class=\"xref c c-func docutils literal\"><span class=\"pre\">PyArg_ParseTuple()</span></tt></a> to\nparse their arguments.",
      "path": "div > div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#calls.section:nth-of-type(4) > div.compound.impl-detail:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "CPython implementation detail:",
        " An implementation may provide built-in functions whose positional parameters\ndo not have names, even if they are ‘named’ for the purpose of documentation,\nand which therefore cannot be supplied by keyword.  In CPython, this is the\ncase for functions implemented in C that use ",
        "PyArg_ParseTuple()",
        " to\nparse their arguments."
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 7336,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(5)",
      "html": "If there are more positional arguments than there are formal parameter slots, a\n<a class=\"reference internal\" href=\"../library/exceptions.html#TypeError\" title=\"TypeError\"><tt class=\"xref py py-exc docutils literal\"><span class=\"pre\">TypeError</span></tt></a> exception is raised, unless a formal parameter using the syntax\n<tt class=\"docutils literal\"><span class=\"pre\">*identifier</span></tt> is present; in this case, that formal parameter receives a tuple\ncontaining the excess positional arguments (or an empty tuple if there were no\nexcess positional arguments).",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#calls.section:nth-of-type(4) > p:nth-of-type(5)",
      "text": [
        "If there are more positional arguments than there are formal parameter slots, a\n",
        "TypeError",
        " exception is raised, unless a formal parameter using the syntax\n",
        "*identifier",
        " is present; in this case, that formal parameter receives a tuple\ncontaining the excess positional arguments (or an empty tuple if there were no\nexcess positional arguments)."
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 265,
        "top": 7396,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(6)",
      "html": "If any keyword argument does not correspond to a formal parameter name, a\n<a class=\"reference internal\" href=\"../library/exceptions.html#TypeError\" title=\"TypeError\"><tt class=\"xref py py-exc docutils literal\"><span class=\"pre\">TypeError</span></tt></a> exception is raised, unless a formal parameter using the syntax\n<tt class=\"docutils literal\"><span class=\"pre\">**identifier</span></tt> is present; in this case, that formal parameter receives a\ndictionary containing the excess keyword arguments (using the keywords as keys\nand the argument values as corresponding values), or a (new) empty dictionary if\nthere were no excess keyword arguments.",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#calls.section:nth-of-type(4) > p:nth-of-type(6)",
      "text": [
        "If any keyword argument does not correspond to a formal parameter name, a\n",
        "TypeError",
        " exception is raised, unless a formal parameter using the syntax\n",
        "**identifier",
        " is present; in this case, that formal parameter receives a\ndictionary containing the excess keyword arguments (using the keywords as keys\nand the argument values as corresponding values), or a (new) empty dictionary if\nthere were no excess keyword arguments."
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 265,
        "top": 7478,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-36:nth-of-type(7)",
      "html": "If the syntax <tt class=\"docutils literal\"><span class=\"pre\">*expression</span></tt> appears in the function call, <tt class=\"docutils literal\"><span class=\"pre\">expression</span></tt> must\nevaluate to an iterable.  Elements from this iterable are treated as if they\nwere additional positional arguments; if there are positional arguments\n<em>x1</em>, ..., <em>xN</em>, and <tt class=\"docutils literal\"><span class=\"pre\">expression</span></tt> evaluates to a sequence <em>y1</em>, ..., <em>yM</em>,\nthis is equivalent to a call with M+N positional arguments <em>x1</em>, ..., <em>xN</em>,\n<em>y1</em>, ..., <em>yM</em>.",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#calls.section:nth-of-type(4) > p#index-36:nth-of-type(7)",
      "text": [
        "If the syntax ",
        "*expression",
        " appears in the function call, ",
        "expression",
        " must\nevaluate to an iterable.  Elements from this iterable are treated as if they\nwere additional positional arguments; if there are positional arguments\n",
        "x1",
        ", ..., ",
        "xN",
        ", and ",
        "expression",
        " evaluates to a sequence ",
        "y1",
        ", ..., ",
        "yM",
        ",\nthis is equivalent to a call with M+N positional arguments ",
        "x1",
        ", ..., ",
        "xN",
        ",\n",
        "y1",
        ", ..., ",
        "yM",
        "."
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 7560,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(8)",
      "html": "A consequence of this is that although the <tt class=\"docutils literal\"><span class=\"pre\">*expression</span></tt> syntax may appear\n<em>after</em> some keyword arguments, it is processed <em>before</em> the keyword arguments\n(and the <tt class=\"docutils literal\"><span class=\"pre\">**expression</span></tt> argument, if any – see below).  So:",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#calls.section:nth-of-type(4) > p:nth-of-type(8)",
      "text": [
        "A consequence of this is that although the ",
        "*expression",
        " syntax may appear\n",
        "after",
        " some keyword arguments, it is processed ",
        "before",
        " the keyword arguments\n(and the ",
        "**expression",
        " argument, if any – see below).  So:"
      ]
    },
    {
      "bound": {
        "height": 19,
        "left": 1554,
        "top": 7620,
        "width": 30
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(170, 204, 153)",
        "cursor": "pointer",
        "font-family": "monospace",
        "font-size": "13px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(170, 204, 153)",
        "padding-left": "2px",
        "padding-right": "2px",
        "position": "absolute"
      },
      "element": "span.copybutton:nth-of-type(1)",
      "html": "&gt;&gt;&gt;",
      "path": "div > div > div > div > div > div > div > div > div > span",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#calls.section:nth-of-type(4) > div.highlight-python3:nth-of-type(2) > div.highlight:nth-of-type(1) > span.copybutton:nth-of-type(1)",
      "text": [
        ">>>"
      ]
    },
    {
      "bound": {
        "height": 210,
        "left": 265,
        "top": 7620,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,))</span>\n<span class=\"go\">2 1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,))</span>\n<span class=\"gt\">Traceback (most recent call last):</span><span>\n  File </span><span class=\"nb\">\"&lt;stdin&gt;\"</span><span>, line </span><span class=\"m\">1</span><span>, in </span><span class=\"n\">?</span>\n<span class=\"gr\">TypeError</span><span>: </span><span class=\"n\">f() got multiple values for keyword argument 'a'</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,))</span>\n<span class=\"go\">1 2</span>\n",
      "path": "div > div > div > div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#calls.section:nth-of-type(4) > div.highlight-python3:nth-of-type(2) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        ">>> ",
        "def",
        "f",
        "(",
        "a",
        ",",
        "b",
        "):",
        "... ",
        "print",
        "(",
        "a",
        ",",
        "b",
        ")",
        "...",
        ">>> ",
        "f",
        "(",
        "b",
        "=",
        "1",
        ",",
        "*",
        "(",
        "2",
        ",))",
        "2 1",
        ">>> ",
        "f",
        "(",
        "a",
        "=",
        "1",
        ",",
        "*",
        "(",
        "2",
        ",))",
        "Traceback (most recent call last):",
        "\n  File ",
        "\"<stdin>\"",
        ", line ",
        "1",
        ", in ",
        "?",
        "TypeError",
        ": ",
        "f() got multiple values for keyword argument 'a'",
        ">>> ",
        "f",
        "(",
        "1",
        ",",
        "*",
        "(",
        "2",
        ",))",
        "1 2"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 7846,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(9)",
      "html": "It is unusual for both keyword arguments and the <tt class=\"docutils literal\"><span class=\"pre\">*expression</span></tt> syntax to be\nused in the same call, so in practice this confusion does not arise.",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#calls.section:nth-of-type(4) > p:nth-of-type(9)",
      "text": [
        "It is unusual for both keyword arguments and the ",
        "*expression",
        " syntax to be\nused in the same call, so in practice this confusion does not arise."
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 7884,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-37:nth-of-type(10)",
      "html": "If the syntax <tt class=\"docutils literal\"><span class=\"pre\">**expression</span></tt> appears in the function call, <tt class=\"docutils literal\"><span class=\"pre\">expression</span></tt> must\nevaluate to a mapping, the contents of which are treated as additional keyword\narguments.  In the case of a keyword appearing in both <tt class=\"docutils literal\"><span class=\"pre\">expression</span></tt> and as an\nexplicit keyword argument, a <a class=\"reference internal\" href=\"../library/exceptions.html#TypeError\" title=\"TypeError\"><tt class=\"xref py py-exc docutils literal\"><span class=\"pre\">TypeError</span></tt></a> exception is raised.",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#calls.section:nth-of-type(4) > p#index-37:nth-of-type(10)",
      "text": [
        "If the syntax ",
        "**expression",
        " appears in the function call, ",
        "expression",
        " must\nevaluate to a mapping, the contents of which are treated as additional keyword\narguments.  In the case of a keyword appearing in both ",
        "expression",
        " and as an\nexplicit keyword argument, a ",
        "TypeError",
        " exception is raised."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 7944,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(11)",
      "html": "Formal parameters using the syntax <tt class=\"docutils literal\"><span class=\"pre\">*identifier</span></tt> or <tt class=\"docutils literal\"><span class=\"pre\">**identifier</span></tt> cannot be\nused as positional argument slots or as keyword argument names.",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#calls.section:nth-of-type(4) > p:nth-of-type(11)",
      "text": [
        "Formal parameters using the syntax ",
        "*identifier",
        " or ",
        "**identifier",
        " cannot be\nused as positional argument slots or as keyword argument names."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 7982,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(12)",
      "html": "A call always returns some value, possibly <tt class=\"xref docutils literal\"><span class=\"pre\">None</span></tt>, unless it raises an\nexception.  How this value is computed depends on the type of the callable\nobject.",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#calls.section:nth-of-type(4) > p:nth-of-type(12)",
      "text": [
        "A call always returns some value, possibly ",
        "None",
        ", unless it raises an\nexception.  How this value is computed depends on the type of the callable\nobject."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 8020,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(13)",
      "html": "If it is—",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#calls.section:nth-of-type(4) > p:nth-of-type(13)",
      "text": [
        "If it is—"
      ]
    },
    {
      "bound": {
        "height": 19,
        "left": 265,
        "top": 8058,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt:nth-of-type(1)",
      "html": "a user-defined function:",
      "path": "div > div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#calls.section:nth-of-type(4) > dl.docutils:nth-of-type(1) > dt:nth-of-type(1)",
      "text": [
        "a user-defined function:"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 295,
        "top": 8080,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-38.first.last:nth-of-type(1)",
      "html": "The code block for the function is executed, passing it the argument list.  The\nfirst thing the code block will do is bind the formal parameters to the\narguments; this is described in section <a class=\"reference internal\" href=\"compound_stmts.html#function\"><em>Function definitions</em></a>.  When the code block\nexecutes a <a class=\"reference internal\" href=\"simple_stmts.html#return\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">return</span></tt></a> statement, this specifies the return value of the\nfunction call.",
      "path": "div > div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#calls.section:nth-of-type(4) > dl.docutils:nth-of-type(1) > dd:nth-of-type(1) > p#index-38.first.last:nth-of-type(1)",
      "text": [
        "The code block for the function is executed, passing it the argument list.  The\nfirst thing the code block will do is bind the formal parameters to the\narguments; this is described in section ",
        "Function definitions",
        ".  When the code block\nexecutes a ",
        "return",
        " statement, this specifies the return value of the\nfunction call."
      ]
    },
    {
      "bound": {
        "height": 19,
        "left": 265,
        "top": 8140,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt:nth-of-type(2)",
      "html": "a built-in function or method:",
      "path": "div > div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#calls.section:nth-of-type(4) > dl.docutils:nth-of-type(1) > dt:nth-of-type(2)",
      "text": [
        "a built-in function or method:"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 8162,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-39.first.last:nth-of-type(1)",
      "html": "The result is up to the interpreter; see <a class=\"reference internal\" href=\"../library/functions.html#built-in-funcs\"><em>Built-in Functions</em></a> for the\ndescriptions of built-in functions and methods.",
      "path": "div > div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#calls.section:nth-of-type(4) > dl.docutils:nth-of-type(1) > dd:nth-of-type(2) > p#index-39.first.last:nth-of-type(1)",
      "text": [
        "The result is up to the interpreter; see ",
        "Built-in Functions",
        " for the\ndescriptions of built-in functions and methods."
      ]
    },
    {
      "bound": {
        "height": 19,
        "left": 265,
        "top": 8200,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt:nth-of-type(3)",
      "html": "a class object:",
      "path": "div > div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#calls.section:nth-of-type(4) > dl.docutils:nth-of-type(1) > dt:nth-of-type(3)",
      "text": [
        "a class object:"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 8222,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-40.first.last:nth-of-type(1)",
      "html": "A new instance of that class is returned.",
      "path": "div > div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#calls.section:nth-of-type(4) > dl.docutils:nth-of-type(1) > dd:nth-of-type(3) > p#index-40.first.last:nth-of-type(1)",
      "text": [
        "A new instance of that class is returned."
      ]
    },
    {
      "bound": {
        "height": 19,
        "left": 265,
        "top": 8260,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt:nth-of-type(4)",
      "html": "a class instance method:",
      "path": "div > div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#calls.section:nth-of-type(4) > dl.docutils:nth-of-type(1) > dt:nth-of-type(4)",
      "text": [
        "a class instance method:"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 8282,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-41.first.last:nth-of-type(1)",
      "html": "The corresponding user-defined function is called, with an argument list that is\none longer than the argument list of the call: the instance becomes the first\nargument.",
      "path": "div > div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#calls.section:nth-of-type(4) > dl.docutils:nth-of-type(1) > dd:nth-of-type(4) > p#index-41.first.last:nth-of-type(1)",
      "text": [
        "The corresponding user-defined function is called, with an argument list that is\none longer than the argument list of the call: the instance becomes the first\nargument."
      ]
    },
    {
      "bound": {
        "height": 19,
        "left": 265,
        "top": 8320,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt:nth-of-type(5)",
      "html": "a class instance:",
      "path": "div > div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#calls.section:nth-of-type(4) > dl.docutils:nth-of-type(1) > dt:nth-of-type(5)",
      "text": [
        "a class instance:"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 8342,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-42.first.last:nth-of-type(1)",
      "html": "The class must define a <a class=\"reference internal\" href=\"datamodel.html#object.__call__\" title=\"object.__call__\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">__call__()</span></tt></a> method; the effect is then the same as\nif that method was called.",
      "path": "div > div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#primaries.section:nth-of-type(3) > div#calls.section:nth-of-type(4) > dl.docutils:nth-of-type(1) > dd:nth-of-type(5) > p#index-42.first.last:nth-of-type(1)",
      "text": [
        "The class must define a ",
        "__call__()",
        " method; the effect is then the same as\nif that method was called."
      ]
    },
    {
      "bound": {
        "height": 46,
        "left": 265,
        "top": 8380,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "26px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "7px",
        "padding-top": "7px"
      },
      "element": "h2:nth-of-type(1)",
      "html": "6.4. The power operator<a class=\"headerlink\" href=\"#the-power-operator\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > div > h2",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#the-power-operator.section:nth-of-type(4) > h2:nth-of-type(1)",
      "text": [
        "6.4. The power operator",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 8442,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "The power operator binds more tightly than unary operators on its left; it binds\nless tightly than unary operators on its right.  The syntax is:",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#the-power-operator.section:nth-of-type(4) > p:nth-of-type(1)",
      "text": [
        "The power operator binds more tightly than unary operators on its left; it binds\nless tightly than unary operators on its right.  The syntax is:"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 265,
        "top": 8480,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<strong id=\"grammar-token-power\">power</strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-primary\"><tt class=\"xref docutils literal\"><span class=\"pre\">primary</span></tt></a> [\"**\" <a class=\"reference internal\" href=\"#grammar-token-u_expr\"><tt class=\"xref docutils literal\"><span class=\"pre\">u_expr</span></tt></a>]\n",
      "path": "div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#the-power-operator.section:nth-of-type(4) > pre:nth-of-type(1)",
      "text": [
        "power",
        " ::=  ",
        "primary",
        " [\"**\" ",
        "u_expr",
        "]\n"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 8526,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "Thus, in an unparenthesized sequence of power and unary operators, the operators\nare evaluated from right to left (this does not constrain the evaluation order\nfor the operands): <tt class=\"docutils literal\"><span class=\"pre\">-1**2</span></tt> results in <tt class=\"docutils literal\"><span class=\"pre\">-1</span></tt>.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#the-power-operator.section:nth-of-type(4) > p:nth-of-type(2)",
      "text": [
        "Thus, in an unparenthesized sequence of power and unary operators, the operators\nare evaluated from right to left (this does not constrain the evaluation order\nfor the operands): ",
        "-1**2",
        " results in ",
        "-1",
        "."
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 8586,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(3)",
      "html": "The power operator has the same semantics as the built-in <a class=\"reference internal\" href=\"../library/functions.html#pow\" title=\"pow\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">pow()</span></tt></a> function,\nwhen called with two arguments: it yields its left argument raised to the power\nof its right argument.  The numeric arguments are first converted to a common\ntype, and the result is of that type.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#the-power-operator.section:nth-of-type(4) > p:nth-of-type(3)",
      "text": [
        "The power operator has the same semantics as the built-in ",
        "pow()",
        " function,\nwhen called with two arguments: it yields its left argument raised to the power\nof its right argument.  The numeric arguments are first converted to a common\ntype, and the result is of that type."
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 8646,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(4)",
      "html": "For int operands, the result has the same type as the operands unless the second\nargument is negative; in that case, all arguments are converted to float and a\nfloat result is delivered. For example, <tt class=\"docutils literal\"><span class=\"pre\">10**2</span></tt> returns <tt class=\"docutils literal\"><span class=\"pre\">100</span></tt>, but\n<tt class=\"docutils literal\"><span class=\"pre\">10**-2</span></tt> returns <tt class=\"docutils literal\"><span class=\"pre\">0.01</span></tt>.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#the-power-operator.section:nth-of-type(4) > p:nth-of-type(4)",
      "text": [
        "For int operands, the result has the same type as the operands unless the second\nargument is negative; in that case, all arguments are converted to float and a\nfloat result is delivered. For example, ",
        "10**2",
        " returns ",
        "100",
        ", but\n",
        "10**-2",
        " returns ",
        "0.01",
        "."
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 8706,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(5)",
      "html": "Raising <tt class=\"docutils literal\"><span class=\"pre\">0.0</span></tt> to a negative power results in a <a class=\"reference internal\" href=\"../library/exceptions.html#ZeroDivisionError\" title=\"ZeroDivisionError\"><tt class=\"xref py py-exc docutils literal\"><span class=\"pre\">ZeroDivisionError</span></tt></a>.\nRaising a negative number to a fractional power results in a <a class=\"reference internal\" href=\"../library/functions.html#complex\" title=\"complex\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">complex</span></tt></a>\nnumber. (In earlier versions it raised a <a class=\"reference internal\" href=\"../library/exceptions.html#ValueError\" title=\"ValueError\"><tt class=\"xref py py-exc docutils literal\"><span class=\"pre\">ValueError</span></tt></a>.)",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#the-power-operator.section:nth-of-type(4) > p:nth-of-type(5)",
      "text": [
        "Raising ",
        "0.0",
        " to a negative power results in a ",
        "ZeroDivisionError",
        ".\nRaising a negative number to a fractional power results in a ",
        "complex",
        "\nnumber. (In earlier versions it raised a ",
        "ValueError",
        ".)"
      ]
    },
    {
      "bound": {
        "height": 46,
        "left": 265,
        "top": 8766,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "26px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "7px",
        "padding-top": "7px"
      },
      "element": "h2:nth-of-type(1)",
      "html": "6.5. Unary arithmetic and bitwise operations<a class=\"headerlink\" href=\"#unary-arithmetic-and-bitwise-operations\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > div > h2",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#unary-arithmetic-and-bitwise-operations.section:nth-of-type(5) > h2:nth-of-type(1)",
      "text": [
        "6.5. Unary arithmetic and bitwise operations",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 8828,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-43:nth-of-type(1)",
      "html": "All unary arithmetic and bitwise operations have the same priority:",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#unary-arithmetic-and-bitwise-operations.section:nth-of-type(5) > p#index-43:nth-of-type(1)",
      "text": [
        "All unary arithmetic and bitwise operations have the same priority:"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 265,
        "top": 8866,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<strong id=\"grammar-token-u_expr\">u_expr</strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-power\"><tt class=\"xref docutils literal\"><span class=\"pre\">power</span></tt></a> | \"-\" <a class=\"reference internal\" href=\"#grammar-token-u_expr\"><tt class=\"xref docutils literal\"><span class=\"pre\">u_expr</span></tt></a> | \"+\" <a class=\"reference internal\" href=\"#grammar-token-u_expr\"><tt class=\"xref docutils literal\"><span class=\"pre\">u_expr</span></tt></a> | \"~\" <a class=\"reference internal\" href=\"#grammar-token-u_expr\"><tt class=\"xref docutils literal\"><span class=\"pre\">u_expr</span></tt></a>\n",
      "path": "div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#unary-arithmetic-and-bitwise-operations.section:nth-of-type(5) > pre:nth-of-type(1)",
      "text": [
        "u_expr",
        " ::=  ",
        "power",
        " | \"-\" ",
        "u_expr",
        " | \"+\" ",
        "u_expr",
        " | \"~\" ",
        "u_expr"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 8912,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-44:nth-of-type(2)",
      "html": "The unary <tt class=\"docutils literal\"><span class=\"pre\">-</span></tt> (minus) operator yields the negation of its numeric argument.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#unary-arithmetic-and-bitwise-operations.section:nth-of-type(5) > p#index-44:nth-of-type(2)",
      "text": [
        "The unary ",
        "-",
        " (minus) operator yields the negation of its numeric argument."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 8950,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-45:nth-of-type(3)",
      "html": "The unary <tt class=\"docutils literal\"><span class=\"pre\">+</span></tt> (plus) operator yields its numeric argument unchanged.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#unary-arithmetic-and-bitwise-operations.section:nth-of-type(5) > p#index-45:nth-of-type(3)",
      "text": [
        "The unary ",
        "+",
        " (plus) operator yields its numeric argument unchanged."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 8988,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-46:nth-of-type(4)",
      "html": "The unary <tt class=\"docutils literal\"><span class=\"pre\">~</span></tt> (invert) operator yields the bitwise inversion of its integer\nargument.  The bitwise inversion of <tt class=\"docutils literal\"><span class=\"pre\">x</span></tt> is defined as <tt class=\"docutils literal\"><span class=\"pre\">-(x+1)</span></tt>.  It only\napplies to integral numbers.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#unary-arithmetic-and-bitwise-operations.section:nth-of-type(5) > p#index-46:nth-of-type(4)",
      "text": [
        "The unary ",
        "~",
        " (invert) operator yields the bitwise inversion of its integer\nargument.  The bitwise inversion of ",
        "x",
        " is defined as ",
        "-(x+1)",
        ".  It only\napplies to integral numbers."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 9026,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-47:nth-of-type(5)",
      "html": "In all three cases, if the argument does not have the proper type, a\n<a class=\"reference internal\" href=\"../library/exceptions.html#TypeError\" title=\"TypeError\"><tt class=\"xref py py-exc docutils literal\"><span class=\"pre\">TypeError</span></tt></a> exception is raised.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#unary-arithmetic-and-bitwise-operations.section:nth-of-type(5) > p#index-47:nth-of-type(5)",
      "text": [
        "In all three cases, if the argument does not have the proper type, a\n",
        "TypeError",
        " exception is raised."
      ]
    },
    {
      "bound": {
        "height": 46,
        "left": 265,
        "top": 9064,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "26px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "7px",
        "padding-top": "7px"
      },
      "element": "h2:nth-of-type(1)",
      "html": "6.6. Binary arithmetic operations<a class=\"headerlink\" href=\"#binary-arithmetic-operations\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > div > h2",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#binary-arithmetic-operations.section:nth-of-type(6) > h2:nth-of-type(1)",
      "text": [
        "6.6. Binary arithmetic operations",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 9126,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-48:nth-of-type(1)",
      "html": "The binary arithmetic operations have the conventional priority levels.  Note\nthat some of these operations also apply to certain non-numeric types.  Apart\nfrom the power operator, there are only two levels, one for multiplicative\noperators and one for additive operators:",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#binary-arithmetic-operations.section:nth-of-type(6) > p#index-48:nth-of-type(1)",
      "text": [
        "The binary arithmetic operations have the conventional priority levels.  Note\nthat some of these operations also apply to certain non-numeric types.  Apart\nfrom the power operator, there are only two levels, one for multiplicative\noperators and one for additive operators:"
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 265,
        "top": 9186,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<strong id=\"grammar-token-m_expr\">m_expr</strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-u_expr\"><tt class=\"xref docutils literal\"><span class=\"pre\">u_expr</span></tt></a> | <a class=\"reference internal\" href=\"#grammar-token-m_expr\"><tt class=\"xref docutils literal\"><span class=\"pre\">m_expr</span></tt></a> \"*\" <a class=\"reference internal\" href=\"#grammar-token-u_expr\"><tt class=\"xref docutils literal\"><span class=\"pre\">u_expr</span></tt></a> | <a class=\"reference internal\" href=\"#grammar-token-m_expr\"><tt class=\"xref docutils literal\"><span class=\"pre\">m_expr</span></tt></a> \"//\" <a class=\"reference internal\" href=\"#grammar-token-u_expr\"><tt class=\"xref docutils literal\"><span class=\"pre\">u_expr</span></tt></a> | <a class=\"reference internal\" href=\"#grammar-token-m_expr\"><tt class=\"xref docutils literal\"><span class=\"pre\">m_expr</span></tt></a> \"/\" <a class=\"reference internal\" href=\"#grammar-token-u_expr\"><tt class=\"xref docutils literal\"><span class=\"pre\">u_expr</span></tt></a>\n            | <a class=\"reference internal\" href=\"#grammar-token-m_expr\"><tt class=\"xref docutils literal\"><span class=\"pre\">m_expr</span></tt></a> \"%\" <a class=\"reference internal\" href=\"#grammar-token-u_expr\"><tt class=\"xref docutils literal\"><span class=\"pre\">u_expr</span></tt></a>\n<strong id=\"grammar-token-a_expr\">a_expr</strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-m_expr\"><tt class=\"xref docutils literal\"><span class=\"pre\">m_expr</span></tt></a> | <a class=\"reference internal\" href=\"#grammar-token-a_expr\"><tt class=\"xref docutils literal\"><span class=\"pre\">a_expr</span></tt></a> \"+\" <a class=\"reference internal\" href=\"#grammar-token-m_expr\"><tt class=\"xref docutils literal\"><span class=\"pre\">m_expr</span></tt></a> | <a class=\"reference internal\" href=\"#grammar-token-a_expr\"><tt class=\"xref docutils literal\"><span class=\"pre\">a_expr</span></tt></a> \"-\" <a class=\"reference internal\" href=\"#grammar-token-m_expr\"><tt class=\"xref docutils literal\"><span class=\"pre\">m_expr</span></tt></a>\n",
      "path": "div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#binary-arithmetic-operations.section:nth-of-type(6) > pre:nth-of-type(1)",
      "text": [
        "m_expr",
        " ::=  ",
        "u_expr",
        " | ",
        "m_expr",
        " \"*\" ",
        "u_expr",
        " | ",
        "m_expr",
        " \"//\" ",
        "u_expr",
        " | ",
        "m_expr",
        " \"/\" ",
        "u_expr",
        "\n            | ",
        "m_expr",
        " \"%\" ",
        "u_expr",
        "a_expr",
        " ::=  ",
        "m_expr",
        " | ",
        "a_expr",
        " \"+\" ",
        "m_expr",
        " | ",
        "a_expr",
        " \"-\" ",
        "m_expr"
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 265,
        "top": 9268,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-49:nth-of-type(2)",
      "html": "The <tt class=\"docutils literal\"><span class=\"pre\">*</span></tt> (multiplication) operator yields the product of its arguments.  The\narguments must either both be numbers, or one argument must be an integer and\nthe other must be a sequence. In the former case, the numbers are converted to a\ncommon type and then multiplied together.  In the latter case, sequence\nrepetition is performed; a negative repetition factor yields an empty sequence.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#binary-arithmetic-operations.section:nth-of-type(6) > p#index-49:nth-of-type(2)",
      "text": [
        "The ",
        "*",
        " (multiplication) operator yields the product of its arguments.  The\narguments must either both be numbers, or one argument must be an integer and\nthe other must be a sequence. In the former case, the numbers are converted to a\ncommon type and then multiplied together.  In the latter case, sequence\nrepetition is performed; a negative repetition factor yields an empty sequence."
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 265,
        "top": 9350,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-50:nth-of-type(3)",
      "html": "The <tt class=\"docutils literal\"><span class=\"pre\">/</span></tt> (division) and <tt class=\"docutils literal\"><span class=\"pre\">//</span></tt> (floor division) operators yield the quotient of\ntheir arguments.  The numeric arguments are first converted to a common type.\nInteger division yields a float, while floor division of integers results in an\ninteger; the result is that of mathematical division with the ‘floor’ function\napplied to the result.  Division by zero raises the <a class=\"reference internal\" href=\"../library/exceptions.html#ZeroDivisionError\" title=\"ZeroDivisionError\"><tt class=\"xref py py-exc docutils literal\"><span class=\"pre\">ZeroDivisionError</span></tt></a>\nexception.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#binary-arithmetic-operations.section:nth-of-type(6) > p#index-50:nth-of-type(3)",
      "text": [
        "The ",
        "/",
        " (division) and ",
        "//",
        " (floor division) operators yield the quotient of\ntheir arguments.  The numeric arguments are first converted to a common type.\nInteger division yields a float, while floor division of integers results in an\ninteger; the result is that of mathematical division with the ‘floor’ function\napplied to the result.  Division by zero raises the ",
        "ZeroDivisionError",
        "\nexception."
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 265,
        "top": 9432,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-51:nth-of-type(4)",
      "html": "The <tt class=\"docutils literal\"><span class=\"pre\">%</span></tt> (modulo) operator yields the remainder from the division of the first\nargument by the second.  The numeric arguments are first converted to a common\ntype.  A zero right argument raises the <a class=\"reference internal\" href=\"../library/exceptions.html#ZeroDivisionError\" title=\"ZeroDivisionError\"><tt class=\"xref py py-exc docutils literal\"><span class=\"pre\">ZeroDivisionError</span></tt></a> exception.  The\narguments may be floating point numbers, e.g., <tt class=\"docutils literal\"><span class=\"pre\">3.14%0.7</span></tt> equals <tt class=\"docutils literal\"><span class=\"pre\">0.34</span></tt>\n(since <tt class=\"docutils literal\"><span class=\"pre\">3.14</span></tt> equals <tt class=\"docutils literal\"><span class=\"pre\">4*0.7</span> <span class=\"pre\">+</span> <span class=\"pre\">0.34</span></tt>.)  The modulo operator always yields a\nresult with the same sign as its second operand (or zero); the absolute value of\nthe result is strictly smaller than the absolute value of the second operand\n<a class=\"footnote-reference\" href=\"#id16\" id=\"id8\">[1]</a>.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#binary-arithmetic-operations.section:nth-of-type(6) > p#index-51:nth-of-type(4)",
      "text": [
        "The ",
        "%",
        " (modulo) operator yields the remainder from the division of the first\nargument by the second.  The numeric arguments are first converted to a common\ntype.  A zero right argument raises the ",
        "ZeroDivisionError",
        " exception.  The\narguments may be floating point numbers, e.g., ",
        "3.14%0.7",
        " equals ",
        "0.34",
        "\n(since ",
        "3.14",
        " equals ",
        "4*0.7",
        "+",
        "0.34",
        ".)  The modulo operator always yields a\nresult with the same sign as its second operand (or zero); the absolute value of\nthe result is strictly smaller than the absolute value of the second operand\n",
        "[1]",
        "."
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 9514,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(5)",
      "html": "The floor division and modulo operators are connected by the following\nidentity: <tt class=\"docutils literal\"><span class=\"pre\">x</span> <span class=\"pre\">==</span> <span class=\"pre\">(x//y)*y</span> <span class=\"pre\">+</span> <span class=\"pre\">(x%y)</span></tt>.  Floor division and modulo are also\nconnected with the built-in function <a class=\"reference internal\" href=\"../library/functions.html#divmod\" title=\"divmod\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">divmod()</span></tt></a>: <tt class=\"docutils literal\"><span class=\"pre\">divmod(x,</span> <span class=\"pre\">y)</span> <span class=\"pre\">==</span> <span class=\"pre\">(x//y,</span>\n<span class=\"pre\">x%y)</span></tt>. <a class=\"footnote-reference\" href=\"#id17\" id=\"id9\">[2]</a>.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#binary-arithmetic-operations.section:nth-of-type(6) > p:nth-of-type(5)",
      "text": [
        "The floor division and modulo operators are connected by the following\nidentity: ",
        "x",
        "==",
        "(x//y)*y",
        "+",
        "(x%y)",
        ".  Floor division and modulo are also\nconnected with the built-in function ",
        "divmod()",
        ": ",
        "divmod(x,",
        "y)",
        "==",
        "(x//y,",
        "x%y)",
        ". ",
        "[2]",
        "."
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 9574,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(6)",
      "html": "In addition to performing the modulo operation on numbers, the <tt class=\"docutils literal\"><span class=\"pre\">%</span></tt> operator is\nalso overloaded by string objects to perform old-style string formatting (also\nknown as interpolation).  The syntax for string formatting is described in the\nPython Library Reference, section <a class=\"reference internal\" href=\"../library/stdtypes.html#old-string-formatting\"><em>printf-style String Formatting</em></a>.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#binary-arithmetic-operations.section:nth-of-type(6) > p:nth-of-type(6)",
      "text": [
        "In addition to performing the modulo operation on numbers, the ",
        "%",
        " operator is\nalso overloaded by string objects to perform old-style string formatting (also\nknown as interpolation).  The syntax for string formatting is described in the\nPython Library Reference, section ",
        "printf-style String Formatting",
        "."
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 9634,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(7)",
      "html": "The floor division operator, the modulo operator, and the <a class=\"reference internal\" href=\"../library/functions.html#divmod\" title=\"divmod\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">divmod()</span></tt></a>\nfunction are not defined for complex numbers.  Instead, convert to a floating\npoint number using the <a class=\"reference internal\" href=\"../library/functions.html#abs\" title=\"abs\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">abs()</span></tt></a> function if appropriate.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#binary-arithmetic-operations.section:nth-of-type(6) > p:nth-of-type(7)",
      "text": [
        "The floor division operator, the modulo operator, and the ",
        "divmod()",
        "\nfunction are not defined for complex numbers.  Instead, convert to a floating\npoint number using the ",
        "abs()",
        " function if appropriate."
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 9694,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-52:nth-of-type(8)",
      "html": "The <tt class=\"docutils literal\"><span class=\"pre\">+</span></tt> (addition) operator yields the sum of its arguments.  The arguments\nmust either both be numbers or both sequences of the same type.  In the former\ncase, the numbers are converted to a common type and then added together.  In\nthe latter case, the sequences are concatenated.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#binary-arithmetic-operations.section:nth-of-type(6) > p#index-52:nth-of-type(8)",
      "text": [
        "The ",
        "+",
        " (addition) operator yields the sum of its arguments.  The arguments\nmust either both be numbers or both sequences of the same type.  In the former\ncase, the numbers are converted to a common type and then added together.  In\nthe latter case, the sequences are concatenated."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 9754,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-53:nth-of-type(9)",
      "html": "The <tt class=\"docutils literal\"><span class=\"pre\">-</span></tt> (subtraction) operator yields the difference of its arguments.  The\nnumeric arguments are first converted to a common type.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#binary-arithmetic-operations.section:nth-of-type(6) > p#index-53:nth-of-type(9)",
      "text": [
        "The ",
        "-",
        " (subtraction) operator yields the difference of its arguments.  The\nnumeric arguments are first converted to a common type."
      ]
    },
    {
      "bound": {
        "height": 46,
        "left": 265,
        "top": 9792,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "26px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "7px",
        "padding-top": "7px"
      },
      "element": "h2:nth-of-type(1)",
      "html": "6.7. Shifting operations<a class=\"headerlink\" href=\"#shifting-operations\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > div > h2",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#shifting-operations.section:nth-of-type(7) > h2:nth-of-type(1)",
      "text": [
        "6.7. Shifting operations",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 9854,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-54:nth-of-type(1)",
      "html": "The shifting operations have lower priority than the arithmetic operations:",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#shifting-operations.section:nth-of-type(7) > p#index-54:nth-of-type(1)",
      "text": [
        "The shifting operations have lower priority than the arithmetic operations:"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 265,
        "top": 9892,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<strong id=\"grammar-token-shift_expr\">shift_expr</strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-a_expr\"><tt class=\"xref docutils literal\"><span class=\"pre\">a_expr</span></tt></a> | <a class=\"reference internal\" href=\"#grammar-token-shift_expr\"><tt class=\"xref docutils literal\"><span class=\"pre\">shift_expr</span></tt></a> ( \"&lt;&lt;\" | \"&gt;&gt;\" ) <a class=\"reference internal\" href=\"#grammar-token-a_expr\"><tt class=\"xref docutils literal\"><span class=\"pre\">a_expr</span></tt></a>\n",
      "path": "div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#shifting-operations.section:nth-of-type(7) > pre:nth-of-type(1)",
      "text": [
        "shift_expr",
        " ::=  ",
        "a_expr",
        " | ",
        "shift_expr",
        " ( \"<<\" | \">>\" ) ",
        "a_expr"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 9938,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "These operators accept integers as arguments.  They shift the first argument to\nthe left or right by the number of bits given by the second argument.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#shifting-operations.section:nth-of-type(7) > p:nth-of-type(2)",
      "text": [
        "These operators accept integers as arguments.  They shift the first argument to\nthe left or right by the number of bits given by the second argument."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 9976,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-55:nth-of-type(3)",
      "html": "A right shift by <em>n</em> bits is defined as division by <tt class=\"docutils literal\"><span class=\"pre\">pow(2,n)</span></tt>.  A left shift\nby <em>n</em> bits is defined as multiplication with <tt class=\"docutils literal\"><span class=\"pre\">pow(2,n)</span></tt>.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#shifting-operations.section:nth-of-type(7) > p#index-55:nth-of-type(3)",
      "text": [
        "A right shift by ",
        "n",
        " bits is defined as division by ",
        "pow(2,n)",
        ".  A left shift\nby ",
        "n",
        " bits is defined as multiplication with ",
        "pow(2,n)",
        "."
      ]
    },
    {
      "bound": {
        "height": 60,
        "left": 265,
        "top": 10014,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 238, 238)",
        "border-bottom-color": "rgb(204, 204, 204)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(204, 204, 204)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(204, 204, 204)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(204, 204, 204)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "margin-bottom": "10px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "10px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "7px",
        "padding-left": "7px",
        "padding-right": "7px",
        "padding-top": "7px"
      },
      "element": "div.admonition.note:nth-of-type(1)",
      "html": "\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">In the current implementation, the right-hand operand is required\nto be at most <a class=\"reference internal\" href=\"../library/sys.html#sys.maxsize\" title=\"sys.maxsize\"><tt class=\"xref py py-attr docutils literal\"><span class=\"pre\">sys.maxsize</span></tt></a>.  If the right-hand operand is larger than\n<a class=\"reference internal\" href=\"../library/sys.html#sys.maxsize\" title=\"sys.maxsize\"><tt class=\"xref py py-attr docutils literal\"><span class=\"pre\">sys.maxsize</span></tt></a> an <a class=\"reference internal\" href=\"../library/exceptions.html#OverflowError\" title=\"OverflowError\"><tt class=\"xref py py-exc docutils literal\"><span class=\"pre\">OverflowError</span></tt></a> exception is raised.</p>\n",
      "path": "div > div > div > div > div > div > div",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#shifting-operations.section:nth-of-type(7) > div.admonition.note:nth-of-type(1)",
      "text": [
        "Note",
        "In the current implementation, the right-hand operand is required\nto be at most ",
        "sys.maxsize",
        ".  If the right-hand operand is larger than\n",
        "sys.maxsize",
        " an ",
        "OverflowError",
        " exception is raised."
      ]
    },
    {
      "bound": {
        "height": 46,
        "left": 265,
        "top": 10084,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "26px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "7px",
        "padding-top": "7px"
      },
      "element": "h2:nth-of-type(1)",
      "html": "6.8. Binary bitwise operations<a class=\"headerlink\" href=\"#binary-bitwise-operations\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > div > h2",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#binary-bitwise-operations.section:nth-of-type(8) > h2:nth-of-type(1)",
      "text": [
        "6.8. Binary bitwise operations",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 10146,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-56:nth-of-type(1)",
      "html": "Each of the three bitwise operations has a different priority level:",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#binary-bitwise-operations.section:nth-of-type(8) > p#index-56:nth-of-type(1)",
      "text": [
        "Each of the three bitwise operations has a different priority level:"
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 265,
        "top": 10184,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<strong id=\"grammar-token-and_expr\">and_expr</strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-shift_expr\"><tt class=\"xref docutils literal\"><span class=\"pre\">shift_expr</span></tt></a> | <a class=\"reference internal\" href=\"#grammar-token-and_expr\"><tt class=\"xref docutils literal\"><span class=\"pre\">and_expr</span></tt></a> \"&amp;\" <a class=\"reference internal\" href=\"#grammar-token-shift_expr\"><tt class=\"xref docutils literal\"><span class=\"pre\">shift_expr</span></tt></a>\n<strong id=\"grammar-token-xor_expr\">xor_expr</strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-and_expr\"><tt class=\"xref docutils literal\"><span class=\"pre\">and_expr</span></tt></a> | <a class=\"reference internal\" href=\"#grammar-token-xor_expr\"><tt class=\"xref docutils literal\"><span class=\"pre\">xor_expr</span></tt></a> \"^\" <a class=\"reference internal\" href=\"#grammar-token-and_expr\"><tt class=\"xref docutils literal\"><span class=\"pre\">and_expr</span></tt></a>\n<strong id=\"grammar-token-or_expr\">or_expr </strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-xor_expr\"><tt class=\"xref docutils literal\"><span class=\"pre\">xor_expr</span></tt></a> | <a class=\"reference internal\" href=\"#grammar-token-or_expr\"><tt class=\"xref docutils literal\"><span class=\"pre\">or_expr</span></tt></a> \"|\" <a class=\"reference internal\" href=\"#grammar-token-xor_expr\"><tt class=\"xref docutils literal\"><span class=\"pre\">xor_expr</span></tt></a>\n",
      "path": "div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#binary-bitwise-operations.section:nth-of-type(8) > pre:nth-of-type(1)",
      "text": [
        "and_expr",
        " ::=  ",
        "shift_expr",
        " | ",
        "and_expr",
        " \"&\" ",
        "shift_expr",
        "xor_expr",
        " ::=  ",
        "and_expr",
        " | ",
        "xor_expr",
        " \"^\" ",
        "and_expr",
        "or_expr ",
        " ::=  ",
        "xor_expr",
        " | ",
        "or_expr",
        " \"|\" ",
        "xor_expr"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 10266,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-57:nth-of-type(2)",
      "html": "The <tt class=\"docutils literal\"><span class=\"pre\">&amp;</span></tt> operator yields the bitwise AND of its arguments, which must be\nintegers.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#binary-bitwise-operations.section:nth-of-type(8) > p#index-57:nth-of-type(2)",
      "text": [
        "The ",
        "&",
        " operator yields the bitwise AND of its arguments, which must be\nintegers."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 10304,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-58:nth-of-type(3)",
      "html": "The <tt class=\"docutils literal\"><span class=\"pre\">^</span></tt> operator yields the bitwise XOR (exclusive OR) of its arguments, which\nmust be integers.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#binary-bitwise-operations.section:nth-of-type(8) > p#index-58:nth-of-type(3)",
      "text": [
        "The ",
        "^",
        " operator yields the bitwise XOR (exclusive OR) of its arguments, which\nmust be integers."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 10342,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-59:nth-of-type(4)",
      "html": "The <tt class=\"docutils literal\"><span class=\"pre\">|</span></tt> operator yields the bitwise (inclusive) OR of its arguments, which\nmust be integers.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#binary-bitwise-operations.section:nth-of-type(8) > p#index-59:nth-of-type(4)",
      "text": [
        "The ",
        "|",
        " operator yields the bitwise (inclusive) OR of its arguments, which\nmust be integers."
      ]
    },
    {
      "bound": {
        "height": 46,
        "left": 265,
        "top": 10380,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "26px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "7px",
        "padding-top": "7px"
      },
      "element": "h2:nth-of-type(1)",
      "html": "6.9. Comparisons<a class=\"headerlink\" href=\"#not-in\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > div > h2",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#not-in.section:nth-of-type(9) > h2:nth-of-type(1)",
      "text": [
        "6.9. Comparisons",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 10442,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-61:nth-of-type(1)",
      "html": "Unlike C, all comparison operations in Python have the same priority, which is\nlower than that of any arithmetic, shifting or bitwise operation.  Also unlike\nC, expressions like <tt class=\"docutils literal\"><span class=\"pre\">a</span> <span class=\"pre\">&lt;</span> <span class=\"pre\">b</span> <span class=\"pre\">&lt;</span> <span class=\"pre\">c</span></tt> have the interpretation that is conventional\nin mathematics:",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#not-in.section:nth-of-type(9) > p#index-61:nth-of-type(1)",
      "text": [
        "Unlike C, all comparison operations in Python have the same priority, which is\nlower than that of any arithmetic, shifting or bitwise operation.  Also unlike\nC, expressions like ",
        "a",
        "<",
        "b",
        "<",
        "c",
        " have the interpretation that is conventional\nin mathematics:"
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 265,
        "top": 10502,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<strong id=\"grammar-token-comparison\">comparison   </strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-or_expr\"><tt class=\"xref docutils literal\"><span class=\"pre\">or_expr</span></tt></a> ( <a class=\"reference internal\" href=\"#grammar-token-comp_operator\"><tt class=\"xref docutils literal\"><span class=\"pre\">comp_operator</span></tt></a> <a class=\"reference internal\" href=\"#grammar-token-or_expr\"><tt class=\"xref docutils literal\"><span class=\"pre\">or_expr</span></tt></a> )*\n<strong id=\"grammar-token-comp_operator\">comp_operator</strong> ::=  \"&lt;\" | \"&gt;\" | \"==\" | \"&gt;=\" | \"&lt;=\" | \"!=\"\n                   | \"is\" [\"not\"] | [\"not\"] \"in\"\n",
      "path": "div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#not-in.section:nth-of-type(9) > pre:nth-of-type(1)",
      "text": [
        "comparison   ",
        " ::=  ",
        "or_expr",
        " ( ",
        "comp_operator",
        "or_expr",
        " )*\n",
        "comp_operator",
        " ::=  \"<\" | \">\" | \"==\" | \">=\" | \"<=\" | \"!=\"\n                   | \"is\" [\"not\"] | [\"not\"] \"in\"\n"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 10584,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "Comparisons yield boolean values: <tt class=\"xref docutils literal\"><span class=\"pre\">True</span></tt> or <tt class=\"xref docutils literal\"><span class=\"pre\">False</span></tt>.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#not-in.section:nth-of-type(9) > p:nth-of-type(2)",
      "text": [
        "Comparisons yield boolean values: ",
        "True",
        " or ",
        "False",
        "."
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 10622,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-62:nth-of-type(3)",
      "html": "Comparisons can be chained arbitrarily, e.g., <tt class=\"docutils literal\"><span class=\"pre\">x</span> <span class=\"pre\">&lt;</span> <span class=\"pre\">y</span> <span class=\"pre\">&lt;=</span> <span class=\"pre\">z</span></tt> is equivalent to\n<tt class=\"docutils literal\"><span class=\"pre\">x</span> <span class=\"pre\">&lt;</span> <span class=\"pre\">y</span> <span class=\"pre\">and</span> <span class=\"pre\">y</span> <span class=\"pre\">&lt;=</span> <span class=\"pre\">z</span></tt>, except that <tt class=\"docutils literal\"><span class=\"pre\">y</span></tt> is evaluated only once (but in both\ncases <tt class=\"docutils literal\"><span class=\"pre\">z</span></tt> is not evaluated at all when <tt class=\"docutils literal\"><span class=\"pre\">x</span> <span class=\"pre\">&lt;</span> <span class=\"pre\">y</span></tt> is found to be false).",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#not-in.section:nth-of-type(9) > p#index-62:nth-of-type(3)",
      "text": [
        "Comparisons can be chained arbitrarily, e.g., ",
        "x",
        "<",
        "y",
        "<=",
        "z",
        " is equivalent to\n",
        "x",
        "<",
        "y",
        "and",
        "y",
        "<=",
        "z",
        ", except that ",
        "y",
        " is evaluated only once (but in both\ncases ",
        "z",
        " is not evaluated at all when ",
        "x",
        "<",
        "y",
        " is found to be false)."
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 10682,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(4)",
      "html": "Formally, if <em>a</em>, <em>b</em>, <em>c</em>, ..., <em>y</em>, <em>z</em> are expressions and <em>op1</em>, <em>op2</em>, ...,\n<em>opN</em> are comparison operators, then <tt class=\"docutils literal\"><span class=\"pre\">a</span> <span class=\"pre\">op1</span> <span class=\"pre\">b</span> <span class=\"pre\">op2</span> <span class=\"pre\">c</span> <span class=\"pre\">...</span> <span class=\"pre\">y</span> <span class=\"pre\">opN</span> <span class=\"pre\">z</span></tt> is equivalent\nto <tt class=\"docutils literal\"><span class=\"pre\">a</span> <span class=\"pre\">op1</span> <span class=\"pre\">b</span> <span class=\"pre\">and</span> <span class=\"pre\">b</span> <span class=\"pre\">op2</span> <span class=\"pre\">c</span> <span class=\"pre\">and</span> <span class=\"pre\">...</span> <span class=\"pre\">y</span> <span class=\"pre\">opN</span> <span class=\"pre\">z</span></tt>, except that each expression is\nevaluated at most once.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#not-in.section:nth-of-type(9) > p:nth-of-type(4)",
      "text": [
        "Formally, if ",
        "a",
        ", ",
        "b",
        ", ",
        "c",
        ", ..., ",
        "y",
        ", ",
        "z",
        " are expressions and ",
        "op1",
        ", ",
        "op2",
        ", ...,\n",
        "opN",
        " are comparison operators, then ",
        "a",
        "op1",
        "b",
        "op2",
        "c",
        "...",
        "y",
        "opN",
        "z",
        " is equivalent\nto ",
        "a",
        "op1",
        "b",
        "and",
        "b",
        "op2",
        "c",
        "and",
        "...",
        "y",
        "opN",
        "z",
        ", except that each expression is\nevaluated at most once."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 10742,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(5)",
      "html": "Note that <tt class=\"docutils literal\"><span class=\"pre\">a</span> <span class=\"pre\">op1</span> <span class=\"pre\">b</span> <span class=\"pre\">op2</span> <span class=\"pre\">c</span></tt> doesn’t imply any kind of comparison between <em>a</em> and\n<em>c</em>, so that, e.g., <tt class=\"docutils literal\"><span class=\"pre\">x</span> <span class=\"pre\">&lt;</span> <span class=\"pre\">y</span> <span class=\"pre\">&gt;</span> <span class=\"pre\">z</span></tt> is perfectly legal (though perhaps not\npretty).",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#not-in.section:nth-of-type(9) > p:nth-of-type(5)",
      "text": [
        "Note that ",
        "a",
        "op1",
        "b",
        "op2",
        "c",
        " doesn’t imply any kind of comparison between ",
        "a",
        " and\n",
        "c",
        ", so that, e.g., ",
        "x",
        "<",
        "y",
        ">",
        "z",
        " is perfectly legal (though perhaps not\npretty)."
      ]
    },
    {
      "bound": {
        "height": 88,
        "left": 265,
        "top": 10780,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(6)",
      "html": "The operators <tt class=\"docutils literal\"><span class=\"pre\">&lt;</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">&gt;</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">==</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">&gt;=</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">&lt;=</span></tt>, and <tt class=\"docutils literal\"><span class=\"pre\">!=</span></tt> compare the\nvalues of two objects.  The objects need not have the same type. If both are\nnumbers, they are converted to a common type.  Otherwise, the <tt class=\"docutils literal\"><span class=\"pre\">==</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">!=</span></tt>\noperators <em>always</em> consider objects of different types to be unequal, while the\n<tt class=\"docutils literal\"><span class=\"pre\">&lt;</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">&gt;</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">&gt;=</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">&lt;=</span></tt> operators raise a <a class=\"reference internal\" href=\"../library/exceptions.html#TypeError\" title=\"TypeError\"><tt class=\"xref py py-exc docutils literal\"><span class=\"pre\">TypeError</span></tt></a> when\ncomparing objects of different types that do not implement these operators for\nthe given pair of types.  You can control comparison behavior of objects of\nnon-built-in types by defining rich comparison methods like <a class=\"reference internal\" href=\"datamodel.html#object.__gt__\" title=\"object.__gt__\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">__gt__()</span></tt></a>,\ndescribed in section <a class=\"reference internal\" href=\"datamodel.html#customization\"><em>Basic customization</em></a>.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#not-in.section:nth-of-type(9) > p:nth-of-type(6)",
      "text": [
        "The operators ",
        "<",
        ", ",
        ">",
        ", ",
        "==",
        ", ",
        ">=",
        ", ",
        "<=",
        ", and ",
        "!=",
        " compare the\nvalues of two objects.  The objects need not have the same type. If both are\nnumbers, they are converted to a common type.  Otherwise, the ",
        "==",
        " and ",
        "!=",
        "\noperators ",
        "always",
        " consider objects of different types to be unequal, while the\n",
        "<",
        ", ",
        ">",
        ", ",
        ">=",
        " and ",
        "<=",
        " operators raise a ",
        "TypeError",
        " when\ncomparing objects of different types that do not implement these operators for\nthe given pair of types.  You can control comparison behavior of objects of\nnon-built-in types by defining rich comparison methods like ",
        "__gt__()",
        ",\ndescribed in section ",
        "Basic customization",
        "."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 10884,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(7)",
      "html": "Comparison of objects of the same type depends on the type:",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#not-in.section:nth-of-type(9) > p:nth-of-type(7)",
      "text": [
        "Comparison of objects of the same type depends on the type:"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 305,
        "top": 10922,
        "width": 1279
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p.first:nth-of-type(1)",
      "html": "Numbers are compared arithmetically.",
      "path": "div > div > div > div > div > div > ul > li > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#not-in.section:nth-of-type(9) > ul:nth-of-type(1) > li:nth-of-type(1) > p.first:nth-of-type(1)",
      "text": [
        "Numbers are compared arithmetically."
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 305,
        "top": 10960,
        "width": 1279
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p.first:nth-of-type(1)",
      "html": "The values <tt class=\"xref py py-const docutils literal\"><span class=\"pre\">float('NaN')</span></tt> and <tt class=\"xref py py-const docutils literal\"><span class=\"pre\">Decimal('NaN')</span></tt> are special.\nThe are identical to themselves, <tt class=\"docutils literal\"><span class=\"pre\">x</span> <span class=\"pre\">is</span> <span class=\"pre\">x</span></tt> but are not equal to themselves,\n<tt class=\"docutils literal\"><span class=\"pre\">x</span> <span class=\"pre\">!=</span> <span class=\"pre\">x</span></tt>.  Additionally, comparing any value to a not-a-number value\nwill return <tt class=\"xref docutils literal\"><span class=\"pre\">False</span></tt>.  For example, both <tt class=\"docutils literal\"><span class=\"pre\">3</span> <span class=\"pre\">&lt;</span> <span class=\"pre\">float('NaN')</span></tt> and\n<tt class=\"docutils literal\"><span class=\"pre\">float('NaN')</span> <span class=\"pre\">&lt;</span> <span class=\"pre\">3</span></tt> will return <tt class=\"xref docutils literal\"><span class=\"pre\">False</span></tt>.",
      "path": "div > div > div > div > div > div > ul > li > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#not-in.section:nth-of-type(9) > ul:nth-of-type(1) > li:nth-of-type(2) > p.first:nth-of-type(1)",
      "text": [
        "The values ",
        "float('NaN')",
        " and ",
        "Decimal('NaN')",
        " are special.\nThe are identical to themselves, ",
        "x",
        "is",
        "x",
        " but are not equal to themselves,\n",
        "x",
        "!=",
        "x",
        ".  Additionally, comparing any value to a not-a-number value\nwill return ",
        "False",
        ".  For example, both ",
        "3",
        "<",
        "float('NaN')",
        " and\n",
        "float('NaN')",
        "<",
        "3",
        " will return ",
        "False",
        "."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 305,
        "top": 11020,
        "width": 1279
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p.first:nth-of-type(1)",
      "html": "Bytes objects are compared lexicographically using the numeric values of their\nelements.",
      "path": "div > div > div > div > div > div > ul > li > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#not-in.section:nth-of-type(9) > ul:nth-of-type(1) > li:nth-of-type(3) > p.first:nth-of-type(1)",
      "text": [
        "Bytes objects are compared lexicographically using the numeric values of their\nelements."
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 305,
        "top": 11058,
        "width": 1279
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p.first:nth-of-type(1)",
      "html": "Strings are compared lexicographically using the numeric equivalents (the\nresult of the built-in function <a class=\"reference internal\" href=\"../library/functions.html#ord\" title=\"ord\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">ord()</span></tt></a>) of their characters. <a class=\"footnote-reference\" href=\"#id18\" id=\"id11\">[3]</a> String\nand bytes object can’t be compared!",
      "path": "div > div > div > div > div > div > ul > li > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#not-in.section:nth-of-type(9) > ul:nth-of-type(1) > li:nth-of-type(4) > p.first:nth-of-type(1)",
      "text": [
        "Strings are compared lexicographically using the numeric equivalents (the\nresult of the built-in function ",
        "ord()",
        ") of their characters. ",
        "[3]",
        " String\nand bytes object can’t be compared!"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 305,
        "top": 11118,
        "width": 1279
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p.first:nth-of-type(1)",
      "html": "Tuples and lists are compared lexicographically using comparison of\ncorresponding elements.  This means that to compare equal, each element must\ncompare equal and the two sequences must be of the same type and have the same\nlength.",
      "path": "div > div > div > div > div > div > ul > li > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#not-in.section:nth-of-type(9) > ul:nth-of-type(1) > li:nth-of-type(5) > p.first:nth-of-type(1)",
      "text": [
        "Tuples and lists are compared lexicographically using comparison of\ncorresponding elements.  This means that to compare equal, each element must\ncompare equal and the two sequences must be of the same type and have the same\nlength."
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 305,
        "top": 11178,
        "width": 1279
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "If not equal, the sequences are ordered the same as their first differing\nelements.  For example, <tt class=\"docutils literal\"><span class=\"pre\">[1,2,x]</span> <span class=\"pre\">&lt;=</span> <span class=\"pre\">[1,2,y]</span></tt> has the same value as\n<tt class=\"docutils literal\"><span class=\"pre\">x</span> <span class=\"pre\">&lt;=</span> <span class=\"pre\">y</span></tt>.  If the corresponding element does not exist, the shorter\nsequence is ordered first (for example, <tt class=\"docutils literal\"><span class=\"pre\">[1,2]</span> <span class=\"pre\">&lt;</span> <span class=\"pre\">[1,2,3]</span></tt>).",
      "path": "div > div > div > div > div > div > ul > li > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#not-in.section:nth-of-type(9) > ul:nth-of-type(1) > li:nth-of-type(5) > p:nth-of-type(2)",
      "text": [
        "If not equal, the sequences are ordered the same as their first differing\nelements.  For example, ",
        "[1,2,x]",
        "<=",
        "[1,2,y]",
        " has the same value as\n",
        "x",
        "<=",
        "y",
        ".  If the corresponding element does not exist, the shorter\nsequence is ordered first (for example, ",
        "[1,2]",
        "<",
        "[1,2,3]",
        ")."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 305,
        "top": 11238,
        "width": 1279
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p.first:nth-of-type(1)",
      "html": "Mappings (dictionaries) compare equal if and only if they have the same\n<tt class=\"docutils literal\"><span class=\"pre\">(key,</span> <span class=\"pre\">value)</span></tt> pairs. Order comparisons <tt class=\"docutils literal\"><span class=\"pre\">('&lt;',</span> <span class=\"pre\">'&lt;=',</span> <span class=\"pre\">'&gt;=',</span> <span class=\"pre\">'&gt;')</span></tt>\nraise <a class=\"reference internal\" href=\"../library/exceptions.html#TypeError\" title=\"TypeError\"><tt class=\"xref py py-exc docutils literal\"><span class=\"pre\">TypeError</span></tt></a>.",
      "path": "div > div > div > div > div > div > ul > li > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#not-in.section:nth-of-type(9) > ul:nth-of-type(1) > li:nth-of-type(6) > p.first:nth-of-type(1)",
      "text": [
        "Mappings (dictionaries) compare equal if and only if they have the same\n",
        "(key,",
        "value)",
        " pairs. Order comparisons ",
        "('<',",
        "'<=',",
        "'>=',",
        "'>')",
        "\nraise ",
        "TypeError",
        "."
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 305,
        "top": 11276,
        "width": 1279
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p.first:nth-of-type(1)",
      "html": "Sets and frozensets define comparison operators to mean subset and superset\ntests.  Those relations do not define total orderings (the two sets <tt class=\"docutils literal\"><span class=\"pre\">{1,2}</span></tt>\nand {2,3} are not equal, nor subsets of one another, nor supersets of one\nanother).  Accordingly, sets are not appropriate arguments for functions\nwhich depend on total ordering.  For example, <a class=\"reference internal\" href=\"../library/functions.html#min\" title=\"min\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">min()</span></tt></a>, <a class=\"reference internal\" href=\"../library/functions.html#max\" title=\"max\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">max()</span></tt></a>, and\n<a class=\"reference internal\" href=\"../library/functions.html#sorted\" title=\"sorted\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">sorted()</span></tt></a> produce undefined results given a list of sets as inputs.",
      "path": "div > div > div > div > div > div > ul > li > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#not-in.section:nth-of-type(9) > ul:nth-of-type(1) > li:nth-of-type(7) > p.first:nth-of-type(1)",
      "text": [
        "Sets and frozensets define comparison operators to mean subset and superset\ntests.  Those relations do not define total orderings (the two sets ",
        "{1,2}",
        "\nand {2,3} are not equal, nor subsets of one another, nor supersets of one\nanother).  Accordingly, sets are not appropriate arguments for functions\nwhich depend on total ordering.  For example, ",
        "min()",
        ", ",
        "max()",
        ", and\n",
        "sorted()",
        " produce undefined results given a list of sets as inputs."
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 305,
        "top": 11358,
        "width": 1279
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p.first:nth-of-type(1)",
      "html": "Most other objects of built-in types compare unequal unless they are the same\nobject; the choice whether one object is considered smaller or larger than\nanother one is made arbitrarily but consistently within one execution of a\nprogram.",
      "path": "div > div > div > div > div > div > ul > li > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#not-in.section:nth-of-type(9) > ul:nth-of-type(1) > li:nth-of-type(8) > p.first:nth-of-type(1)",
      "text": [
        "Most other objects of built-in types compare unequal unless they are the same\nobject; the choice whether one object is considered smaller or larger than\nanother one is made arbitrarily but consistently within one execution of a\nprogram."
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 11418,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(8)",
      "html": "Comparison of objects of the differing types depends on whether either of the\ntypes provide explicit support for the comparison.  Most numeric types can be\ncompared with one another.  When cross-type comparison is not supported, the\ncomparison method returns <tt class=\"docutils literal\"><span class=\"pre\">NotImplemented</span></tt>.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#not-in.section:nth-of-type(9) > p:nth-of-type(8)",
      "text": [
        "Comparison of objects of the differing types depends on whether either of the\ntypes provide explicit support for the comparison.  Most numeric types can be\ncompared with one another.  When cross-type comparison is not supported, the\ncomparison method returns ",
        "NotImplemented",
        "."
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 265,
        "top": 11478,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#membership-test-details:nth-of-type(9)",
      "html": "The operators <a class=\"reference internal\" href=\"#in\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">in</span></tt></a> and <a class=\"reference internal\" href=\"#not-in\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">not</span> <span class=\"pre\">in</span></tt></a> test for membership.  <tt class=\"docutils literal\"><span class=\"pre\">x</span> <span class=\"pre\">in</span>\n<span class=\"pre\">s</span></tt> evaluates to true if <em>x</em> is a member of <em>s</em>, and false otherwise.  <tt class=\"docutils literal\"><span class=\"pre\">x</span> <span class=\"pre\">not</span>\n<span class=\"pre\">in</span> <span class=\"pre\">s</span></tt> returns the negation of <tt class=\"docutils literal\"><span class=\"pre\">x</span> <span class=\"pre\">in</span> <span class=\"pre\">s</span></tt>.  All built-in sequences and set types\nsupport this as well as dictionary, for which <a class=\"reference internal\" href=\"#in\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">in</span></tt></a> tests whether a the\ndictionary has a given key. For container types such as list, tuple, set,\nfrozenset, dict, or collections.deque, the expression <tt class=\"docutils literal\"><span class=\"pre\">x</span> <span class=\"pre\">in</span> <span class=\"pre\">y</span></tt> is equivalent\nto <tt class=\"docutils literal\"><span class=\"pre\">any(x</span> <span class=\"pre\">is</span> <span class=\"pre\">e</span> <span class=\"pre\">or</span> <span class=\"pre\">x</span> <span class=\"pre\">==</span> <span class=\"pre\">e</span> <span class=\"pre\">for</span> <span class=\"pre\">e</span> <span class=\"pre\">in</span> <span class=\"pre\">y)</span></tt>.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#not-in.section:nth-of-type(9) > p#membership-test-details:nth-of-type(9)",
      "text": [
        "The operators ",
        "in",
        " and ",
        "not",
        "in",
        " test for membership.  ",
        "x",
        "in",
        "s",
        " evaluates to true if ",
        "x",
        " is a member of ",
        "s",
        ", and false otherwise.  ",
        "x",
        "not",
        "in",
        "s",
        " returns the negation of ",
        "x",
        "in",
        "s",
        ".  All built-in sequences and set types\nsupport this as well as dictionary, for which ",
        "in",
        " tests whether a the\ndictionary has a given key. For container types such as list, tuple, set,\nfrozenset, dict, or collections.deque, the expression ",
        "x",
        "in",
        "y",
        " is equivalent\nto ",
        "any(x",
        "is",
        "e",
        "or",
        "x",
        "==",
        "e",
        "for",
        "e",
        "in",
        "y)",
        "."
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 11560,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(10)",
      "html": "For the string and bytes types, <tt class=\"docutils literal\"><span class=\"pre\">x</span> <span class=\"pre\">in</span> <span class=\"pre\">y</span></tt> is true if and only if <em>x</em> is a\nsubstring of <em>y</em>.  An equivalent test is <tt class=\"docutils literal\"><span class=\"pre\">y.find(x)</span> <span class=\"pre\">!=</span> <span class=\"pre\">-1</span></tt>.  Empty strings are\nalways considered to be a substring of any other string, so <tt class=\"docutils literal\"><span class=\"pre\">\"\"</span> <span class=\"pre\">in</span> <span class=\"pre\">\"abc\"</span></tt> will\nreturn <tt class=\"xref docutils literal\"><span class=\"pre\">True</span></tt>.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#not-in.section:nth-of-type(9) > p:nth-of-type(10)",
      "text": [
        "For the string and bytes types, ",
        "x",
        "in",
        "y",
        " is true if and only if ",
        "x",
        " is a\nsubstring of ",
        "y",
        ".  An equivalent test is ",
        "y.find(x)",
        "!=",
        "-1",
        ".  Empty strings are\nalways considered to be a substring of any other string, so ",
        "\"\"",
        "in",
        "\"abc\"",
        " will\nreturn ",
        "True",
        "."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 11620,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(11)",
      "html": "For user-defined classes which define the <a class=\"reference internal\" href=\"datamodel.html#object.__contains__\" title=\"object.__contains__\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">__contains__()</span></tt></a> method, <tt class=\"docutils literal\"><span class=\"pre\">x</span> <span class=\"pre\">in</span>\n<span class=\"pre\">y</span></tt> is true if and only if <tt class=\"docutils literal\"><span class=\"pre\">y.__contains__(x)</span></tt> is true.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#not-in.section:nth-of-type(9) > p:nth-of-type(11)",
      "text": [
        "For user-defined classes which define the ",
        "__contains__()",
        " method, ",
        "x",
        "in",
        "y",
        " is true if and only if ",
        "y.__contains__(x)",
        " is true."
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 11658,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(12)",
      "html": "For user-defined classes which do not define <a class=\"reference internal\" href=\"datamodel.html#object.__contains__\" title=\"object.__contains__\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">__contains__()</span></tt></a> but do define\n<a class=\"reference internal\" href=\"datamodel.html#object.__iter__\" title=\"object.__iter__\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">__iter__()</span></tt></a>, <tt class=\"docutils literal\"><span class=\"pre\">x</span> <span class=\"pre\">in</span> <span class=\"pre\">y</span></tt> is true if some value <tt class=\"docutils literal\"><span class=\"pre\">z</span></tt> with <tt class=\"docutils literal\"><span class=\"pre\">x</span> <span class=\"pre\">==</span> <span class=\"pre\">z</span></tt> is\nproduced while iterating over <tt class=\"docutils literal\"><span class=\"pre\">y</span></tt>.  If an exception is raised during the\niteration, it is as if <a class=\"reference internal\" href=\"#in\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">in</span></tt></a> raised that exception.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#not-in.section:nth-of-type(9) > p:nth-of-type(12)",
      "text": [
        "For user-defined classes which do not define ",
        "__contains__()",
        " but do define\n",
        "__iter__()",
        ", ",
        "x",
        "in",
        "y",
        " is true if some value ",
        "z",
        " with ",
        "x",
        "==",
        "z",
        " is\nproduced while iterating over ",
        "y",
        ".  If an exception is raised during the\niteration, it is as if ",
        "in",
        " raised that exception."
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 11718,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(13)",
      "html": "Lastly, the old-style iteration protocol is tried: if a class defines\n<a class=\"reference internal\" href=\"datamodel.html#object.__getitem__\" title=\"object.__getitem__\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">__getitem__()</span></tt></a>, <tt class=\"docutils literal\"><span class=\"pre\">x</span> <span class=\"pre\">in</span> <span class=\"pre\">y</span></tt> is true if and only if there is a non-negative\ninteger index <em>i</em> such that <tt class=\"docutils literal\"><span class=\"pre\">x</span> <span class=\"pre\">==</span> <span class=\"pre\">y[i]</span></tt>, and all lower integer indices do not\nraise <a class=\"reference internal\" href=\"../library/exceptions.html#IndexError\" title=\"IndexError\"><tt class=\"xref py py-exc docutils literal\"><span class=\"pre\">IndexError</span></tt></a> exception.  (If any other exception is raised, it is as\nif <a class=\"reference internal\" href=\"#in\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">in</span></tt></a> raised that exception).",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#not-in.section:nth-of-type(9) > p:nth-of-type(13)",
      "text": [
        "Lastly, the old-style iteration protocol is tried: if a class defines\n",
        "__getitem__()",
        ", ",
        "x",
        "in",
        "y",
        " is true if and only if there is a non-negative\ninteger index ",
        "i",
        " such that ",
        "x",
        "==",
        "y[i]",
        ", and all lower integer indices do not\nraise ",
        "IndexError",
        " exception.  (If any other exception is raised, it is as\nif ",
        "in",
        " raised that exception)."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 11778,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-63:nth-of-type(14)",
      "html": "The operator <a class=\"reference internal\" href=\"#not-in\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">not</span> <span class=\"pre\">in</span></tt></a> is defined to have the inverse true value of\n<a class=\"reference internal\" href=\"#in\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">in</span></tt></a>.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#not-in.section:nth-of-type(9) > p#index-63:nth-of-type(14)",
      "text": [
        "The operator ",
        "not",
        "in",
        " is defined to have the inverse true value of\n",
        "in",
        "."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 11816,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-64:nth-of-type(15)",
      "html": "The operators <a class=\"reference internal\" href=\"#is\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">is</span></tt></a> and <a class=\"reference internal\" href=\"#is-not\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">is</span> <span class=\"pre\">not</span></tt></a> test for object identity: <tt class=\"docutils literal\"><span class=\"pre\">x</span>\n<span class=\"pre\">is</span> <span class=\"pre\">y</span></tt> is true if and only if <em>x</em> and <em>y</em> are the same object.  <tt class=\"docutils literal\"><span class=\"pre\">x</span> <span class=\"pre\">is</span> <span class=\"pre\">not</span> <span class=\"pre\">y</span></tt>\nyields the inverse truth value. <a class=\"footnote-reference\" href=\"#id19\" id=\"id12\">[4]</a>",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#not-in.section:nth-of-type(9) > p#index-64:nth-of-type(15)",
      "text": [
        "The operators ",
        "is",
        " and ",
        "is",
        "not",
        " test for object identity: ",
        "x",
        "is",
        "y",
        " is true if and only if ",
        "x",
        " and ",
        "y",
        " are the same object.  ",
        "x",
        "is",
        "not",
        "y",
        "\nyields the inverse truth value. ",
        "[4]"
      ]
    },
    {
      "bound": {
        "height": 46,
        "left": 265,
        "top": 11854,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "26px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "7px",
        "padding-top": "7px"
      },
      "element": "h2:nth-of-type(1)",
      "html": "6.10. Boolean operations<a class=\"headerlink\" href=\"#boolean-operations\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > div > h2",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#boolean-operations.section:nth-of-type(10) > h2:nth-of-type(1)",
      "text": [
        "6.10. Boolean operations",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 265,
        "top": 11915,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre#index-65:nth-of-type(1)",
      "html": "<strong id=\"grammar-token-or_test\">or_test </strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-and_test\"><tt class=\"xref docutils literal\"><span class=\"pre\">and_test</span></tt></a> | <a class=\"reference internal\" href=\"#grammar-token-or_test\"><tt class=\"xref docutils literal\"><span class=\"pre\">or_test</span></tt></a> \"or\" <a class=\"reference internal\" href=\"#grammar-token-and_test\"><tt class=\"xref docutils literal\"><span class=\"pre\">and_test</span></tt></a>\n<strong id=\"grammar-token-and_test\">and_test</strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-not_test\"><tt class=\"xref docutils literal\"><span class=\"pre\">not_test</span></tt></a> | <a class=\"reference internal\" href=\"#grammar-token-and_test\"><tt class=\"xref docutils literal\"><span class=\"pre\">and_test</span></tt></a> \"and\" <a class=\"reference internal\" href=\"#grammar-token-not_test\"><tt class=\"xref docutils literal\"><span class=\"pre\">not_test</span></tt></a>\n<strong id=\"grammar-token-not_test\">not_test</strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-comparison\"><tt class=\"xref docutils literal\"><span class=\"pre\">comparison</span></tt></a> | \"not\" <a class=\"reference internal\" href=\"#grammar-token-not_test\"><tt class=\"xref docutils literal\"><span class=\"pre\">not_test</span></tt></a>\n",
      "path": "div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#boolean-operations.section:nth-of-type(10) > pre#index-65:nth-of-type(1)",
      "text": [
        "or_test ",
        " ::=  ",
        "and_test",
        " | ",
        "or_test",
        " \"or\" ",
        "and_test",
        "and_test",
        " ::=  ",
        "not_test",
        " | ",
        "and_test",
        " \"and\" ",
        "not_test",
        "not_test",
        " ::=  ",
        "comparison",
        " | \"not\" ",
        "not_test"
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 265,
        "top": 11997,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "In the context of Boolean operations, and also when expressions are used by\ncontrol flow statements, the following values are interpreted as false:\n<tt class=\"xref docutils literal\"><span class=\"pre\">False</span></tt>, <tt class=\"xref docutils literal\"><span class=\"pre\">None</span></tt>, numeric zero of all types, and empty strings and containers\n(including strings, tuples, lists, dictionaries, sets and frozensets).  All\nother values are interpreted as true.  User-defined objects can customize their\ntruth value by providing a <a class=\"reference internal\" href=\"datamodel.html#object.__bool__\" title=\"object.__bool__\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">__bool__()</span></tt></a> method.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#boolean-operations.section:nth-of-type(10) > p:nth-of-type(1)",
      "text": [
        "In the context of Boolean operations, and also when expressions are used by\ncontrol flow statements, the following values are interpreted as false:\n",
        "False",
        ", ",
        "None",
        ", numeric zero of all types, and empty strings and containers\n(including strings, tuples, lists, dictionaries, sets and frozensets).  All\nother values are interpreted as true.  User-defined objects can customize their\ntruth value by providing a ",
        "__bool__()",
        " method."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 12079,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-66:nth-of-type(2)",
      "html": "The operator <a class=\"reference internal\" href=\"#not\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">not</span></tt></a> yields <tt class=\"xref docutils literal\"><span class=\"pre\">True</span></tt> if its argument is false, <tt class=\"xref docutils literal\"><span class=\"pre\">False</span></tt>\notherwise.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#boolean-operations.section:nth-of-type(10) > p#index-66:nth-of-type(2)",
      "text": [
        "The operator ",
        "not",
        " yields ",
        "True",
        " if its argument is false, ",
        "False",
        "\notherwise."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 12117,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-67:nth-of-type(3)",
      "html": "The expression <tt class=\"docutils literal\"><span class=\"pre\">x</span> <span class=\"pre\">and</span> <span class=\"pre\">y</span></tt> first evaluates <em>x</em>; if <em>x</em> is false, its value is\nreturned; otherwise, <em>y</em> is evaluated and the resulting value is returned.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#boolean-operations.section:nth-of-type(10) > p#index-67:nth-of-type(3)",
      "text": [
        "The expression ",
        "x",
        "and",
        "y",
        " first evaluates ",
        "x",
        "; if ",
        "x",
        " is false, its value is\nreturned; otherwise, ",
        "y",
        " is evaluated and the resulting value is returned."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 12155,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-68:nth-of-type(4)",
      "html": "The expression <tt class=\"docutils literal\"><span class=\"pre\">x</span> <span class=\"pre\">or</span> <span class=\"pre\">y</span></tt> first evaluates <em>x</em>; if <em>x</em> is true, its value is\nreturned; otherwise, <em>y</em> is evaluated and the resulting value is returned.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#boolean-operations.section:nth-of-type(10) > p#index-68:nth-of-type(4)",
      "text": [
        "The expression ",
        "x",
        "or",
        "y",
        " first evaluates ",
        "x",
        "; if ",
        "x",
        " is true, its value is\nreturned; otherwise, ",
        "y",
        " is evaluated and the resulting value is returned."
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 265,
        "top": 12193,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(5)",
      "html": "(Note that neither <a class=\"reference internal\" href=\"#and\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">and</span></tt></a> nor <a class=\"reference internal\" href=\"#or\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">or</span></tt></a> restrict the value and type\nthey return to <tt class=\"xref docutils literal\"><span class=\"pre\">False</span></tt> and <tt class=\"xref docutils literal\"><span class=\"pre\">True</span></tt>, but rather return the last evaluated\nargument.  This is sometimes useful, e.g., if <tt class=\"docutils literal\"><span class=\"pre\">s</span></tt> is a string that should be\nreplaced by a default value if it is empty, the expression <tt class=\"docutils literal\"><span class=\"pre\">s</span> <span class=\"pre\">or</span> <span class=\"pre\">'foo'</span></tt> yields\nthe desired value.  Because <a class=\"reference internal\" href=\"#not\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">not</span></tt></a> has to invent a value anyway, it does\nnot bother to return a value of the same type as its argument, so e.g., <tt class=\"docutils literal\"><span class=\"pre\">not</span>\n<span class=\"pre\">'foo'</span></tt> yields <tt class=\"xref docutils literal\"><span class=\"pre\">False</span></tt>, not <tt class=\"docutils literal\"><span class=\"pre\">''</span></tt>.)",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#boolean-operations.section:nth-of-type(10) > p:nth-of-type(5)",
      "text": [
        "(Note that neither ",
        "and",
        " nor ",
        "or",
        " restrict the value and type\nthey return to ",
        "False",
        " and ",
        "True",
        ", but rather return the last evaluated\nargument.  This is sometimes useful, e.g., if ",
        "s",
        " is a string that should be\nreplaced by a default value if it is empty, the expression ",
        "s",
        "or",
        "'foo'",
        " yields\nthe desired value.  Because ",
        "not",
        " has to invent a value anyway, it does\nnot bother to return a value of the same type as its argument, so e.g., ",
        "not",
        "'foo'",
        " yields ",
        "False",
        ", not ",
        "''",
        ".)"
      ]
    },
    {
      "bound": {
        "height": 46,
        "left": 265,
        "top": 12275,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "26px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "7px",
        "padding-top": "7px"
      },
      "element": "h2:nth-of-type(1)",
      "html": "6.11. Conditional expressions<a class=\"headerlink\" href=\"#conditional-expressions\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > div > h2",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#conditional-expressions.section:nth-of-type(11) > h2:nth-of-type(1)",
      "text": [
        "6.11. Conditional expressions",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 265,
        "top": 12336,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre#index-69:nth-of-type(1)",
      "html": "<strong id=\"grammar-token-conditional_expression\">conditional_expression</strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-or_test\"><tt class=\"xref docutils literal\"><span class=\"pre\">or_test</span></tt></a> [\"if\" <a class=\"reference internal\" href=\"#grammar-token-or_test\"><tt class=\"xref docutils literal\"><span class=\"pre\">or_test</span></tt></a> \"else\" <a class=\"reference internal\" href=\"#grammar-token-expression\"><tt class=\"xref docutils literal\"><span class=\"pre\">expression</span></tt></a>]\n<strong id=\"grammar-token-expression\">expression            </strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-conditional_expression\"><tt class=\"xref docutils literal\"><span class=\"pre\">conditional_expression</span></tt></a> | <a class=\"reference internal\" href=\"#grammar-token-lambda_form\"><tt class=\"xref docutils literal\"><span class=\"pre\">lambda_form</span></tt></a>\n<strong id=\"grammar-token-expression_nocond\">expression_nocond     </strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-or_test\"><tt class=\"xref docutils literal\"><span class=\"pre\">or_test</span></tt></a> | <a class=\"reference internal\" href=\"#grammar-token-lambda_form_nocond\"><tt class=\"xref docutils literal\"><span class=\"pre\">lambda_form_nocond</span></tt></a>\n",
      "path": "div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#conditional-expressions.section:nth-of-type(11) > pre#index-69:nth-of-type(1)",
      "text": [
        "conditional_expression",
        " ::=  ",
        "or_test",
        " [\"if\" ",
        "or_test",
        " \"else\" ",
        "expression",
        "]\n",
        "expression            ",
        " ::=  ",
        "conditional_expression",
        " | ",
        "lambda_form",
        "expression_nocond     ",
        " ::=  ",
        "or_test",
        " | ",
        "lambda_form_nocond"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 12418,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "Conditional expressions (sometimes called a “ternary operator”) have the lowest\npriority of all Python operations.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#conditional-expressions.section:nth-of-type(11) > p:nth-of-type(1)",
      "text": [
        "Conditional expressions (sometimes called a “ternary operator”) have the lowest\npriority of all Python operations."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 12456,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "The expression <tt class=\"docutils literal\"><span class=\"pre\">x</span> <span class=\"pre\">if</span> <span class=\"pre\">C</span> <span class=\"pre\">else</span> <span class=\"pre\">y</span></tt> first evaluates the condition, <em>C</em> (<em>not</em> <em>x</em>);\nif <em>C</em> is true, <em>x</em> is evaluated and its value is returned; otherwise, <em>y</em> is\nevaluated and its value is returned.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#conditional-expressions.section:nth-of-type(11) > p:nth-of-type(2)",
      "text": [
        "The expression ",
        "x",
        "if",
        "C",
        "else",
        "y",
        " first evaluates the condition, ",
        "C",
        " (",
        "not",
        "x",
        ");\nif ",
        "C",
        " is true, ",
        "x",
        " is evaluated and its value is returned; otherwise, ",
        "y",
        " is\nevaluated and its value is returned."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 12494,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(3)",
      "html": "See <span class=\"target\" id=\"index-70\"></span><a class=\"pep reference external\" href=\"http://www.python.org/dev/peps/pep-0308\"><strong>PEP 308</strong></a> for more details about conditional expressions.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#conditional-expressions.section:nth-of-type(11) > p:nth-of-type(3)",
      "text": [
        "See ",
        "PEP 308",
        " for more details about conditional expressions."
      ]
    },
    {
      "bound": {
        "height": 46,
        "left": 265,
        "top": 12532,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "26px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "7px",
        "padding-top": "7px"
      },
      "element": "h2:nth-of-type(1)",
      "html": "6.12. Lambdas<a class=\"headerlink\" href=\"#lambda\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > div > h2",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#lambda.section:nth-of-type(12) > h2:nth-of-type(1)",
      "text": [
        "6.12. Lambdas",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 48,
        "left": 265,
        "top": 12593,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre#index-71:nth-of-type(1)",
      "html": "<strong id=\"grammar-token-lambda_form\">lambda_form       </strong> ::=  \"lambda\" [<a class=\"reference internal\" href=\"compound_stmts.html#grammar-token-parameter_list\"><tt class=\"xref docutils literal\"><span class=\"pre\">parameter_list</span></tt></a>]: <a class=\"reference internal\" href=\"#grammar-token-expression\"><tt class=\"xref docutils literal\"><span class=\"pre\">expression</span></tt></a>\n<strong id=\"grammar-token-lambda_form_nocond\">lambda_form_nocond</strong> ::=  \"lambda\" [<a class=\"reference internal\" href=\"compound_stmts.html#grammar-token-parameter_list\"><tt class=\"xref docutils literal\"><span class=\"pre\">parameter_list</span></tt></a>]: <a class=\"reference internal\" href=\"#grammar-token-expression_nocond\"><tt class=\"xref docutils literal\"><span class=\"pre\">expression_nocond</span></tt></a>\n",
      "path": "div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#lambda.section:nth-of-type(12) > pre#index-71:nth-of-type(1)",
      "text": [
        "lambda_form       ",
        " ::=  \"lambda\" [",
        "parameter_list",
        "]: ",
        "expression",
        "lambda_form_nocond",
        " ::=  \"lambda\" [",
        "parameter_list",
        "]: ",
        "expression_nocond"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 12657,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "Lambda forms (lambda expressions) have the same syntactic position as\nexpressions.  They are a shorthand to create anonymous functions; the expression\n<tt class=\"docutils literal\"><span class=\"pre\">lambda</span> <span class=\"pre\">arguments:</span> <span class=\"pre\">expression</span></tt> yields a function object.  The unnamed object\nbehaves like a function object defined with",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#lambda.section:nth-of-type(12) > p:nth-of-type(1)",
      "text": [
        "Lambda forms (lambda expressions) have the same syntactic position as\nexpressions.  They are a shorthand to create anonymous functions; the expression\n",
        "lambda",
        "arguments:",
        "expression",
        " yields a function object.  The unnamed object\nbehaves like a function object defined with"
      ]
    },
    {
      "bound": {
        "height": 48,
        "left": 265,
        "top": 12717,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "def &lt;lambda&gt;(arguments):\n    return expression",
      "path": "div > div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#lambda.section:nth-of-type(12) > div.highlight-python3:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        "def <lambda>(arguments):\n    return expression"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 12781,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "See section <a class=\"reference internal\" href=\"compound_stmts.html#function\"><em>Function definitions</em></a> for the syntax of parameter lists.  Note that\nfunctions created with lambda forms cannot contain statements or annotations.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#lambda.section:nth-of-type(12) > p:nth-of-type(2)",
      "text": [
        "See section ",
        "Function definitions",
        " for the syntax of parameter lists.  Note that\nfunctions created with lambda forms cannot contain statements or annotations."
      ]
    },
    {
      "bound": {
        "height": 46,
        "left": 265,
        "top": 12819,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "26px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "7px",
        "padding-top": "7px"
      },
      "element": "h2:nth-of-type(1)",
      "html": "6.13. Expression lists<a class=\"headerlink\" href=\"#expression-lists\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > div > h2",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#expression-lists.section:nth-of-type(13) > h2:nth-of-type(1)",
      "text": [
        "6.13. Expression lists",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 265,
        "top": 12880,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre#index-72:nth-of-type(1)",
      "html": "<strong id=\"grammar-token-expression_list\">expression_list</strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-expression\"><tt class=\"xref docutils literal\"><span class=\"pre\">expression</span></tt></a> ( \",\" <a class=\"reference internal\" href=\"#grammar-token-expression\"><tt class=\"xref docutils literal\"><span class=\"pre\">expression</span></tt></a> )* [\",\"]\n",
      "path": "div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#expression-lists.section:nth-of-type(13) > pre#index-72:nth-of-type(1)",
      "text": [
        "expression_list",
        " ::=  ",
        "expression",
        " ( \",\" ",
        "expression",
        " )* [\",\"]\n"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 12926,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-73:nth-of-type(1)",
      "html": "An expression list containing at least one comma yields a tuple.  The length of\nthe tuple is the number of expressions in the list.  The expressions are\nevaluated from left to right.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#expression-lists.section:nth-of-type(13) > p#index-73:nth-of-type(1)",
      "text": [
        "An expression list containing at least one comma yields a tuple.  The length of\nthe tuple is the number of expressions in the list.  The expressions are\nevaluated from left to right."
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 12986,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-74:nth-of-type(2)",
      "html": "The trailing comma is required only to create a single tuple (a.k.a. a\n<em>singleton</em>); it is optional in all other cases.  A single expression without a\ntrailing comma doesn’t create a tuple, but rather yields the value of that\nexpression. (To create an empty tuple, use an empty pair of parentheses:\n<tt class=\"docutils literal\"><span class=\"pre\">()</span></tt>.)",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#expression-lists.section:nth-of-type(13) > p#index-74:nth-of-type(2)",
      "text": [
        "The trailing comma is required only to create a single tuple (a.k.a. a\n",
        "singleton",
        "); it is optional in all other cases.  A single expression without a\ntrailing comma doesn’t create a tuple, but rather yields the value of that\nexpression. (To create an empty tuple, use an empty pair of parentheses:\n",
        "()",
        ".)"
      ]
    },
    {
      "bound": {
        "height": 46,
        "left": 265,
        "top": 13046,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "26px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "7px",
        "padding-top": "7px"
      },
      "element": "h2:nth-of-type(1)",
      "html": "6.14. Evaluation order<a class=\"headerlink\" href=\"#evaluation-order\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > div > h2",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#evaluation-order.section:nth-of-type(14) > h2:nth-of-type(1)",
      "text": [
        "6.14. Evaluation order",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 13108,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-75:nth-of-type(1)",
      "html": "Python evaluates expressions from left to right.  Notice that while evaluating\nan assignment, the right-hand side is evaluated before the left-hand side.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#evaluation-order.section:nth-of-type(14) > p#index-75:nth-of-type(1)",
      "text": [
        "Python evaluates expressions from left to right.  Notice that while evaluating\nan assignment, the right-hand side is evaluated before the left-hand side."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 13146,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "In the following lines, expressions will be evaluated in the arithmetic order of\ntheir suffixes:",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#evaluation-order.section:nth-of-type(14) > p:nth-of-type(2)",
      "text": [
        "In the following lines, expressions will be evaluated in the arithmetic order of\ntheir suffixes:"
      ]
    },
    {
      "bound": {
        "height": 120,
        "left": 265,
        "top": 13184,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"n\">expr1</span><span class=\"p\">,</span> <span class=\"n\">expr2</span><span class=\"p\">,</span> <span class=\"n\">expr3</span><span class=\"p\">,</span> <span class=\"n\">expr4</span>\n<span class=\"p\">(</span><span class=\"n\">expr1</span><span class=\"p\">,</span> <span class=\"n\">expr2</span><span class=\"p\">,</span> <span class=\"n\">expr3</span><span class=\"p\">,</span> <span class=\"n\">expr4</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"n\">expr1</span><span class=\"p\">:</span> <span class=\"n\">expr2</span><span class=\"p\">,</span> <span class=\"n\">expr3</span><span class=\"p\">:</span> <span class=\"n\">expr4</span><span class=\"p\">}</span>\n<span class=\"n\">expr1</span> <span class=\"o\">+</span> <span class=\"n\">expr2</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">expr3</span> <span class=\"o\">-</span> <span class=\"n\">expr4</span><span class=\"p\">)</span>\n<span class=\"n\">expr1</span><span class=\"p\">(</span><span class=\"n\">expr2</span><span class=\"p\">,</span> <span class=\"n\">expr3</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">expr4</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">expr5</span><span class=\"p\">)</span>\n<span class=\"n\">expr3</span><span class=\"p\">,</span> <span class=\"n\">expr4</span> <span class=\"o\">=</span> <span class=\"n\">expr1</span><span class=\"p\">,</span> <span class=\"n\">expr2</span>\n",
      "path": "div > div > div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#evaluation-order.section:nth-of-type(14) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        "expr1",
        ",",
        "expr2",
        ",",
        "expr3",
        ",",
        "expr4",
        "(",
        "expr1",
        ",",
        "expr2",
        ",",
        "expr3",
        ",",
        "expr4",
        ")",
        "{",
        "expr1",
        ":",
        "expr2",
        ",",
        "expr3",
        ":",
        "expr4",
        "}",
        "expr1",
        "+",
        "expr2",
        "*",
        "(",
        "expr3",
        "-",
        "expr4",
        ")",
        "expr1",
        "(",
        "expr2",
        ",",
        "expr3",
        ",",
        "*",
        "expr4",
        ",",
        "**",
        "expr5",
        ")",
        "expr3",
        ",",
        "expr4",
        "=",
        "expr1",
        ",",
        "expr2"
      ]
    },
    {
      "bound": {
        "height": 46,
        "left": 265,
        "top": 13319,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "26px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "7px",
        "padding-top": "7px"
      },
      "element": "h2:nth-of-type(1)",
      "html": "6.15. Operator precedence<a class=\"headerlink\" href=\"#operator-precedence\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > div > h2",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > h2:nth-of-type(1)",
      "text": [
        "6.15. Operator precedence",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 265,
        "top": 13381,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-76:nth-of-type(1)",
      "html": "The following table summarizes the operator precedences in Python, from lowest\nprecedence (least binding) to highest precedence (most binding).  Operators in\nthe same box have the same precedence.  Unless the syntax is explicitly given,\noperators are binary.  Operators in the same box group left to right (except for\ncomparisons, including tests, which all have the same precedence and chain from\nleft to right — see section <a class=\"reference internal\" href=\"#comparisons\"><em>Comparisons</em></a> — and exponentiation, which\ngroups from right to left).",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > p#index-76:nth-of-type(1)",
      "text": [
        "The following table summarizes the operator precedences in Python, from lowest\nprecedence (least binding) to highest precedence (most binding).  Operators in\nthe same box have the same precedence.  Unless the syntax is explicitly given,\noperators are binary.  Operators in the same box group left to right (except for\ncomparisons, including tests, which all have the same precedence and chain from\nleft to right — see section ",
        "Comparisons",
        " — and exponentiation, which\ngroups from right to left)."
      ]
    },
    {
      "bound": {
        "height": 28,
        "left": 265,
        "top": 13463,
        "width": 652
      },
      "computed": {
        "background-color": "rgb(238, 238, 238)",
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "font-weight": "bold",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "center",
        "vertical-align": "bottom"
      },
      "element": "th.head:nth-of-type(1)",
      "html": "Operator",
      "path": "div > div > div > div > div > div > table > thead > tr > th",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table.docutils:nth-of-type(1) > thead:nth-of-type(1) > tr:nth-of-type(1) > th.head:nth-of-type(1)",
      "text": [
        "Operator"
      ]
    },
    {
      "bound": {
        "height": 28,
        "left": 917,
        "top": 13463,
        "width": 511
      },
      "computed": {
        "background-color": "rgb(238, 238, 238)",
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "font-weight": "bold",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "center",
        "vertical-align": "bottom"
      },
      "element": "th.head:nth-of-type(2)",
      "html": "Description",
      "path": "div > div > div > div > div > div > table > thead > tr > th",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table.docutils:nth-of-type(1) > thead:nth-of-type(1) > tr:nth-of-type(1) > th.head:nth-of-type(2)",
      "text": [
        "Description"
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 265,
        "top": 13491,
        "width": 652
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(1)",
      "html": "<a class=\"reference internal\" href=\"#lambda\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">lambda</span></tt></a>",
      "path": "div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(1) > td:nth-of-type(1)",
      "text": [
        "lambda"
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 917,
        "top": 13491,
        "width": 511
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(2)",
      "html": "Lambda expression",
      "path": "div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(1) > td:nth-of-type(2)",
      "text": [
        "Lambda expression"
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 265,
        "top": 13520,
        "width": 652
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(1)",
      "html": "<a class=\"reference internal\" href=\"compound_stmts.html#if\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">if</span></tt></a> – <a class=\"reference internal\" href=\"compound_stmts.html#else\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">else</span></tt></a>",
      "path": "div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(2) > td:nth-of-type(1)",
      "text": [
        "if",
        " – ",
        "else"
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 917,
        "top": 13520,
        "width": 511
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(2)",
      "html": "Conditional expression",
      "path": "div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(2) > td:nth-of-type(2)",
      "text": [
        "Conditional expression"
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 265,
        "top": 13549,
        "width": 652
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(1)",
      "html": "<a class=\"reference internal\" href=\"#or\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">or</span></tt></a>",
      "path": "div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(3) > td:nth-of-type(1)",
      "text": [
        "or"
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 917,
        "top": 13549,
        "width": 511
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(2)",
      "html": "Boolean OR",
      "path": "div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(3) > td:nth-of-type(2)",
      "text": [
        "Boolean OR"
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 265,
        "top": 13578,
        "width": 652
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(1)",
      "html": "<a class=\"reference internal\" href=\"#and\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">and</span></tt></a>",
      "path": "div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(4) > td:nth-of-type(1)",
      "text": [
        "and"
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 917,
        "top": 13578,
        "width": 511
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(2)",
      "html": "Boolean AND",
      "path": "div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(4) > td:nth-of-type(2)",
      "text": [
        "Boolean AND"
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 265,
        "top": 13607,
        "width": 652
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(1)",
      "html": "<a class=\"reference internal\" href=\"#not\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">not</span></tt></a> <tt class=\"docutils literal\"><span class=\"pre\">x</span></tt>",
      "path": "div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(5) > td:nth-of-type(1)",
      "text": [
        "not",
        "x"
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 917,
        "top": 13607,
        "width": 511
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(2)",
      "html": "Boolean NOT",
      "path": "div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(5) > td:nth-of-type(2)",
      "text": [
        "Boolean NOT"
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 265,
        "top": 13636,
        "width": 652
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(1)",
      "html": "<a class=\"reference internal\" href=\"#in\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">in</span></tt></a>, <a class=\"reference internal\" href=\"#not-in\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">not</span> <span class=\"pre\">in</span></tt></a>,\n<a class=\"reference internal\" href=\"#is\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">is</span></tt></a>, <a class=\"reference internal\" href=\"#is-not\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">is</span> <span class=\"pre\">not</span></tt></a>, <tt class=\"docutils literal\"><span class=\"pre\">&lt;</span></tt>,\n<tt class=\"docutils literal\"><span class=\"pre\">&lt;=</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">&gt;</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">&gt;=</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">!=</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">==</span></tt>",
      "path": "div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(6) > td:nth-of-type(1)",
      "text": [
        "in",
        ", ",
        "not",
        "in",
        ",\n",
        "is",
        ", ",
        "is",
        "not",
        ", ",
        "<",
        ",\n",
        "<=",
        ", ",
        ">",
        ", ",
        ">=",
        ", ",
        "!=",
        ", ",
        "=="
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 917,
        "top": 13636,
        "width": 511
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(2)",
      "html": "Comparisons, including membership\ntests and identity tests",
      "path": "div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(6) > td:nth-of-type(2)",
      "text": [
        "Comparisons, including membership\ntests and identity tests"
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 265,
        "top": 13665,
        "width": 652
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(1)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">|</span></tt>",
      "path": "div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(7) > td:nth-of-type(1)",
      "text": [
        "|"
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 917,
        "top": 13665,
        "width": 511
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(2)",
      "html": "Bitwise OR",
      "path": "div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(7) > td:nth-of-type(2)",
      "text": [
        "Bitwise OR"
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 265,
        "top": 13694,
        "width": 652
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(1)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">^</span></tt>",
      "path": "div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(8) > td:nth-of-type(1)",
      "text": [
        "^"
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 917,
        "top": 13694,
        "width": 511
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(2)",
      "html": "Bitwise XOR",
      "path": "div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(8) > td:nth-of-type(2)",
      "text": [
        "Bitwise XOR"
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 265,
        "top": 13723,
        "width": 652
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(1)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">&amp;</span></tt>",
      "path": "div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(9) > td:nth-of-type(1)",
      "text": [
        "&"
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 917,
        "top": 13723,
        "width": 511
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(2)",
      "html": "Bitwise AND",
      "path": "div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(9) > td:nth-of-type(2)",
      "text": [
        "Bitwise AND"
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 265,
        "top": 13752,
        "width": 652
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(1)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">&lt;&lt;</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">&gt;&gt;</span></tt>",
      "path": "div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(10) > td:nth-of-type(1)",
      "text": [
        "<<",
        ", ",
        ">>"
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 917,
        "top": 13752,
        "width": 511
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(2)",
      "html": "Shifts",
      "path": "div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(10) > td:nth-of-type(2)",
      "text": [
        "Shifts"
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 265,
        "top": 13781,
        "width": 652
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(1)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">+</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">-</span></tt>",
      "path": "div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(11) > td:nth-of-type(1)",
      "text": [
        "+",
        ", ",
        "-"
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 917,
        "top": 13781,
        "width": 511
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(2)",
      "html": "Addition and subtraction",
      "path": "div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(11) > td:nth-of-type(2)",
      "text": [
        "Addition and subtraction"
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 265,
        "top": 13810,
        "width": 652
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(1)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">*</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">/</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">//</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">%</span></tt>",
      "path": "div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(12) > td:nth-of-type(1)",
      "text": [
        "*",
        ", ",
        "/",
        ", ",
        "//",
        ", ",
        "%"
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 917,
        "top": 13810,
        "width": 511
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(2)",
      "html": "Multiplication, division, remainder\n<a class=\"footnote-reference\" href=\"#id20\" id=\"id14\">[5]</a>",
      "path": "div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(12) > td:nth-of-type(2)",
      "text": [
        "Multiplication, division, remainder\n",
        "[5]"
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 265,
        "top": 13839,
        "width": 652
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(1)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">+x</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">-x</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">~x</span></tt>",
      "path": "div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(13) > td:nth-of-type(1)",
      "text": [
        "+x",
        ", ",
        "-x",
        ", ",
        "~x"
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 917,
        "top": 13839,
        "width": 511
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(2)",
      "html": "Positive, negative, bitwise NOT",
      "path": "div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(13) > td:nth-of-type(2)",
      "text": [
        "Positive, negative, bitwise NOT"
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 265,
        "top": 13868,
        "width": 652
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(1)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">**</span></tt>",
      "path": "div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(14) > td:nth-of-type(1)",
      "text": [
        "**"
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 917,
        "top": 13868,
        "width": 511
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(2)",
      "html": "Exponentiation <a class=\"footnote-reference\" href=\"#id21\" id=\"id15\">[6]</a>",
      "path": "div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(14) > td:nth-of-type(2)",
      "text": [
        "Exponentiation ",
        "[6]"
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 265,
        "top": 13897,
        "width": 652
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(1)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">x[index]</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">x[index:index]</span></tt>,\n<tt class=\"docutils literal\"><span class=\"pre\">x(arguments...)</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">x.attribute</span></tt>",
      "path": "div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(15) > td:nth-of-type(1)",
      "text": [
        "x[index]",
        ", ",
        "x[index:index]",
        ",\n",
        "x(arguments...)",
        ", ",
        "x.attribute"
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 917,
        "top": 13897,
        "width": 511
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(2)",
      "html": "Subscription, slicing,\ncall, attribute reference",
      "path": "div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(15) > td:nth-of-type(2)",
      "text": [
        "Subscription, slicing,\ncall, attribute reference"
      ]
    },
    {
      "bound": {
        "height": 47,
        "left": 265,
        "top": 13926,
        "width": 652
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(1)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">(expressions...)</span></tt>,\n<tt class=\"docutils literal\"><span class=\"pre\">[expressions...]</span></tt>,\n<tt class=\"docutils literal\"><span class=\"pre\">{key:</span> <span class=\"pre\">value...}</span></tt>,\n<tt class=\"docutils literal\"><span class=\"pre\">{expressions...}</span></tt>",
      "path": "div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(16) > td:nth-of-type(1)",
      "text": [
        "(expressions...)",
        ",\n",
        "[expressions...]",
        ",\n",
        "{key:",
        "value...}",
        ",\n",
        "{expressions...}"
      ]
    },
    {
      "bound": {
        "height": 47,
        "left": 917,
        "top": 13926,
        "width": 511
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(2)",
      "html": "Binding or tuple display,\nlist display,\ndictionary display,\nset display",
      "path": "div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(16) > td:nth-of-type(2)",
      "text": [
        "Binding or tuple display,\nlist display,\ndictionary display,\nset display"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 14004,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "font-weight": "bold",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "30px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p.rubric:nth-of-type(2)",
      "html": "Footnotes",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > p.rubric:nth-of-type(2)",
      "text": [
        "Footnotes"
      ]
    },
    {
      "bound": {
        "height": 87,
        "left": 265,
        "top": 14042,
        "width": 35
      },
      "computed": {
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td.label:nth-of-type(1)",
      "html": "<a class=\"fn-backref\" href=\"#id8\">[1]</a>",
      "path": "div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table#id16.docutils.footnote:nth-of-type(2) > tbody:nth-of-type(1) > tr:nth-of-type(1) > td.label:nth-of-type(1)",
      "text": [
        "[1]"
      ]
    },
    {
      "bound": {
        "height": 87,
        "left": 300,
        "top": 14042,
        "width": 1284
      },
      "computed": {
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(2)",
      "html": "While <tt class=\"docutils literal\"><span class=\"pre\">abs(x%y)</span> <span class=\"pre\">&lt;</span> <span class=\"pre\">abs(y)</span></tt> is true mathematically, for floats it may not be\ntrue numerically due to roundoff.  For example, and assuming a platform on which\na Python float is an IEEE 754 double-precision number, in order that <tt class=\"docutils literal\"><span class=\"pre\">-1e-100</span> <span class=\"pre\">%</span>\n<span class=\"pre\">1e100</span></tt> have the same sign as <tt class=\"docutils literal\"><span class=\"pre\">1e100</span></tt>, the computed result is <tt class=\"docutils literal\"><span class=\"pre\">-1e-100</span> <span class=\"pre\">+</span>\n<span class=\"pre\">1e100</span></tt>, which is numerically exactly equal to <tt class=\"docutils literal\"><span class=\"pre\">1e100</span></tt>.  The function\n<a class=\"reference internal\" href=\"../library/math.html#math.fmod\" title=\"math.fmod\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">math.fmod()</span></tt></a> returns a result whose sign matches the sign of the\nfirst argument instead, and so returns <tt class=\"docutils literal\"><span class=\"pre\">-1e-100</span></tt> in this case. Which approach\nis more appropriate depends on the application.",
      "path": "div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table#id16.docutils.footnote:nth-of-type(2) > tbody:nth-of-type(1) > tr:nth-of-type(1) > td:nth-of-type(2)",
      "text": [
        "While ",
        "abs(x%y)",
        "<",
        "abs(y)",
        " is true mathematically, for floats it may not be\ntrue numerically due to roundoff.  For example, and assuming a platform on which\na Python float is an IEEE 754 double-precision number, in order that ",
        "-1e-100",
        "%",
        "1e100",
        " have the same sign as ",
        "1e100",
        ", the computed result is ",
        "-1e-100",
        "+",
        "1e100",
        ", which is numerically exactly equal to ",
        "1e100",
        ".  The function\n",
        "math.fmod()",
        " returns a result whose sign matches the sign of the\nfirst argument instead, and so returns ",
        "-1e-100",
        " in this case. Which approach\nis more appropriate depends on the application."
      ]
    },
    {
      "bound": {
        "height": 48,
        "left": 265,
        "top": 14139,
        "width": 35
      },
      "computed": {
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td.label:nth-of-type(1)",
      "html": "<a class=\"fn-backref\" href=\"#id9\">[2]</a>",
      "path": "div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table#id17.docutils.footnote:nth-of-type(3) > tbody:nth-of-type(1) > tr:nth-of-type(1) > td.label:nth-of-type(1)",
      "text": [
        "[2]"
      ]
    },
    {
      "bound": {
        "height": 48,
        "left": 300,
        "top": 14139,
        "width": 1284
      },
      "computed": {
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(2)",
      "html": "If x is very close to an exact integer multiple of y, it’s possible for\n<tt class=\"docutils literal\"><span class=\"pre\">x//y</span></tt> to be one larger than <tt class=\"docutils literal\"><span class=\"pre\">(x-x%y)//y</span></tt> due to rounding.  In such\ncases, Python returns the latter result, in order to preserve that\n<tt class=\"docutils literal\"><span class=\"pre\">divmod(x,y)[0]</span> <span class=\"pre\">*</span> <span class=\"pre\">y</span> <span class=\"pre\">+</span> <span class=\"pre\">x</span> <span class=\"pre\">%</span> <span class=\"pre\">y</span></tt> be very close to <tt class=\"docutils literal\"><span class=\"pre\">x</span></tt>.",
      "path": "div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table#id17.docutils.footnote:nth-of-type(3) > tbody:nth-of-type(1) > tr:nth-of-type(1) > td:nth-of-type(2)",
      "text": [
        "If x is very close to an exact integer multiple of y, it’s possible for\n",
        "x//y",
        " to be one larger than ",
        "(x-x%y)//y",
        " due to rounding.  In such\ncases, Python returns the latter result, in order to preserve that\n",
        "divmod(x,y)[0]",
        "*",
        "y",
        "+",
        "x",
        "%",
        "y",
        " be very close to ",
        "x",
        "."
      ]
    },
    {
      "bound": {
        "height": 67,
        "left": 265,
        "top": 14197,
        "width": 35
      },
      "computed": {
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td.label:nth-of-type(1)",
      "html": "<a class=\"fn-backref\" href=\"#id11\">[3]</a>",
      "path": "div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table#id18.docutils.footnote:nth-of-type(4) > tbody:nth-of-type(1) > tr:nth-of-type(1) > td.label:nth-of-type(1)",
      "text": [
        "[3]"
      ]
    },
    {
      "bound": {
        "height": 67,
        "left": 300,
        "top": 14197,
        "width": 1284
      },
      "computed": {
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(2)",
      "html": "While comparisons between strings make sense at the byte level, they may\nbe counter-intuitive to users.  For example, the strings <tt class=\"docutils literal\"><span class=\"pre\">\"\\u00C7\"</span></tt> and\n<tt class=\"docutils literal\"><span class=\"pre\">\"\\u0327\\u0043\"</span></tt> compare differently, even though they both represent the\nsame unicode character (LATIN CAPITAL LETTER C WITH CEDILLA).  To compare\nstrings in a human recognizable way, compare using\n<a class=\"reference internal\" href=\"../library/unicodedata.html#unicodedata.normalize\" title=\"unicodedata.normalize\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">unicodedata.normalize()</span></tt></a>.",
      "path": "div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table#id18.docutils.footnote:nth-of-type(4) > tbody:nth-of-type(1) > tr:nth-of-type(1) > td:nth-of-type(2)",
      "text": [
        "While comparisons between strings make sense at the byte level, they may\nbe counter-intuitive to users.  For example, the strings ",
        "\"\\u00C7\"",
        " and\n",
        "\"\\u0327\\u0043\"",
        " compare differently, even though they both represent the\nsame unicode character (LATIN CAPITAL LETTER C WITH CEDILLA).  To compare\nstrings in a human recognizable way, compare using\n",
        "unicodedata.normalize()",
        "."
      ]
    },
    {
      "bound": {
        "height": 47,
        "left": 265,
        "top": 14274,
        "width": 35
      },
      "computed": {
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td.label:nth-of-type(1)",
      "html": "<a class=\"fn-backref\" href=\"#id12\">[4]</a>",
      "path": "div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table#id19.docutils.footnote:nth-of-type(5) > tbody:nth-of-type(1) > tr:nth-of-type(1) > td.label:nth-of-type(1)",
      "text": [
        "[4]"
      ]
    },
    {
      "bound": {
        "height": 47,
        "left": 300,
        "top": 14274,
        "width": 1284
      },
      "computed": {
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(2)",
      "html": "Due to automatic garbage-collection, free lists, and the dynamic nature of\ndescriptors, you may notice seemingly unusual behaviour in certain uses of\nthe <a class=\"reference internal\" href=\"#is\"><tt class=\"xref std std-keyword docutils literal\"><span class=\"pre\">is</span></tt></a> operator, like those involving comparisons between instance\nmethods, or constants.  Check their documentation for more info.",
      "path": "div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table#id19.docutils.footnote:nth-of-type(5) > tbody:nth-of-type(1) > tr:nth-of-type(1) > td:nth-of-type(2)",
      "text": [
        "Due to automatic garbage-collection, free lists, and the dynamic nature of\ndescriptors, you may notice seemingly unusual behaviour in certain uses of\nthe ",
        "is",
        " operator, like those involving comparisons between instance\nmethods, or constants.  Check their documentation for more info."
      ]
    },
    {
      "bound": {
        "height": 28,
        "left": 265,
        "top": 14331,
        "width": 35
      },
      "computed": {
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td.label:nth-of-type(1)",
      "html": "<a class=\"fn-backref\" href=\"#id14\">[5]</a>",
      "path": "div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table#id20.docutils.footnote:nth-of-type(6) > tbody:nth-of-type(1) > tr:nth-of-type(1) > td.label:nth-of-type(1)",
      "text": [
        "[5]"
      ]
    },
    {
      "bound": {
        "height": 28,
        "left": 300,
        "top": 14331,
        "width": 613
      },
      "computed": {
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(2)",
      "html": "The <tt class=\"docutils literal\"><span class=\"pre\">%</span></tt> operator is also used for string formatting; the same\nprecedence applies.",
      "path": "div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table#id20.docutils.footnote:nth-of-type(6) > tbody:nth-of-type(1) > tr:nth-of-type(1) > td:nth-of-type(2)",
      "text": [
        "The ",
        "%",
        " operator is also used for string formatting; the same\nprecedence applies."
      ]
    },
    {
      "bound": {
        "height": 28,
        "left": 265,
        "top": 14369,
        "width": 35
      },
      "computed": {
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td.label:nth-of-type(1)",
      "html": "<a class=\"fn-backref\" href=\"#id15\">[6]</a>",
      "path": "div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table#id21.docutils.footnote:nth-of-type(7) > tbody:nth-of-type(1) > tr:nth-of-type(1) > td.label:nth-of-type(1)",
      "text": [
        "[6]"
      ]
    },
    {
      "bound": {
        "height": 28,
        "left": 300,
        "top": 14369,
        "width": 888
      },
      "computed": {
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(2)",
      "html": "The power operator <tt class=\"docutils literal\"><span class=\"pre\">**</span></tt> binds less tightly than an arithmetic or\nbitwise unary operator on its right, that is, <tt class=\"docutils literal\"><span class=\"pre\">2**-1</span></tt> is <tt class=\"docutils literal\"><span class=\"pre\">0.5</span></tt>.",
      "path": "div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#expressions.section:nth-of-type(1) > div#operator-precedence.section:nth-of-type(15) > table#id21.docutils.footnote:nth-of-type(7) > tbody:nth-of-type(1) > tr:nth-of-type(1) > td:nth-of-type(2)",
      "text": [
        "The power operator ",
        "**",
        " binds less tightly than an arithmetic or\nbitwise unary operator on its right, that is, ",
        "2**-1",
        " is ",
        "0.5",
        "."
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 26,
        "top": 82,
        "width": 202
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "font-size": "19px",
        "line-height": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "3px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "h3:nth-of-type(1)",
      "html": "<a href=\"../contents.html\">Table Of Contents</a>",
      "path": "div > div > div > h3",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > h3:nth-of-type(1)",
      "text": [
        "Table Of Contents"
      ]
    },
    {
      "bound": {
        "height": 854,
        "left": 36,
        "top": 108,
        "width": 182
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(1)",
      "html": "<a class=\"reference internal\" href=\"#\">6. Expressions</a><ul>\n<li><a class=\"reference internal\" href=\"#arithmetic-conversions\">6.1. Arithmetic conversions</a></li>\n<li><a class=\"reference internal\" href=\"#atoms\">6.2. Atoms</a><ul>\n<li><a class=\"reference internal\" href=\"#atom-identifiers\">6.2.1. Identifiers (Names)</a></li>\n<li><a class=\"reference internal\" href=\"#literals\">6.2.2. Literals</a></li>\n<li><a class=\"reference internal\" href=\"#parenthesized-forms\">6.2.3. Parenthesized forms</a></li>\n<li><a class=\"reference internal\" href=\"#displays-for-lists-sets-and-dictionaries\">6.2.4. Displays for lists, sets and dictionaries</a></li>\n<li><a class=\"reference internal\" href=\"#list-displays\">6.2.5. List displays</a></li>\n<li><a class=\"reference internal\" href=\"#set-displays\">6.2.6. Set displays</a></li>\n<li><a class=\"reference internal\" href=\"#dictionary-displays\">6.2.7. Dictionary displays</a></li>\n<li><a class=\"reference internal\" href=\"#generator-expressions\">6.2.8. Generator expressions</a></li>\n<li><a class=\"reference internal\" href=\"#yield-expressions\">6.2.9. Yield expressions</a><ul>\n<li><a class=\"reference internal\" href=\"#generator-iterator-methods\">6.2.9.1. Generator-iterator methods</a></li>\n<li><a class=\"reference internal\" href=\"#examples\">6.2.9.2. Examples</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#primaries\">6.3. Primaries</a><ul>\n<li><a class=\"reference internal\" href=\"#attribute-references\">6.3.1. Attribute references</a></li>\n<li><a class=\"reference internal\" href=\"#subscriptions\">6.3.2. Subscriptions</a></li>\n<li><a class=\"reference internal\" href=\"#slicings\">6.3.3. Slicings</a></li>\n<li><a class=\"reference internal\" href=\"#calls\">6.3.4. Calls</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#the-power-operator\">6.4. The power operator</a></li>\n<li><a class=\"reference internal\" href=\"#unary-arithmetic-and-bitwise-operations\">6.5. Unary arithmetic and bitwise operations</a></li>\n<li><a class=\"reference internal\" href=\"#binary-arithmetic-operations\">6.6. Binary arithmetic operations</a></li>\n<li><a class=\"reference internal\" href=\"#shifting-operations\">6.7. Shifting operations</a></li>\n<li><a class=\"reference internal\" href=\"#binary-bitwise-operations\">6.8. Binary bitwise operations</a></li>\n<li><a class=\"reference internal\" href=\"#not-in\">6.9. Comparisons</a></li>\n<li><a class=\"reference internal\" href=\"#boolean-operations\">6.10. Boolean operations</a></li>\n<li><a class=\"reference internal\" href=\"#conditional-expressions\">6.11. Conditional expressions</a></li>\n<li><a class=\"reference internal\" href=\"#lambda\">6.12. Lambdas</a></li>\n<li><a class=\"reference internal\" href=\"#expression-lists\">6.13. Expression lists</a></li>\n<li><a class=\"reference internal\" href=\"#evaluation-order\">6.14. Evaluation order</a></li>\n<li><a class=\"reference internal\" href=\"#operator-precedence\">6.15. Operator precedence</a></li>\n</ul>\n",
      "path": "div > div > div > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1)",
      "text": [
        "6. Expressions"
      ]
    },
    {
      "bound": {
        "height": 32,
        "left": 56,
        "top": 124,
        "width": 152
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "square",
        "margin-bottom": "5px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(1)",
      "html": "<a class=\"reference internal\" href=\"#arithmetic-conversions\">6.1. Arithmetic conversions</a>",
      "path": "div > div > div > ul > li > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1)",
      "text": [
        "6.1. Arithmetic conversions"
      ]
    },
    {
      "bound": {
        "height": 368,
        "left": 56,
        "top": 161,
        "width": 152
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "square",
        "margin-bottom": "5px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(2)",
      "html": "<a class=\"reference internal\" href=\"#atoms\">6.2. Atoms</a><ul>\n<li><a class=\"reference internal\" href=\"#atom-identifiers\">6.2.1. Identifiers (Names)</a></li>\n<li><a class=\"reference internal\" href=\"#literals\">6.2.2. Literals</a></li>\n<li><a class=\"reference internal\" href=\"#parenthesized-forms\">6.2.3. Parenthesized forms</a></li>\n<li><a class=\"reference internal\" href=\"#displays-for-lists-sets-and-dictionaries\">6.2.4. Displays for lists, sets and dictionaries</a></li>\n<li><a class=\"reference internal\" href=\"#list-displays\">6.2.5. List displays</a></li>\n<li><a class=\"reference internal\" href=\"#set-displays\">6.2.6. Set displays</a></li>\n<li><a class=\"reference internal\" href=\"#dictionary-displays\">6.2.7. Dictionary displays</a></li>\n<li><a class=\"reference internal\" href=\"#generator-expressions\">6.2.8. Generator expressions</a></li>\n<li><a class=\"reference internal\" href=\"#yield-expressions\">6.2.9. Yield expressions</a><ul>\n<li><a class=\"reference internal\" href=\"#generator-iterator-methods\">6.2.9.1. Generator-iterator methods</a></li>\n<li><a class=\"reference internal\" href=\"#examples\">6.2.9.2. Examples</a></li>\n</ul>\n</li>\n</ul>\n",
      "path": "div > div > div > ul > li > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(2)",
      "text": [
        "6.2. Atoms"
      ]
    },
    {
      "bound": {
        "height": 32,
        "left": 76,
        "top": 177,
        "width": 122
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "square",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(1)",
      "html": "<a class=\"reference internal\" href=\"#atom-identifiers\">6.2.1. Identifiers (Names)</a>",
      "path": "div > div > div > ul > li > ul > li > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(2) > ul:nth-of-type(1) > li:nth-of-type(1)",
      "text": [
        "6.2.1. Identifiers (Names)"
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 76,
        "top": 209,
        "width": 122
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "square",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(2)",
      "html": "<a class=\"reference internal\" href=\"#literals\">6.2.2. Literals</a>",
      "path": "div > div > div > ul > li > ul > li > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(2) > ul:nth-of-type(1) > li:nth-of-type(2)",
      "text": [
        "6.2.2. Literals"
      ]
    },
    {
      "bound": {
        "height": 32,
        "left": 76,
        "top": 225,
        "width": 122
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "square",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(3)",
      "html": "<a class=\"reference internal\" href=\"#parenthesized-forms\">6.2.3. Parenthesized forms</a>",
      "path": "div > div > div > ul > li > ul > li > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(2) > ul:nth-of-type(1) > li:nth-of-type(3)",
      "text": [
        "6.2.3. Parenthesized forms"
      ]
    },
    {
      "bound": {
        "height": 48,
        "left": 76,
        "top": 257,
        "width": 122
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "square",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(4)",
      "html": "<a class=\"reference internal\" href=\"#displays-for-lists-sets-and-dictionaries\">6.2.4. Displays for lists, sets and dictionaries</a>",
      "path": "div > div > div > ul > li > ul > li > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(2) > ul:nth-of-type(1) > li:nth-of-type(4)",
      "text": [
        "6.2.4. Displays for lists, sets and dictionaries"
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 76,
        "top": 305,
        "width": 122
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "square",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(5)",
      "html": "<a class=\"reference internal\" href=\"#list-displays\">6.2.5. List displays</a>",
      "path": "div > div > div > ul > li > ul > li > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(2) > ul:nth-of-type(1) > li:nth-of-type(5)",
      "text": [
        "6.2.5. List displays"
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 76,
        "top": 321,
        "width": 122
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "square",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(6)",
      "html": "<a class=\"reference internal\" href=\"#set-displays\">6.2.6. Set displays</a>",
      "path": "div > div > div > ul > li > ul > li > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(2) > ul:nth-of-type(1) > li:nth-of-type(6)",
      "text": [
        "6.2.6. Set displays"
      ]
    },
    {
      "bound": {
        "height": 32,
        "left": 76,
        "top": 337,
        "width": 122
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "square",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(7)",
      "html": "<a class=\"reference internal\" href=\"#dictionary-displays\">6.2.7. Dictionary displays</a>",
      "path": "div > div > div > ul > li > ul > li > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(2) > ul:nth-of-type(1) > li:nth-of-type(7)",
      "text": [
        "6.2.7. Dictionary displays"
      ]
    },
    {
      "bound": {
        "height": 32,
        "left": 76,
        "top": 369,
        "width": 122
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "square",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(8)",
      "html": "<a class=\"reference internal\" href=\"#generator-expressions\">6.2.8. Generator expressions</a>",
      "path": "div > div > div > ul > li > ul > li > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(2) > ul:nth-of-type(1) > li:nth-of-type(8)",
      "text": [
        "6.2.8. Generator expressions"
      ]
    },
    {
      "bound": {
        "height": 128,
        "left": 76,
        "top": 401,
        "width": 122
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "square",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(9)",
      "html": "<a class=\"reference internal\" href=\"#yield-expressions\">6.2.9. Yield expressions</a><ul>\n<li><a class=\"reference internal\" href=\"#generator-iterator-methods\">6.2.9.1. Generator-iterator methods</a></li>\n<li><a class=\"reference internal\" href=\"#examples\">6.2.9.2. Examples</a></li>\n</ul>\n",
      "path": "div > div > div > ul > li > ul > li > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(2) > ul:nth-of-type(1) > li:nth-of-type(9)",
      "text": [
        "6.2.9. Yield expressions"
      ]
    },
    {
      "bound": {
        "height": 64,
        "left": 96,
        "top": 433,
        "width": 92
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "square",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(1)",
      "html": "<a class=\"reference internal\" href=\"#generator-iterator-methods\">6.2.9.1. Generator-iterator methods</a>",
      "path": "div > div > div > ul > li > ul > li > ul > li > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(2) > ul:nth-of-type(1) > li:nth-of-type(9) > ul:nth-of-type(1) > li:nth-of-type(1)",
      "text": [
        "6.2.9.1. Generator-iterator methods"
      ]
    },
    {
      "bound": {
        "height": 32,
        "left": 96,
        "top": 497,
        "width": 92
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "square",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(2)",
      "html": "<a class=\"reference internal\" href=\"#examples\">6.2.9.2. Examples</a>",
      "path": "div > div > div > ul > li > ul > li > ul > li > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(2) > ul:nth-of-type(1) > li:nth-of-type(9) > ul:nth-of-type(1) > li:nth-of-type(2)",
      "text": [
        "6.2.9.2. Examples"
      ]
    },
    {
      "bound": {
        "height": 96,
        "left": 56,
        "top": 534,
        "width": 152
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "square",
        "margin-bottom": "5px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(3)",
      "html": "<a class=\"reference internal\" href=\"#primaries\">6.3. Primaries</a><ul>\n<li><a class=\"reference internal\" href=\"#attribute-references\">6.3.1. Attribute references</a></li>\n<li><a class=\"reference internal\" href=\"#subscriptions\">6.3.2. Subscriptions</a></li>\n<li><a class=\"reference internal\" href=\"#slicings\">6.3.3. Slicings</a></li>\n<li><a class=\"reference internal\" href=\"#calls\">6.3.4. Calls</a></li>\n</ul>\n",
      "path": "div > div > div > ul > li > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(3)",
      "text": [
        "6.3. Primaries"
      ]
    },
    {
      "bound": {
        "height": 32,
        "left": 76,
        "top": 550,
        "width": 122
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "square",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(1)",
      "html": "<a class=\"reference internal\" href=\"#attribute-references\">6.3.1. Attribute references</a>",
      "path": "div > div > div > ul > li > ul > li > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(3) > ul:nth-of-type(1) > li:nth-of-type(1)",
      "text": [
        "6.3.1. Attribute references"
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 76,
        "top": 582,
        "width": 122
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "square",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(2)",
      "html": "<a class=\"reference internal\" href=\"#subscriptions\">6.3.2. Subscriptions</a>",
      "path": "div > div > div > ul > li > ul > li > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(3) > ul:nth-of-type(1) > li:nth-of-type(2)",
      "text": [
        "6.3.2. Subscriptions"
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 76,
        "top": 598,
        "width": 122
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "square",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(3)",
      "html": "<a class=\"reference internal\" href=\"#slicings\">6.3.3. Slicings</a>",
      "path": "div > div > div > ul > li > ul > li > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(3) > ul:nth-of-type(1) > li:nth-of-type(3)",
      "text": [
        "6.3.3. Slicings"
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 76,
        "top": 614,
        "width": 122
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "square",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(4)",
      "html": "<a class=\"reference internal\" href=\"#calls\">6.3.4. Calls</a>",
      "path": "div > div > div > ul > li > ul > li > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(3) > ul:nth-of-type(1) > li:nth-of-type(4)",
      "text": [
        "6.3.4. Calls"
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 56,
        "top": 635,
        "width": 152
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "square",
        "margin-bottom": "5px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(4)",
      "html": "<a class=\"reference internal\" href=\"#the-power-operator\">6.4. The power operator</a>",
      "path": "div > div > div > ul > li > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(4)",
      "text": [
        "6.4. The power operator"
      ]
    },
    {
      "bound": {
        "height": 32,
        "left": 56,
        "top": 656,
        "width": 152
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "square",
        "margin-bottom": "5px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(5)",
      "html": "<a class=\"reference internal\" href=\"#unary-arithmetic-and-bitwise-operations\">6.5. Unary arithmetic and bitwise operations</a>",
      "path": "div > div > div > ul > li > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(5)",
      "text": [
        "6.5. Unary arithmetic and bitwise operations"
      ]
    },
    {
      "bound": {
        "height": 32,
        "left": 56,
        "top": 693,
        "width": 152
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "square",
        "margin-bottom": "5px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(6)",
      "html": "<a class=\"reference internal\" href=\"#binary-arithmetic-operations\">6.6. Binary arithmetic operations</a>",
      "path": "div > div > div > ul > li > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(6)",
      "text": [
        "6.6. Binary arithmetic operations"
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 56,
        "top": 730,
        "width": 152
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "square",
        "margin-bottom": "5px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(7)",
      "html": "<a class=\"reference internal\" href=\"#shifting-operations\">6.7. Shifting operations</a>",
      "path": "div > div > div > ul > li > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(7)",
      "text": [
        "6.7. Shifting operations"
      ]
    },
    {
      "bound": {
        "height": 32,
        "left": 56,
        "top": 751,
        "width": 152
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "square",
        "margin-bottom": "5px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(8)",
      "html": "<a class=\"reference internal\" href=\"#binary-bitwise-operations\">6.8. Binary bitwise operations</a>",
      "path": "div > div > div > ul > li > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(8)",
      "text": [
        "6.8. Binary bitwise operations"
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 56,
        "top": 788,
        "width": 152
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "square",
        "margin-bottom": "5px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(9)",
      "html": "<a class=\"reference internal\" href=\"#not-in\">6.9. Comparisons</a>",
      "path": "div > div > div > ul > li > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(9)",
      "text": [
        "6.9. Comparisons"
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 56,
        "top": 809,
        "width": 152
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "square",
        "margin-bottom": "5px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(10)",
      "html": "<a class=\"reference internal\" href=\"#boolean-operations\">6.10. Boolean operations</a>",
      "path": "div > div > div > ul > li > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(10)",
      "text": [
        "6.10. Boolean operations"
      ]
    },
    {
      "bound": {
        "height": 32,
        "left": 56,
        "top": 830,
        "width": 152
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "square",
        "margin-bottom": "5px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(11)",
      "html": "<a class=\"reference internal\" href=\"#conditional-expressions\">6.11. Conditional expressions</a>",
      "path": "div > div > div > ul > li > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(11)",
      "text": [
        "6.11. Conditional expressions"
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 56,
        "top": 867,
        "width": 152
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "square",
        "margin-bottom": "5px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(12)",
      "html": "<a class=\"reference internal\" href=\"#lambda\">6.12. Lambdas</a>",
      "path": "div > div > div > ul > li > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(12)",
      "text": [
        "6.12. Lambdas"
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 56,
        "top": 888,
        "width": 152
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "square",
        "margin-bottom": "5px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(13)",
      "html": "<a class=\"reference internal\" href=\"#expression-lists\">6.13. Expression lists</a>",
      "path": "div > div > div > ul > li > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(13)",
      "text": [
        "6.13. Expression lists"
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 56,
        "top": 909,
        "width": 152
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "square",
        "margin-bottom": "5px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(14)",
      "html": "<a class=\"reference internal\" href=\"#evaluation-order\">6.14. Evaluation order</a>",
      "path": "div > div > div > ul > li > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(14)",
      "text": [
        "6.14. Evaluation order"
      ]
    },
    {
      "bound": {
        "height": 32,
        "left": 56,
        "top": 930,
        "width": 152
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "square",
        "margin-bottom": "5px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(15)",
      "html": "<a class=\"reference internal\" href=\"#operator-precedence\">6.15. Operator precedence</a>",
      "path": "div > div > div > ul > li > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(15)",
      "text": [
        "6.15. Operator precedence"
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 26,
        "top": 988,
        "width": 202
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "font-size": "17px",
        "line-height": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "26px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "h4:nth-of-type(1)",
      "html": "Previous topic",
      "path": "div > div > div > h4",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > h4:nth-of-type(1)",
      "text": [
        "Previous topic"
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 36,
        "top": 1009,
        "width": 182
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "font-size": "13px",
        "line-height": "16px",
        "margin-bottom": "10px",
        "margin-left": "10px",
        "margin-right": "10px",
        "margin-top": "5px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "p.topless:nth-of-type(1)",
      "html": "<a href=\"import.html\" title=\"previous chapter\">5. The import system</a>",
      "path": "div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > p.topless:nth-of-type(1)",
      "text": [
        "5. The import system"
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 26,
        "top": 1051,
        "width": 202
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "font-size": "17px",
        "line-height": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "26px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "h4:nth-of-type(2)",
      "html": "Next topic",
      "path": "div > div > div > h4",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > h4:nth-of-type(2)",
      "text": [
        "Next topic"
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 36,
        "top": 1072,
        "width": 182
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "font-size": "13px",
        "line-height": "16px",
        "margin-bottom": "10px",
        "margin-left": "10px",
        "margin-right": "10px",
        "margin-top": "5px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "p.topless:nth-of-type(2)",
      "html": "<a href=\"simple_stmts.html\" title=\"next chapter\">7. Simple statements</a>",
      "path": "div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > p.topless:nth-of-type(2)",
      "text": [
        "7. Simple statements"
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 26,
        "top": 1116,
        "width": 202
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "font-size": "19px",
        "line-height": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "28px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "h3:nth-of-type(2)",
      "html": "This Page",
      "path": "div > div > div > h3",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > h3:nth-of-type(2)",
      "text": [
        "This Page"
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 36,
        "top": 1142,
        "width": 182
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(1)",
      "html": "<a href=\"../bugs.html\">Report a Bug</a>",
      "path": "div > div > div > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul.this-page-menu:nth-of-type(2) > li:nth-of-type(1)",
      "text": [
        "Report a Bug"
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 36,
        "top": 1158,
        "width": 182
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(2)",
      "html": "<a href=\"../_sources/reference/expressions.txt\" rel=\"nofollow\">Show Source</a>",
      "path": "div > div > div > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul.this-page-menu:nth-of-type(2) > li:nth-of-type(2)",
      "text": [
        "Show Source"
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 26,
        "top": 1202,
        "width": 202
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "font-size": "19px",
        "line-height": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "28px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "h3:nth-of-type(1)",
      "html": "Quick search",
      "path": "div > div > div > div > h3",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > div#searchbox:nth-of-type(1) > h3:nth-of-type(1)",
      "text": [
        "Quick search"
      ]
    },
    {
      "bound": {
        "height": 32,
        "left": 26,
        "top": 1265,
        "width": 202
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "font-size": "12px",
        "line-height": "16px",
        "margin-bottom": "12px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "12px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "p.searchtip:nth-of-type(1)",
      "html": "\n    Enter search terms or a module, class or function name.\n    ",
      "path": "div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > div#searchbox:nth-of-type(1) > p.searchtip:nth-of-type(1)",
      "text": [
        "\n    Enter search terms or a module, class or function name.\n    "
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 235,
        "top": 1990,
        "width": 9
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "cursor": "pointer",
        "line-height": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "position": "fixed"
      },
      "element": "span:nth-of-type(1)",
      "html": "«",
      "path": "div > div > div > span",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div#sidebarbutton:nth-of-type(2) > span:nth-of-type(1)",
      "text": [
        "«"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 1540,
        "top": 14422,
        "width": 34
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "float": "right",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "10px",
        "outline-color": "rgb(102, 102, 102)"
      },
      "element": "li.right:nth-of-type(1)",
      "html": "\n          <a href=\"../genindex.html\" title=\"General Index\">index</a>",
      "path": "div > ul > li",
      "selector": "div.related:nth-of-type(3) > ul:nth-of-type(1) > li.right:nth-of-type(1)",
      "text": [
        "index"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 1473,
        "top": 14422,
        "width": 62
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "float": "right",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "5px",
        "outline-color": "rgb(102, 102, 102)"
      },
      "element": "li.right:nth-of-type(2)",
      "html": "\n          <a href=\"../py-modindex.html\" title=\"Python Module Index\">modules</a> |",
      "path": "div > ul > li",
      "selector": "div.related:nth-of-type(3) > ul:nth-of-type(1) > li.right:nth-of-type(2)",
      "text": [
        "modules",
        " |"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 1430,
        "top": 14422,
        "width": 38
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "float": "right",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "5px",
        "outline-color": "rgb(102, 102, 102)"
      },
      "element": "li.right:nth-of-type(3)",
      "html": "\n          <a href=\"simple_stmts.html\" title=\"7. Simple statements\">next</a> |",
      "path": "div > ul > li",
      "selector": "div.related:nth-of-type(3) > ul:nth-of-type(1) > li.right:nth-of-type(3)",
      "text": [
        "next",
        " |"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 1362,
        "top": 14422,
        "width": 63
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "float": "right",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "5px",
        "outline-color": "rgb(102, 102, 102)"
      },
      "element": "li.right:nth-of-type(4)",
      "html": "\n          <a href=\"import.html\" title=\"5. The import system\">previous</a> |",
      "path": "div > ul > li",
      "selector": "div.related:nth-of-type(3) > ul:nth-of-type(1) > li.right:nth-of-type(4)",
      "text": [
        "previous",
        " |"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 16,
        "top": 14422,
        "width": 1568
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(102, 102, 102)",
        "padding-left": "10px"
      },
      "element": "ul:nth-of-type(1)",
      "html": "\n        <li class=\"right\" style=\"margin-right: 10px\">\n          <a href=\"../genindex.html\" title=\"General Index\">index</a></li>\n        <li class=\"right\">\n          <a href=\"../py-modindex.html\" title=\"Python Module Index\">modules</a> |</li>\n        <li class=\"right\">\n          <a href=\"simple_stmts.html\" title=\"7. Simple statements\">next</a> |</li>\n        <li class=\"right\">\n          <a href=\"import.html\" title=\"5. The import system\">previous</a> |</li>\n        <li><img src=\"../_static/py.png\" alt=\"\" style=\"vertical-align: middle; margin-top: -1px\"></li>\n        <li><a href=\"http://www.python.org/\">Python</a> »</li>\n        <li>\n          <span class=\"version_switcher_placeholder\"><select><option value=\"3.4\">dev (3.4)</option><option value=\"3.3\" selected=\"selected\">3.3.2</option><option value=\"3.2\">3.2</option><option value=\"2.7\">2.7</option><option value=\"2.6\">2.6</option></select></span>\n          <a href=\"../index.html\">Documentation</a> »\n        </li>\n\n          <li><a href=\"index.html\">The Python Language Reference</a> »</li> \n      ",
      "path": "div > ul",
      "selector": "div.related:nth-of-type(3) > ul:nth-of-type(1)",
      "text": [
        "Python",
        " »",
        "Documentation",
        " »\n        ",
        "The Python Language Reference",
        " »"
      ]
    },
    {
      "bound": {
        "height": 90,
        "left": 16,
        "top": 14452,
        "width": 1558
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(85, 85, 85)",
        "border-left-color": "rgb(85, 85, 85)",
        "border-right-color": "rgb(85, 85, 85)",
        "border-top-color": "rgb(85, 85, 85)",
        "color": "rgb(85, 85, 85)",
        "font-size": "12px",
        "line-height": "18px",
        "margin-left": "0px",
        "margin-right": "10px",
        "margin-top": "-24px",
        "outline-color": "rgb(85, 85, 85)",
        "padding-bottom": "9px",
        "padding-top": "9px",
        "text-align": "right"
      },
      "element": "div.footer:nth-of-type(4)",
      "html": "\n    © <a href=\"../copyright.html\">Copyright</a> 1990-2013, Python Software Foundation.\n    <br>\n    The Python Software Foundation is a non-profit corporation.\n    <a href=\"http://www.python.org/psf/donations/\">Please donate.</a>\n    <br>\n    Last updated on Aug 14, 2013.\n    <a href=\"../bugs.html\">Found a bug</a>?\n    <br>\n    Created using <a href=\"http://sphinx.pocoo.org/\">Sphinx</a> 1.0.7.\n    ",
      "path": "div",
      "selector": "div.footer:nth-of-type(4)",
      "text": [
        "\n    © ",
        "Copyright",
        " 1990-2013, Python Software Foundation.\n    ",
        "\n    The Python Software Foundation is a non-profit corporation.\n    ",
        "Please donate.",
        "\n    Last updated on Aug 14, 2013.\n    ",
        "Found a bug",
        "?\n    ",
        "\n    Created using ",
        "Sphinx",
        " 1.0.7.\n    "
      ]
    }
  ],
  "images": [
    {
      "bound": {
        "height": 16,
        "left": 26,
        "top": 21,
        "width": 16
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "display": "inline",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "-1px",
        "outline-color": "rgb(102, 102, 102)",
        "vertical-align": "middle"
      },
      "element": "img:nth-of-type(1)",
      "path": "div > ul > li > img",
      "selector": "div.related:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(5) > img:nth-of-type(1)",
      "src": "http://docs.python.org/3.3/_static/py.png"
    },
    {
      "bound": {
        "height": 16,
        "left": 26,
        "top": 14429,
        "width": 16
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "display": "inline",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "-1px",
        "outline-color": "rgb(102, 102, 102)",
        "vertical-align": "middle"
      },
      "element": "img:nth-of-type(1)",
      "path": "div > ul > li > img",
      "selector": "div.related:nth-of-type(3) > ul:nth-of-type(1) > li:nth-of-type(5) > img:nth-of-type(1)",
      "src": "http://docs.python.org/3.3/_static/py.png"
    }
  ]
}