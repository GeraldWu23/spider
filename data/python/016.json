{
  "body": {
    "bound": {
      "height": 18172,
      "left": 16,
      "top": 7,
      "width": 1568
    },
    "computed": {
      "alignment-baseline": "auto",
      "background-attachment": "scroll",
      "background-clip": "border-box",
      "background-color": "rgb(255, 255, 255)",
      "background-image": "none",
      "background-origin": "padding-box",
      "background-position": "0% 0%",
      "background-repeat": "repeat",
      "background-size": "auto auto",
      "baseline-shift": "baseline",
      "border-bottom-color": "rgb(0, 0, 0)",
      "border-bottom-left-radius": "0px",
      "border-bottom-right-radius": "0px",
      "border-bottom-style": "none",
      "border-bottom-width": "0px",
      "border-collapse": "separate",
      "border-left-color": "rgb(0, 0, 0)",
      "border-left-style": "none",
      "border-left-width": "0px",
      "border-right-color": "rgb(0, 0, 0)",
      "border-right-style": "none",
      "border-right-width": "0px",
      "border-top-color": "rgb(0, 0, 0)",
      "border-top-left-radius": "0px",
      "border-top-right-radius": "0px",
      "border-top-style": "none",
      "border-top-width": "0px",
      "bottom": "auto",
      "box-shadow": "none",
      "box-sizing": "content-box",
      "caption-side": "top",
      "clear": "none",
      "clip": "auto",
      "clip-path": "none",
      "clip-rule": "nonzero",
      "color": "rgb(0, 0, 0)",
      "color-interpolation": "srgb",
      "color-interpolation-filters": "linearrgb",
      "color-rendering": "auto",
      "cursor": "auto",
      "direction": "ltr",
      "display": "block",
      "dominant-baseline": "auto",
      "empty-cells": "show",
      "fill": "#000000",
      "fill-opacity": "1",
      "fill-rule": "nonzero",
      "filter": "none",
      "float": "none",
      "flood-color": "rgb(0, 0, 0)",
      "flood-opacity": "1",
      "font-family": "'Lucida Grande', Arial, sans-serif",
      "font-size": "16px",
      "font-style": "normal",
      "font-variant": "normal",
      "font-weight": "normal",
      "glyph-orientation-horizontal": "0deg",
      "glyph-orientation-vertical": "auto",
      "height": "18172px",
      "image-rendering": "auto",
      "kerning": "0",
      "left": "auto",
      "letter-spacing": "normal",
      "lighting-color": "rgb(255, 255, 255)",
      "line-height": "normal",
      "list-style-image": "none",
      "list-style-position": "outside",
      "list-style-type": "disc",
      "margin-bottom": "0px",
      "margin-left": "16px",
      "margin-right": "16px",
      "margin-top": "0px",
      "marker-end": "none",
      "marker-mid": "none",
      "marker-start": "none",
      "mask": "none",
      "max-height": "none",
      "max-width": "none",
      "min-height": "0px",
      "min-width": "0px",
      "opacity": "1",
      "orphans": "2",
      "outline-color": "rgb(0, 0, 0)",
      "outline-style": "none",
      "outline-width": "0px",
      "overflow-x": "visible",
      "overflow-y": "visible",
      "padding-bottom": "0px",
      "padding-left": "0px",
      "padding-right": "0px",
      "padding-top": "0px",
      "page-break-after": "auto",
      "page-break-before": "auto",
      "page-break-inside": "auto",
      "pointer-events": "auto",
      "position": "static",
      "resize": "none",
      "right": "auto",
      "shape-rendering": "auto",
      "speak": "normal",
      "stop-color": "rgb(0, 0, 0)",
      "stop-opacity": "1",
      "stroke": "none",
      "stroke-dasharray": "none",
      "stroke-dashoffset": "0",
      "stroke-linecap": "butt",
      "stroke-linejoin": "miter",
      "stroke-miterlimit": "4",
      "stroke-opacity": "1",
      "stroke-width": "1",
      "table-layout": "auto",
      "text-align": "-webkit-auto",
      "text-anchor": "start",
      "text-decoration": "none",
      "text-indent": "0px",
      "text-overflow": "clip",
      "text-rendering": "auto",
      "text-shadow": "none",
      "text-transform": "none",
      "top": "auto",
      "unicode-bidi": "normal",
      "vector-effect": "none",
      "vertical-align": "baseline",
      "visibility": "visible",
      "white-space": "normal",
      "widows": "2",
      "width": "1568px",
      "word-break": "normal",
      "word-spacing": "0px",
      "word-wrap": "normal",
      "writing-mode": "lr-tb",
      "z-index": "auto",
      "zoom": "1"
    },
    "scroll": {
      "left": 0,
      "top": 0
    }
  },
  "descriptions": [],
  "titles": [
    "6.2. re — Regular expression operations — Python v3.3.2 documentation"
  ],
  "url": "http://docs.python.org/3.3/library/re.html",
  "links": [
    "http://docs.python.org/3.3/genindex.html",
    "http://docs.python.org/3.3/py-modindex.html",
    "http://docs.python.org/3.3/library/difflib.html",
    "http://docs.python.org/3.3/library/string.html",
    "http://www.python.org/",
    "http://docs.python.org/3.3/index.html",
    "http://docs.python.org/3.3/library/index.html",
    "http://docs.python.org/3.3/library/text.html",
    "http://docs.python.org/3.3/library/re.html#module-re",
    "http://docs.python.org/3.3/library/re.html#module-re",
    "http://docs.python.org/3.3/library/re.html#re-objects",
    "http://docs.python.org/3.3/library/re.html#regular-expression-syntax",
    "http://docs.python.org/3.3/howto/regex.html#regex-howto",
    "http://docs.python.org/3.3/library/re.html#re.DOTALL",
    "http://docs.python.org/3.3/library/re.html#re.MULTILINE",
    "http://docs.python.org/3.3/library/re.html#re.MULTILINE",
    "http://docs.python.org/3.3/library/re.html#re.MULTILINE",
    "http://docs.python.org/3.3/library/re.html#re.ASCII",
    "http://docs.python.org/3.3/library/re.html#re.LOCALE",
    "http://docs.python.org/3.3/library/re.html#re.A",
    "http://docs.python.org/3.3/library/re.html#re.I",
    "http://docs.python.org/3.3/library/re.html#re.L",
    "http://docs.python.org/3.3/library/re.html#re.M",
    "http://docs.python.org/3.3/library/re.html#re.S",
    "http://docs.python.org/3.3/library/re.html#re.X",
    "http://docs.python.org/3.3/library/re.html#contents-of-module-re",
    "http://docs.python.org/3.3/library/re.html#re.compile",
    "http://docs.python.org/3.3/library/re.html#re.search",
    "http://docs.python.org/3.3/library/re.html#re.match",
    "http://docs.python.org/3.3/library/re.html#re.ASCII",
    "http://docs.python.org/3.3/library/re.html#re.ASCII",
    "http://docs.python.org/3.3/library/re.html#re.ASCII",
    "http://docs.python.org/3.3/library/re.html#re.ASCII",
    "http://docs.python.org/3.3/library/re.html#re.ASCII",
    "http://docs.python.org/3.3/library/re.html#re.ASCII",
    "http://docs.python.org/3.3/library/re.html#re.ASCII",
    "http://docs.python.org/3.3/library/re.html#re.ASCII",
    "http://docs.python.org/3.3/library/re.html#module-contents",
    "http://docs.python.org/3.3/library/re.html#re.compile",
    "http://docs.python.org/3.3/library/re.html#re.match",
    "http://docs.python.org/3.3/library/re.html#re.search",
    "http://docs.python.org/3.3/library/re.html#re.compile",
    "http://docs.python.org/3.3/library/re.html#re.match",
    "http://docs.python.org/3.3/library/re.html#re.search",
    "http://docs.python.org/3.3/library/re.html#re.compile",
    "http://docs.python.org/3.3/library/re.html#re.A",
    "http://docs.python.org/3.3/library/re.html#re.ASCII",
    "http://docs.python.org/3.3/library/re.html#re.DEBUG",
    "http://docs.python.org/3.3/library/re.html#re.I",
    "http://docs.python.org/3.3/library/re.html#re.IGNORECASE",
    "http://docs.python.org/3.3/library/re.html#re.L",
    "http://docs.python.org/3.3/library/re.html#re.LOCALE",
    "http://docs.python.org/3.3/library/re.html#re.M",
    "http://docs.python.org/3.3/library/re.html#re.MULTILINE",
    "http://docs.python.org/3.3/library/re.html#re.S",
    "http://docs.python.org/3.3/library/re.html#re.DOTALL",
    "http://docs.python.org/3.3/library/re.html#re.X",
    "http://docs.python.org/3.3/library/re.html#re.VERBOSE",
    "http://docs.python.org/3.3/library/re.html#re.search",
    "http://docs.python.org/3.3/library/re.html#match-objects",
    "http://docs.python.org/3.3/library/re.html#re.match",
    "http://docs.python.org/3.3/library/re.html#match-objects",
    "http://docs.python.org/3.3/library/re.html#re.MULTILINE",
    "http://docs.python.org/3.3/library/re.html#re.match",
    "http://docs.python.org/3.3/library/re.html#re.search",
    "http://docs.python.org/3.3/library/re.html#search-vs-match",
    "http://docs.python.org/3.3/library/re.html#re.split",
    "http://docs.python.org/3.3/library/re.html#re.findall",
    "http://docs.python.org/3.3/library/re.html#re.finditer",
    "http://docs.python.org/3.3/glossary.html#term-iterator",
    "http://docs.python.org/3.3/library/re.html#match-objects",
    "http://docs.python.org/3.3/library/re.html#re.sub",
    "http://docs.python.org/3.3/library/re.html#re.subn",
    "http://docs.python.org/3.3/library/re.html#re.sub",
    "http://docs.python.org/3.3/library/re.html#re.escape",
    "http://docs.python.org/3.3/library/re.html#re.purge",
    "http://docs.python.org/3.3/library/re.html#re.error",
    "http://docs.python.org/3.3/library/re.html#regular-expression-objects",
    "http://docs.python.org/3.3/library/re.html#re.regex.search",
    "http://docs.python.org/3.3/library/re.html#match-objects",
    "http://docs.python.org/3.3/library/re.html#re.regex.match",
    "http://docs.python.org/3.3/library/re.html#match-objects",
    "http://docs.python.org/3.3/library/re.html#re.regex.search",
    "http://docs.python.org/3.3/library/re.html#re.regex.search",
    "http://docs.python.org/3.3/library/re.html#search-vs-match",
    "http://docs.python.org/3.3/library/re.html#re.regex.split",
    "http://docs.python.org/3.3/library/re.html#re.split",
    "http://docs.python.org/3.3/library/re.html#re.regex.findall",
    "http://docs.python.org/3.3/library/re.html#re.findall",
    "http://docs.python.org/3.3/library/re.html#re.match",
    "http://docs.python.org/3.3/library/re.html#re.regex.finditer",
    "http://docs.python.org/3.3/library/re.html#re.finditer",
    "http://docs.python.org/3.3/library/re.html#re.match",
    "http://docs.python.org/3.3/library/re.html#re.regex.sub",
    "http://docs.python.org/3.3/library/re.html#re.sub",
    "http://docs.python.org/3.3/library/re.html#re.regex.subn",
    "http://docs.python.org/3.3/library/re.html#re.subn",
    "http://docs.python.org/3.3/library/re.html#re.regex.flags",
    "http://docs.python.org/3.3/library/re.html#re.compile",
    "http://docs.python.org/3.3/library/re.html#re.regex.groups",
    "http://docs.python.org/3.3/library/re.html#re.regex.groupindex",
    "http://docs.python.org/3.3/library/re.html#re.regex.pattern",
    "http://docs.python.org/3.3/library/re.html#match-objects",
    "http://docs.python.org/3.3/library/re.html#re.regex.match",
    "http://docs.python.org/3.3/library/re.html#re.regex.search",
    "http://docs.python.org/3.3/library/re.html#re.match.expand",
    "http://docs.python.org/3.3/library/re.html#re.regex.sub",
    "http://docs.python.org/3.3/library/re.html#re.match.group",
    "http://docs.python.org/3.3/library/exceptions.html#IndexError",
    "http://docs.python.org/3.3/library/exceptions.html#IndexError",
    "http://docs.python.org/3.3/library/re.html#re.match.groups",
    "http://docs.python.org/3.3/library/re.html#re.match.groupdict",
    "http://docs.python.org/3.3/library/re.html#re.match.start",
    "http://docs.python.org/3.3/library/re.html#re.match.end",
    "http://docs.python.org/3.3/library/exceptions.html#IndexError",
    "http://docs.python.org/3.3/library/re.html#re.match.span",
    "http://docs.python.org/3.3/library/re.html#re.match.pos",
    "http://docs.python.org/3.3/library/re.html#re.regex.search",
    "http://docs.python.org/3.3/library/re.html#re.regex.match",
    "http://docs.python.org/3.3/library/re.html#re-objects",
    "http://docs.python.org/3.3/library/re.html#re.match.endpos",
    "http://docs.python.org/3.3/library/re.html#re.regex.search",
    "http://docs.python.org/3.3/library/re.html#re.regex.match",
    "http://docs.python.org/3.3/library/re.html#re-objects",
    "http://docs.python.org/3.3/library/re.html#re.match.lastindex",
    "http://docs.python.org/3.3/library/re.html#re.match.lastgroup",
    "http://docs.python.org/3.3/library/re.html#re.match.re",
    "http://docs.python.org/3.3/library/re.html#re.regex.match",
    "http://docs.python.org/3.3/library/re.html#re.regex.search",
    "http://docs.python.org/3.3/library/re.html#re.match.string",
    "http://docs.python.org/3.3/library/re.html#re.regex.match",
    "http://docs.python.org/3.3/library/re.html#re.regex.search",
    "http://docs.python.org/3.3/library/re.html#regular-expression-examples",
    "http://docs.python.org/3.3/library/re.html#checking-for-a-pair",
    "http://docs.python.org/3.3/library/re.html#re.match.group",
    "http://docs.python.org/3.3/library/re.html#simulating-scanf",
    "http://docs.python.org/3.3/library/re.html#search-vs-match",
    "http://docs.python.org/3.3/library/re.html#re.match",
    "http://docs.python.org/3.3/library/re.html#re.search",
    "http://docs.python.org/3.3/library/re.html#re.search",
    "http://docs.python.org/3.3/library/re.html#re.MULTILINE",
    "http://docs.python.org/3.3/library/re.html#re.match",
    "http://docs.python.org/3.3/library/re.html#re.search",
    "http://docs.python.org/3.3/library/re.html#making-a-phonebook",
    "http://docs.python.org/3.3/library/re.html#re.split",
    "http://docs.python.org/3.3/library/re.html#re.split",
    "http://docs.python.org/3.3/library/re.html#text-munging",
    "http://docs.python.org/3.3/library/re.html#re.sub",
    "http://docs.python.org/3.3/library/re.html#re.sub",
    "http://docs.python.org/3.3/library/re.html#finding-all-adverbs",
    "http://docs.python.org/3.3/library/re.html#re.findall",
    "http://docs.python.org/3.3/library/re.html#re.search",
    "http://docs.python.org/3.3/library/re.html#re.findall",
    "http://docs.python.org/3.3/library/re.html#finding-all-adverbs-and-their-positions",
    "http://docs.python.org/3.3/library/re.html#re.finditer",
    "http://docs.python.org/3.3/library/re.html#match-objects",
    "http://docs.python.org/3.3/library/re.html#re.finditer",
    "http://docs.python.org/3.3/library/re.html#raw-string-notation",
    "http://docs.python.org/3.3/library/re.html#writing-a-tokenizer",
    "http://en.wikipedia.org/wiki/Lexical_analysis",
    "http://docs.python.org/3.3/contents.html",
    "http://docs.python.org/3.3/library/re.html#",
    "http://docs.python.org/3.3/library/re.html#regular-expression-syntax",
    "http://docs.python.org/3.3/library/re.html#module-contents",
    "http://docs.python.org/3.3/library/re.html#regular-expression-objects",
    "http://docs.python.org/3.3/library/re.html#match-objects",
    "http://docs.python.org/3.3/library/re.html#regular-expression-examples",
    "http://docs.python.org/3.3/library/re.html#checking-for-a-pair",
    "http://docs.python.org/3.3/library/re.html#simulating-scanf",
    "http://docs.python.org/3.3/library/re.html#search-vs-match",
    "http://docs.python.org/3.3/library/re.html#making-a-phonebook",
    "http://docs.python.org/3.3/library/re.html#text-munging",
    "http://docs.python.org/3.3/library/re.html#finding-all-adverbs",
    "http://docs.python.org/3.3/library/re.html#finding-all-adverbs-and-their-positions",
    "http://docs.python.org/3.3/library/re.html#raw-string-notation",
    "http://docs.python.org/3.3/library/re.html#writing-a-tokenizer",
    "http://docs.python.org/3.3/library/string.html",
    "http://docs.python.org/3.3/library/difflib.html",
    "http://docs.python.org/3.3/bugs.html",
    "http://docs.python.org/3.3/_sources/library/re.txt",
    "http://docs.python.org/3.3/genindex.html",
    "http://docs.python.org/3.3/py-modindex.html",
    "http://docs.python.org/3.3/library/difflib.html",
    "http://docs.python.org/3.3/library/string.html",
    "http://www.python.org/",
    "http://docs.python.org/3.3/index.html",
    "http://docs.python.org/3.3/library/index.html",
    "http://docs.python.org/3.3/library/text.html",
    "http://docs.python.org/3.3/copyright.html",
    "http://www.python.org/psf/donations/",
    "http://docs.python.org/3.3/bugs.html",
    "http://sphinx.pocoo.org/"
  ],
  "texts": [
    {
      "bound": {
        "height": 30,
        "left": 1540,
        "top": 14,
        "width": 34
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "float": "right",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "10px",
        "outline-color": "rgb(102, 102, 102)"
      },
      "element": "li.right:nth-of-type(1)",
      "html": "\n          <a href=\"../genindex.html\" title=\"General Index\" accesskey=\"I\">index</a>",
      "path": "div > ul > li",
      "selector": "div.related:nth-of-type(1) > ul:nth-of-type(1) > li.right:nth-of-type(1)",
      "text": [
        "index"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 1473,
        "top": 14,
        "width": 62
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "float": "right",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "5px",
        "outline-color": "rgb(102, 102, 102)"
      },
      "element": "li.right:nth-of-type(2)",
      "html": "\n          <a href=\"../py-modindex.html\" title=\"Python Module Index\">modules</a> |",
      "path": "div > ul > li",
      "selector": "div.related:nth-of-type(1) > ul:nth-of-type(1) > li.right:nth-of-type(2)",
      "text": [
        "modules",
        " |"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 1430,
        "top": 14,
        "width": 38
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "float": "right",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "5px",
        "outline-color": "rgb(102, 102, 102)"
      },
      "element": "li.right:nth-of-type(3)",
      "html": "\n          <a href=\"difflib.html\" title=\"6.3. difflib — Helpers for computing deltas\" accesskey=\"N\">next</a> |",
      "path": "div > ul > li",
      "selector": "div.related:nth-of-type(1) > ul:nth-of-type(1) > li.right:nth-of-type(3)",
      "text": [
        "next",
        " |"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 1362,
        "top": 14,
        "width": 63
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "float": "right",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "5px",
        "outline-color": "rgb(102, 102, 102)"
      },
      "element": "li.right:nth-of-type(4)",
      "html": "\n          <a href=\"string.html\" title=\"6.1. string — Common string operations\" accesskey=\"P\">previous</a> |",
      "path": "div > ul > li",
      "selector": "div.related:nth-of-type(1) > ul:nth-of-type(1) > li.right:nth-of-type(4)",
      "text": [
        "previous",
        " |"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 16,
        "top": 14,
        "width": 1568
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(102, 102, 102)",
        "padding-left": "10px"
      },
      "element": "ul:nth-of-type(1)",
      "html": "\n        <li class=\"right\" style=\"margin-right: 10px\">\n          <a href=\"../genindex.html\" title=\"General Index\" accesskey=\"I\">index</a></li>\n        <li class=\"right\">\n          <a href=\"../py-modindex.html\" title=\"Python Module Index\">modules</a> |</li>\n        <li class=\"right\">\n          <a href=\"difflib.html\" title=\"6.3. difflib — Helpers for computing deltas\" accesskey=\"N\">next</a> |</li>\n        <li class=\"right\">\n          <a href=\"string.html\" title=\"6.1. string — Common string operations\" accesskey=\"P\">previous</a> |</li>\n        <li><img src=\"../_static/py.png\" alt=\"\" style=\"vertical-align: middle; margin-top: -1px\"></li>\n        <li><a href=\"http://www.python.org/\">Python</a> »</li>\n        <li>\n          <span class=\"version_switcher_placeholder\"><select><option value=\"3.4\">dev (3.4)</option><option value=\"3.3\" selected=\"selected\">3.3.2</option><option value=\"3.2\">3.2</option><option value=\"2.7\">2.7</option><option value=\"2.6\">2.6</option></select></span>\n          <a href=\"../index.html\">Documentation</a> »\n        </li>\n\n          <li><a href=\"index.html\">The Python Standard Library</a> »</li>\n          <li><a href=\"text.html\" accesskey=\"U\">6. Text Processing Services</a> »</li> \n      ",
      "path": "div > ul",
      "selector": "div.related:nth-of-type(1) > ul:nth-of-type(1)",
      "text": [
        "Python",
        " »",
        "Documentation",
        " »\n        ",
        "The Python Standard Library",
        " »",
        "6. Text Processing Services",
        " »"
      ]
    },
    {
      "bound": {
        "height": 57,
        "left": 265,
        "top": 69,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "32px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "9px",
        "padding-top": "9px"
      },
      "element": "h1:nth-of-type(1)",
      "html": "6.2. <a class=\"reference internal\" href=\"#module-re\" title=\"re: Regular expression operations.\"><tt class=\"xref py py-mod docutils literal\"><span class=\"pre\">re</span></tt></a> — Regular expression operations<a class=\"headerlink\" href=\"#module-re\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > h1",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > h1:nth-of-type(1)",
      "text": [
        "6.2. ",
        "re",
        " — Regular expression operations",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 142,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "This module provides regular expression matching operations similar to\nthose found in Perl.",
      "path": "div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "This module provides regular expression matching operations similar to\nthose found in Perl."
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 265,
        "top": 180,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "Both patterns and strings to be searched can be Unicode strings as well as\n8-bit strings. However, Unicode strings and 8-bit strings cannot be mixed:\nthat is, you cannot match an Unicode string with a byte pattern or\nvice-versa; similarly, when asking for a substitution, the replacement\nstring must be of the same type as both the pattern and the search string.",
      "path": "div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > p:nth-of-type(2)",
      "text": [
        "Both patterns and strings to be searched can be Unicode strings as well as\n8-bit strings. However, Unicode strings and 8-bit strings cannot be mixed:\nthat is, you cannot match an Unicode string with a byte pattern or\nvice-versa; similarly, when asking for a substitution, the replacement\nstring must be of the same type as both the pattern and the search string."
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 265,
        "top": 262,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(3)",
      "html": "Regular expressions use the backslash character (<tt class=\"docutils literal\"><span class=\"pre\">'\\'</span></tt>) to indicate\nspecial forms or to allow special characters to be used without invoking\ntheir special meaning.  This collides with Python’s usage of the same\ncharacter for the same purpose in string literals; for example, to match\na literal backslash, one might have to write <tt class=\"docutils literal\"><span class=\"pre\">'\\\\\\\\'</span></tt> as the pattern\nstring, because the regular expression must be <tt class=\"docutils literal\"><span class=\"pre\">\\\\</span></tt>, and each\nbackslash must be expressed as <tt class=\"docutils literal\"><span class=\"pre\">\\\\</span></tt> inside a regular Python string\nliteral.",
      "path": "div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > p:nth-of-type(3)",
      "text": [
        "Regular expressions use the backslash character (",
        "'\\'",
        ") to indicate\nspecial forms or to allow special characters to be used without invoking\ntheir special meaning.  This collides with Python’s usage of the same\ncharacter for the same purpose in string literals; for example, to match\na literal backslash, one might have to write ",
        "'\\\\\\\\'",
        " as the pattern\nstring, because the regular expression must be ",
        "\\\\",
        ", and each\nbackslash must be expressed as ",
        "\\\\",
        " inside a regular Python string\nliteral."
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 265,
        "top": 344,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(4)",
      "html": "The solution is to use Python’s raw string notation for regular expression\npatterns; backslashes are not handled in any special way in a string literal\nprefixed with <tt class=\"docutils literal\"><span class=\"pre\">'r'</span></tt>.  So <tt class=\"docutils literal\"><span class=\"pre\">r\"\\n\"</span></tt> is a two-character string containing\n<tt class=\"docutils literal\"><span class=\"pre\">'\\'</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">'n'</span></tt>, while <tt class=\"docutils literal\"><span class=\"pre\">\"\\n\"</span></tt> is a one-character string containing a\nnewline.  Usually patterns will be expressed in Python code using this raw\nstring notation.",
      "path": "div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > p:nth-of-type(4)",
      "text": [
        "The solution is to use Python’s raw string notation for regular expression\npatterns; backslashes are not handled in any special way in a string literal\nprefixed with ",
        "'r'",
        ".  So ",
        "r\"\\n\"",
        " is a two-character string containing\n",
        "'\\'",
        " and ",
        "'n'",
        ", while ",
        "\"\\n\"",
        " is a one-character string containing a\nnewline.  Usually patterns will be expressed in Python code using this raw\nstring notation."
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 426,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(5)",
      "html": "It is important to note that most regular expression operations are available as\nmodule-level functions and methods on\n<a class=\"reference internal\" href=\"#re-objects\"><em>compiled regular expressions</em></a>.  The functions are shortcuts\nthat don’t require you to compile a regex object first, but miss some\nfine-tuning parameters.",
      "path": "div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > p:nth-of-type(5)",
      "text": [
        "It is important to note that most regular expression operations are available as\nmodule-level functions and methods on\n",
        "compiled regular expressions",
        ".  The functions are shortcuts\nthat don’t require you to compile a regex object first, but miss some\nfine-tuning parameters."
      ]
    },
    {
      "bound": {
        "height": 126,
        "left": 265,
        "top": 486,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(255, 255, 204)",
        "border-bottom-color": "rgb(221, 221, 102)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(221, 221, 102)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 102)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 102)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "margin-bottom": "10px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "10px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "7px",
        "padding-left": "7px",
        "padding-right": "7px",
        "padding-top": "7px"
      },
      "element": "div.admonition.admonition-see-also.seealso:nth-of-type(1)",
      "html": "\n<p class=\"first admonition-title\">See also</p>\n<dl class=\"last docutils\">\n<dt>Mastering Regular Expressions</dt>\n<dd>Book on regular expressions by Jeffrey Friedl, published by O’Reilly.  The\nsecond edition of the book no longer covers Python at all, but the first\nedition covered writing good regular expression patterns in great detail.</dd>\n</dl>\n",
      "path": "div > div > div > div > div > div",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div.admonition.admonition-see-also.seealso:nth-of-type(1)",
      "text": [
        "See also"
      ]
    },
    {
      "bound": {
        "height": 19,
        "left": 273,
        "top": 532,
        "width": 1303
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "font-weight": "bold",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt:nth-of-type(1)",
      "html": "Mastering Regular Expressions",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div.admonition.admonition-see-also.seealso:nth-of-type(1) > dl.docutils.last:nth-of-type(1) > dt:nth-of-type(1)",
      "text": [
        "Mastering Regular Expressions"
      ]
    },
    {
      "bound": {
        "height": 40,
        "left": 303,
        "top": 554,
        "width": 1273
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-bottom": "10px",
        "margin-left": "30px",
        "margin-right": "0px",
        "margin-top": "3px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dd:nth-of-type(1)",
      "html": "Book on regular expressions by Jeffrey Friedl, published by O’Reilly.  The\nsecond edition of the book no longer covers Python at all, but the first\nedition covered writing good regular expression patterns in great detail.",
      "path": "div > div > div > div > div > div > dl > dd",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div.admonition.admonition-see-also.seealso:nth-of-type(1) > dl.docutils.last:nth-of-type(1) > dd:nth-of-type(1)",
      "text": [
        "Book on regular expressions by Jeffrey Friedl, published by O’Reilly.  The\nsecond edition of the book no longer covers Python at all, but the first\nedition covered writing good regular expression patterns in great detail."
      ]
    },
    {
      "bound": {
        "height": 46,
        "left": 265,
        "top": 622,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "26px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "7px",
        "padding-top": "7px"
      },
      "element": "h2:nth-of-type(1)",
      "html": "6.2.1. Regular Expression Syntax<a class=\"headerlink\" href=\"#regular-expression-syntax\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > div > h2",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > h2:nth-of-type(1)",
      "text": [
        "6.2.1. Regular Expression Syntax",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 684,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "A regular expression (or RE) specifies a set of strings that matches it; the\nfunctions in this module let you check if a particular string matches a given\nregular expression (or if a given regular expression matches a particular\nstring, which comes down to the same thing).",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > p:nth-of-type(1)",
      "text": [
        "A regular expression (or RE) specifies a set of strings that matches it; the\nfunctions in this module let you check if a particular string matches a given\nregular expression (or if a given regular expression matches a particular\nstring, which comes down to the same thing)."
      ]
    },
    {
      "bound": {
        "height": 88,
        "left": 265,
        "top": 744,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "Regular expressions can be concatenated to form new regular expressions; if <em>A</em>\nand <em>B</em> are both regular expressions, then <em>AB</em> is also a regular expression.\nIn general, if a string <em>p</em> matches <em>A</em> and another string <em>q</em> matches <em>B</em>, the\nstring <em>pq</em> will match AB.  This holds unless <em>A</em> or <em>B</em> contain low precedence\noperations; boundary conditions between <em>A</em> and <em>B</em>; or have numbered group\nreferences.  Thus, complex expressions can easily be constructed from simpler\nprimitive expressions like the ones described here.  For details of the theory\nand implementation of regular expressions, consult the Friedl book referenced\nabove, or almost any textbook about compiler construction.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > p:nth-of-type(2)",
      "text": [
        "Regular expressions can be concatenated to form new regular expressions; if ",
        "A",
        "\nand ",
        "B",
        " are both regular expressions, then ",
        "AB",
        " is also a regular expression.\nIn general, if a string ",
        "p",
        " matches ",
        "A",
        " and another string ",
        "q",
        " matches ",
        "B",
        ", the\nstring ",
        "pq",
        " will match AB.  This holds unless ",
        "A",
        " or ",
        "B",
        " contain low precedence\noperations; boundary conditions between ",
        "A",
        " and ",
        "B",
        "; or have numbered group\nreferences.  Thus, complex expressions can easily be constructed from simpler\nprimitive expressions like the ones described here.  For details of the theory\nand implementation of regular expressions, consult the Friedl book referenced\nabove, or almost any textbook about compiler construction."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 848,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(3)",
      "html": "A brief explanation of the format of regular expressions follows.  For further\ninformation and a gentler presentation, consult the <a class=\"reference internal\" href=\"../howto/regex.html#regex-howto\"><em>Regular Expression HOWTO</em></a>.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > p:nth-of-type(3)",
      "text": [
        "A brief explanation of the format of regular expressions follows.  For further\ninformation and a gentler presentation, consult the ",
        "Regular Expression HOWTO",
        "."
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 265,
        "top": 886,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(4)",
      "html": "Regular expressions can contain both special and ordinary characters. Most\nordinary characters, like <tt class=\"docutils literal\"><span class=\"pre\">'A'</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">'a'</span></tt>, or <tt class=\"docutils literal\"><span class=\"pre\">'0'</span></tt>, are the simplest regular\nexpressions; they simply match themselves.  You can concatenate ordinary\ncharacters, so <tt class=\"docutils literal\"><span class=\"pre\">last</span></tt> matches the string <tt class=\"docutils literal\"><span class=\"pre\">'last'</span></tt>.  (In the rest of this\nsection, we’ll write RE’s in <tt class=\"docutils literal\"><span class=\"pre\">this</span> <span class=\"pre\">special</span> <span class=\"pre\">style</span></tt>, usually without quotes, and\nstrings to be matched <tt class=\"docutils literal\"><span class=\"pre\">'in</span> <span class=\"pre\">single</span> <span class=\"pre\">quotes'</span></tt>.)",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > p:nth-of-type(4)",
      "text": [
        "Regular expressions can contain both special and ordinary characters. Most\nordinary characters, like ",
        "'A'",
        ", ",
        "'a'",
        ", or ",
        "'0'",
        ", are the simplest regular\nexpressions; they simply match themselves.  You can concatenate ordinary\ncharacters, so ",
        "last",
        " matches the string ",
        "'last'",
        ".  (In the rest of this\nsection, we’ll write RE’s in ",
        "this",
        "special",
        "style",
        ", usually without quotes, and\nstrings to be matched ",
        "'in",
        "single",
        "quotes'",
        ".)"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 968,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(5)",
      "html": "Some characters, like <tt class=\"docutils literal\"><span class=\"pre\">'|'</span></tt> or <tt class=\"docutils literal\"><span class=\"pre\">'('</span></tt>, are special. Special\ncharacters either stand for classes of ordinary characters, or affect\nhow the regular expressions around them are interpreted. Regular\nexpression pattern strings may not contain null bytes, but can specify\nthe null byte using a <tt class=\"docutils literal\"><span class=\"pre\">\\number</span></tt> notation such as <tt class=\"docutils literal\"><span class=\"pre\">'\\x00'</span></tt>.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > p:nth-of-type(5)",
      "text": [
        "Some characters, like ",
        "'|'",
        " or ",
        "'('",
        ", are special. Special\ncharacters either stand for classes of ordinary characters, or affect\nhow the regular expressions around them are interpreted. Regular\nexpression pattern strings may not contain null bytes, but can specify\nthe null byte using a ",
        "\\number",
        " notation such as ",
        "'\\x00'",
        "."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 1028,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(6)",
      "html": "The special characters are:",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > p:nth-of-type(6)",
      "text": [
        "The special characters are:"
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 265,
        "top": 1066,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt:nth-of-type(1)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">'.'</span></tt>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dt:nth-of-type(1)",
      "text": [
        "'.'"
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 295,
        "top": 1089,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-bottom": "10px",
        "margin-left": "30px",
        "margin-right": "0px",
        "margin-top": "3px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dd:nth-of-type(1)",
      "html": "(Dot.)  In the default mode, this matches any character except a newline.  If\nthe <a class=\"reference internal\" href=\"#re.DOTALL\" title=\"re.DOTALL\"><tt class=\"xref py py-const docutils literal\"><span class=\"pre\">DOTALL</span></tt></a> flag has been specified, this matches any character\nincluding a newline.",
      "path": "div > div > div > div > div > div > dl > dd",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dd:nth-of-type(1)",
      "text": [
        "(Dot.)  In the default mode, this matches any character except a newline.  If\nthe ",
        "DOTALL",
        " flag has been specified, this matches any character\nincluding a newline."
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 265,
        "top": 1119,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt:nth-of-type(2)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">'^'</span></tt>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dt:nth-of-type(2)",
      "text": [
        "'^'"
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 295,
        "top": 1142,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-bottom": "10px",
        "margin-left": "30px",
        "margin-right": "0px",
        "margin-top": "3px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dd:nth-of-type(2)",
      "html": "(Caret.)  Matches the start of the string, and in <a class=\"reference internal\" href=\"#re.MULTILINE\" title=\"re.MULTILINE\"><tt class=\"xref py py-const docutils literal\"><span class=\"pre\">MULTILINE</span></tt></a> mode also\nmatches immediately after each newline.",
      "path": "div > div > div > div > div > div > dl > dd",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dd:nth-of-type(2)",
      "text": [
        "(Caret.)  Matches the start of the string, and in ",
        "MULTILINE",
        " mode also\nmatches immediately after each newline."
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 265,
        "top": 1172,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt:nth-of-type(3)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">'$'</span></tt>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dt:nth-of-type(3)",
      "text": [
        "'$'"
      ]
    },
    {
      "bound": {
        "height": 60,
        "left": 295,
        "top": 1195,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-bottom": "10px",
        "margin-left": "30px",
        "margin-right": "0px",
        "margin-top": "3px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dd:nth-of-type(3)",
      "html": "Matches the end of the string or just before the newline at the end of the\nstring, and in <a class=\"reference internal\" href=\"#re.MULTILINE\" title=\"re.MULTILINE\"><tt class=\"xref py py-const docutils literal\"><span class=\"pre\">MULTILINE</span></tt></a> mode also matches before a newline.  <tt class=\"docutils literal\"><span class=\"pre\">foo</span></tt>\nmatches both ‘foo’ and ‘foobar’, while the regular expression <tt class=\"docutils literal\"><span class=\"pre\">foo$</span></tt> matches\nonly ‘foo’.  More interestingly, searching for <tt class=\"docutils literal\"><span class=\"pre\">foo.$</span></tt> in <tt class=\"docutils literal\"><span class=\"pre\">'foo1\\nfoo2\\n'</span></tt>\nmatches ‘foo2’ normally, but ‘foo1’ in <a class=\"reference internal\" href=\"#re.MULTILINE\" title=\"re.MULTILINE\"><tt class=\"xref py py-const docutils literal\"><span class=\"pre\">MULTILINE</span></tt></a> mode; searching for\na single <tt class=\"docutils literal\"><span class=\"pre\">$</span></tt> in <tt class=\"docutils literal\"><span class=\"pre\">'foo\\n'</span></tt> will find two (empty) matches: one just before\nthe newline, and one at the end of the string.",
      "path": "div > div > div > div > div > div > dl > dd",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dd:nth-of-type(3)",
      "text": [
        "Matches the end of the string or just before the newline at the end of the\nstring, and in ",
        "MULTILINE",
        " mode also matches before a newline.  ",
        "foo",
        "\nmatches both ‘foo’ and ‘foobar’, while the regular expression ",
        "foo$",
        " matches\nonly ‘foo’.  More interestingly, searching for ",
        "foo.$",
        " in ",
        "'foo1\\nfoo2\\n'",
        "\nmatches ‘foo2’ normally, but ‘foo1’ in ",
        "MULTILINE",
        " mode; searching for\na single ",
        "$",
        " in ",
        "'foo\\n'",
        " will find two (empty) matches: one just before\nthe newline, and one at the end of the string."
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 265,
        "top": 1265,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt:nth-of-type(4)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">'*'</span></tt>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dt:nth-of-type(4)",
      "text": [
        "'*'"
      ]
    },
    {
      "bound": {
        "height": 40,
        "left": 295,
        "top": 1288,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-bottom": "10px",
        "margin-left": "30px",
        "margin-right": "0px",
        "margin-top": "3px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dd:nth-of-type(4)",
      "html": "Causes the resulting RE to match 0 or more repetitions of the preceding RE, as\nmany repetitions as are possible.  <tt class=\"docutils literal\"><span class=\"pre\">ab*</span></tt> will match ‘a’, ‘ab’, or ‘a’ followed\nby any number of ‘b’s.",
      "path": "div > div > div > div > div > div > dl > dd",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dd:nth-of-type(4)",
      "text": [
        "Causes the resulting RE to match 0 or more repetitions of the preceding RE, as\nmany repetitions as are possible.  ",
        "ab*",
        " will match ‘a’, ‘ab’, or ‘a’ followed\nby any number of ‘b’s."
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 265,
        "top": 1338,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt:nth-of-type(5)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">'+'</span></tt>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dt:nth-of-type(5)",
      "text": [
        "'+'"
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 295,
        "top": 1361,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-bottom": "10px",
        "margin-left": "30px",
        "margin-right": "0px",
        "margin-top": "3px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dd:nth-of-type(5)",
      "html": "Causes the resulting RE to match 1 or more repetitions of the preceding RE.\n<tt class=\"docutils literal\"><span class=\"pre\">ab+</span></tt> will match ‘a’ followed by any non-zero number of ‘b’s; it will not\nmatch just ‘a’.",
      "path": "div > div > div > div > div > div > dl > dd",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dd:nth-of-type(5)",
      "text": [
        "Causes the resulting RE to match 1 or more repetitions of the preceding RE.\n",
        "ab+",
        " will match ‘a’ followed by any non-zero number of ‘b’s; it will not\nmatch just ‘a’."
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 265,
        "top": 1391,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt:nth-of-type(6)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">'?'</span></tt>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dt:nth-of-type(6)",
      "text": [
        "'?'"
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 295,
        "top": 1414,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-bottom": "10px",
        "margin-left": "30px",
        "margin-right": "0px",
        "margin-top": "3px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dd:nth-of-type(6)",
      "html": "Causes the resulting RE to match 0 or 1 repetitions of the preceding RE.\n<tt class=\"docutils literal\"><span class=\"pre\">ab?</span></tt> will match either ‘a’ or ‘ab’.",
      "path": "div > div > div > div > div > div > dl > dd",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dd:nth-of-type(6)",
      "text": [
        "Causes the resulting RE to match 0 or 1 repetitions of the preceding RE.\n",
        "ab?",
        " will match either ‘a’ or ‘ab’."
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 265,
        "top": 1444,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt:nth-of-type(7)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">*?</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">+?</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">??</span></tt>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dt:nth-of-type(7)",
      "text": [
        "*?",
        ", ",
        "+?",
        ", ",
        "??"
      ]
    },
    {
      "bound": {
        "height": 60,
        "left": 295,
        "top": 1467,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-bottom": "10px",
        "margin-left": "30px",
        "margin-right": "0px",
        "margin-top": "3px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dd:nth-of-type(7)",
      "html": "The <tt class=\"docutils literal\"><span class=\"pre\">'*'</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">'+'</span></tt>, and <tt class=\"docutils literal\"><span class=\"pre\">'?'</span></tt> qualifiers are all <em class=\"dfn\">greedy</em>; they match\nas much text as possible.  Sometimes this behaviour isn’t desired; if the RE\n<tt class=\"docutils literal\"><span class=\"pre\">&lt;.*&gt;</span></tt> is matched against <tt class=\"docutils literal\"><span class=\"pre\">'&lt;H1&gt;title&lt;/H1&gt;'</span></tt>, it will match the entire\nstring, and not just <tt class=\"docutils literal\"><span class=\"pre\">'&lt;H1&gt;'</span></tt>.  Adding <tt class=\"docutils literal\"><span class=\"pre\">'?'</span></tt> after the qualifier makes it\nperform the match in <em class=\"dfn\">non-greedy</em> or <em class=\"dfn\">minimal</em> fashion; as <em>few</em>\ncharacters as possible will be matched.  Using <tt class=\"docutils literal\"><span class=\"pre\">.*?</span></tt> in the previous\nexpression will match only <tt class=\"docutils literal\"><span class=\"pre\">'&lt;H1&gt;'</span></tt>.",
      "path": "div > div > div > div > div > div > dl > dd",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dd:nth-of-type(7)",
      "text": [
        "The ",
        "'*'",
        ", ",
        "'+'",
        ", and ",
        "'?'",
        " qualifiers are all ",
        "greedy",
        "; they match\nas much text as possible.  Sometimes this behaviour isn’t desired; if the RE\n",
        "<.*>",
        " is matched against ",
        "'<H1>title</H1>'",
        ", it will match the entire\nstring, and not just ",
        "'<H1>'",
        ".  Adding ",
        "'?'",
        " after the qualifier makes it\nperform the match in ",
        "non-greedy",
        " or ",
        "minimal",
        " fashion; as ",
        "few",
        "\ncharacters as possible will be matched.  Using ",
        ".*?",
        " in the previous\nexpression will match only ",
        "'<H1>'",
        "."
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 265,
        "top": 1537,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt:nth-of-type(8)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">{m}</span></tt>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dt:nth-of-type(8)",
      "text": [
        "{m}"
      ]
    },
    {
      "bound": {
        "height": 40,
        "left": 295,
        "top": 1560,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-bottom": "10px",
        "margin-left": "30px",
        "margin-right": "0px",
        "margin-top": "3px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dd:nth-of-type(8)",
      "html": "Specifies that exactly <em>m</em> copies of the previous RE should be matched; fewer\nmatches cause the entire RE not to match.  For example, <tt class=\"docutils literal\"><span class=\"pre\">a{6}</span></tt> will match\nexactly six <tt class=\"docutils literal\"><span class=\"pre\">'a'</span></tt> characters, but not five.",
      "path": "div > div > div > div > div > div > dl > dd",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dd:nth-of-type(8)",
      "text": [
        "Specifies that exactly ",
        "m",
        " copies of the previous RE should be matched; fewer\nmatches cause the entire RE not to match.  For example, ",
        "a{6}",
        " will match\nexactly six ",
        "'a'",
        " characters, but not five."
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 265,
        "top": 1610,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt:nth-of-type(9)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">{m,n}</span></tt>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dt:nth-of-type(9)",
      "text": [
        "{m,n}"
      ]
    },
    {
      "bound": {
        "height": 60,
        "left": 295,
        "top": 1633,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-bottom": "10px",
        "margin-left": "30px",
        "margin-right": "0px",
        "margin-top": "3px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dd:nth-of-type(9)",
      "html": "Causes the resulting RE to match from <em>m</em> to <em>n</em> repetitions of the preceding\nRE, attempting to match as many repetitions as possible.  For example,\n<tt class=\"docutils literal\"><span class=\"pre\">a{3,5}</span></tt> will match from 3 to 5 <tt class=\"docutils literal\"><span class=\"pre\">'a'</span></tt> characters.  Omitting <em>m</em> specifies a\nlower bound of zero,  and omitting <em>n</em> specifies an infinite upper bound.  As an\nexample, <tt class=\"docutils literal\"><span class=\"pre\">a{4,}b</span></tt> will match <tt class=\"docutils literal\"><span class=\"pre\">aaaab</span></tt> or a thousand <tt class=\"docutils literal\"><span class=\"pre\">'a'</span></tt> characters\nfollowed by a <tt class=\"docutils literal\"><span class=\"pre\">b</span></tt>, but not <tt class=\"docutils literal\"><span class=\"pre\">aaab</span></tt>. The comma may not be omitted or the\nmodifier would be confused with the previously described form.",
      "path": "div > div > div > div > div > div > dl > dd",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dd:nth-of-type(9)",
      "text": [
        "Causes the resulting RE to match from ",
        "m",
        " to ",
        "n",
        " repetitions of the preceding\nRE, attempting to match as many repetitions as possible.  For example,\n",
        "a{3,5}",
        " will match from 3 to 5 ",
        "'a'",
        " characters.  Omitting ",
        "m",
        " specifies a\nlower bound of zero,  and omitting ",
        "n",
        " specifies an infinite upper bound.  As an\nexample, ",
        "a{4,}b",
        " will match ",
        "aaaab",
        " or a thousand ",
        "'a'",
        " characters\nfollowed by a ",
        "b",
        ", but not ",
        "aaab",
        ". The comma may not be omitted or the\nmodifier would be confused with the previously described form."
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 265,
        "top": 1703,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt:nth-of-type(10)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">{m,n}?</span></tt>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dt:nth-of-type(10)",
      "text": [
        "{m,n}?"
      ]
    },
    {
      "bound": {
        "height": 40,
        "left": 295,
        "top": 1726,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-bottom": "10px",
        "margin-left": "30px",
        "margin-right": "0px",
        "margin-top": "3px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dd:nth-of-type(10)",
      "html": "Causes the resulting RE to match from <em>m</em> to <em>n</em> repetitions of the preceding\nRE, attempting to match as <em>few</em> repetitions as possible.  This is the\nnon-greedy version of the previous qualifier.  For example, on the\n6-character string <tt class=\"docutils literal\"><span class=\"pre\">'aaaaaa'</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">a{3,5}</span></tt> will match 5 <tt class=\"docutils literal\"><span class=\"pre\">'a'</span></tt> characters,\nwhile <tt class=\"docutils literal\"><span class=\"pre\">a{3,5}?</span></tt> will only match 3 characters.",
      "path": "div > div > div > div > div > div > dl > dd",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dd:nth-of-type(10)",
      "text": [
        "Causes the resulting RE to match from ",
        "m",
        " to ",
        "n",
        " repetitions of the preceding\nRE, attempting to match as ",
        "few",
        " repetitions as possible.  This is the\nnon-greedy version of the previous qualifier.  For example, on the\n6-character string ",
        "'aaaaaa'",
        ", ",
        "a{3,5}",
        " will match 5 ",
        "'a'",
        " characters,\nwhile ",
        "a{3,5}?",
        " will only match 3 characters."
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 265,
        "top": 1776,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt:nth-of-type(11)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">'\\'</span></tt>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dt:nth-of-type(11)",
      "text": [
        "'\\'"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 1799,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p.first:nth-of-type(1)",
      "html": "Either escapes special characters (permitting you to match characters like\n<tt class=\"docutils literal\"><span class=\"pre\">'*'</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">'?'</span></tt>, and so forth), or signals a special sequence; special\nsequences are discussed below.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dd:nth-of-type(11) > p.first:nth-of-type(1)",
      "text": [
        "Either escapes special characters (permitting you to match characters like\n",
        "'*'",
        ", ",
        "'?'",
        ", and so forth), or signals a special sequence; special\nsequences are discussed below."
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 295,
        "top": 1837,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p.last:nth-of-type(2)",
      "html": "If you’re not using a raw string to express the pattern, remember that Python\nalso uses the backslash as an escape sequence in string literals; if the escape\nsequence isn’t recognized by Python’s parser, the backslash and subsequent\ncharacter are included in the resulting string.  However, if Python would\nrecognize the resulting sequence, the backslash should be repeated twice.  This\nis complicated and hard to understand, so it’s highly recommended that you use\nraw strings for all but the simplest expressions.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dd:nth-of-type(11) > p.last:nth-of-type(2)",
      "text": [
        "If you’re not using a raw string to express the pattern, remember that Python\nalso uses the backslash as an escape sequence in string literals; if the escape\nsequence isn’t recognized by Python’s parser, the backslash and subsequent\ncharacter are included in the resulting string.  However, if Python would\nrecognize the resulting sequence, the backslash should be repeated twice.  This\nis complicated and hard to understand, so it’s highly recommended that you use\nraw strings for all but the simplest expressions."
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 265,
        "top": 1919,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt:nth-of-type(12)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">[]</span></tt>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dt:nth-of-type(12)",
      "text": [
        "[]"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 1942,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p.first:nth-of-type(1)",
      "html": "Used to indicate a set of characters.  In a set:",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dd:nth-of-type(12) > p.first:nth-of-type(1)",
      "text": [
        "Used to indicate a set of characters.  In a set:"
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 335,
        "top": 1980,
        "width": 1249
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "display": "list-item",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "li:nth-of-type(1)",
      "html": "Characters can be listed individually, e.g. <tt class=\"docutils literal\"><span class=\"pre\">[amk]</span></tt> will match <tt class=\"docutils literal\"><span class=\"pre\">'a'</span></tt>,\n<tt class=\"docutils literal\"><span class=\"pre\">'m'</span></tt>, or <tt class=\"docutils literal\"><span class=\"pre\">'k'</span></tt>.",
      "path": "div > div > div > div > div > div > dl > dd > ul > li",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dd:nth-of-type(12) > ul.last.simple:nth-of-type(1) > li:nth-of-type(1)",
      "text": [
        "Characters can be listed individually, e.g. ",
        "[amk]",
        " will match ",
        "'a'",
        ",\n",
        "'m'",
        ", or ",
        "'k'",
        "."
      ]
    },
    {
      "bound": {
        "height": 60,
        "left": 335,
        "top": 2000,
        "width": 1249
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "display": "list-item",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "li:nth-of-type(2)",
      "html": "Ranges of characters can be indicated by giving two characters and separating\nthem by a <tt class=\"docutils literal\"><span class=\"pre\">'-'</span></tt>, for example <tt class=\"docutils literal\"><span class=\"pre\">[a-z]</span></tt> will match any lowercase ASCII letter,\n<tt class=\"docutils literal\"><span class=\"pre\">[0-5][0-9]</span></tt> will match all the two-digits numbers from <tt class=\"docutils literal\"><span class=\"pre\">00</span></tt> to <tt class=\"docutils literal\"><span class=\"pre\">59</span></tt>, and\n<tt class=\"docutils literal\"><span class=\"pre\">[0-9A-Fa-f]</span></tt> will match any hexadecimal digit.  If <tt class=\"docutils literal\"><span class=\"pre\">-</span></tt> is escaped (e.g.\n<tt class=\"docutils literal\"><span class=\"pre\">[a\\-z]</span></tt>) or if it’s placed as the first or last character (e.g. <tt class=\"docutils literal\"><span class=\"pre\">[a-]</span></tt>),\nit will match a literal <tt class=\"docutils literal\"><span class=\"pre\">'-'</span></tt>.",
      "path": "div > div > div > div > div > div > dl > dd > ul > li",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dd:nth-of-type(12) > ul.last.simple:nth-of-type(1) > li:nth-of-type(2)",
      "text": [
        "Ranges of characters can be indicated by giving two characters and separating\nthem by a ",
        "'-'",
        ", for example ",
        "[a-z]",
        " will match any lowercase ASCII letter,\n",
        "[0-5][0-9]",
        " will match all the two-digits numbers from ",
        "00",
        " to ",
        "59",
        ", and\n",
        "[0-9A-Fa-f]",
        " will match any hexadecimal digit.  If ",
        "-",
        " is escaped (e.g.\n",
        "[a\\-z]",
        ") or if it’s placed as the first or last character (e.g. ",
        "[a-]",
        "),\nit will match a literal ",
        "'-'",
        "."
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 335,
        "top": 2060,
        "width": 1249
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "display": "list-item",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "li:nth-of-type(3)",
      "html": "Special characters lose their special meaning inside sets.  For example,\n<tt class=\"docutils literal\"><span class=\"pre\">[(+*)]</span></tt> will match any of the literal characters <tt class=\"docutils literal\"><span class=\"pre\">'('</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">'+'</span></tt>,\n<tt class=\"docutils literal\"><span class=\"pre\">'*'</span></tt>, or <tt class=\"docutils literal\"><span class=\"pre\">')'</span></tt>.",
      "path": "div > div > div > div > div > div > dl > dd > ul > li",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dd:nth-of-type(12) > ul.last.simple:nth-of-type(1) > li:nth-of-type(3)",
      "text": [
        "Special characters lose their special meaning inside sets.  For example,\n",
        "[(+*)]",
        " will match any of the literal characters ",
        "'('",
        ", ",
        "'+'",
        ",\n",
        "'*'",
        ", or ",
        "')'",
        "."
      ]
    },
    {
      "bound": {
        "height": 40,
        "left": 335,
        "top": 2080,
        "width": 1249
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "display": "list-item",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "li:nth-of-type(4)",
      "html": "Character classes such as <tt class=\"docutils literal\"><span class=\"pre\">\\w</span></tt> or <tt class=\"docutils literal\"><span class=\"pre\">\\S</span></tt> (defined below) are also accepted\ninside a set, although the characters they match depends on whether\n<a class=\"reference internal\" href=\"#re.ASCII\" title=\"re.ASCII\"><tt class=\"xref py py-const docutils literal\"><span class=\"pre\">ASCII</span></tt></a> or <a class=\"reference internal\" href=\"#re.LOCALE\" title=\"re.LOCALE\"><tt class=\"xref py py-const docutils literal\"><span class=\"pre\">LOCALE</span></tt></a> mode is in force.",
      "path": "div > div > div > div > div > div > dl > dd > ul > li",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dd:nth-of-type(12) > ul.last.simple:nth-of-type(1) > li:nth-of-type(4)",
      "text": [
        "Character classes such as ",
        "\\w",
        " or ",
        "\\S",
        " (defined below) are also accepted\ninside a set, although the characters they match depends on whether\n",
        "ASCII",
        " or ",
        "LOCALE",
        " mode is in force."
      ]
    },
    {
      "bound": {
        "height": 60,
        "left": 335,
        "top": 2120,
        "width": 1249
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "display": "list-item",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "li:nth-of-type(5)",
      "html": "Characters that are not within a range can be matched by <em class=\"dfn\">complementing</em>\nthe set.  If the first character of the set is <tt class=\"docutils literal\"><span class=\"pre\">'^'</span></tt>, all the characters\nthat are <em>not</em> in the set will be matched.  For example, <tt class=\"docutils literal\"><span class=\"pre\">[^5]</span></tt> will match\nany character except <tt class=\"docutils literal\"><span class=\"pre\">'5'</span></tt>, and <tt class=\"docutils literal\"><span class=\"pre\">[^^]</span></tt> will match any character except\n<tt class=\"docutils literal\"><span class=\"pre\">'^'</span></tt>.  <tt class=\"docutils literal\"><span class=\"pre\">^</span></tt> has no special meaning if it’s not the first character in\nthe set.",
      "path": "div > div > div > div > div > div > dl > dd > ul > li",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dd:nth-of-type(12) > ul.last.simple:nth-of-type(1) > li:nth-of-type(5)",
      "text": [
        "Characters that are not within a range can be matched by ",
        "complementing",
        "\nthe set.  If the first character of the set is ",
        "'^'",
        ", all the characters\nthat are ",
        "not",
        " in the set will be matched.  For example, ",
        "[^5]",
        " will match\nany character except ",
        "'5'",
        ", and ",
        "[^^]",
        " will match any character except\n",
        "'^'",
        ".  ",
        "^",
        " has no special meaning if it’s not the first character in\nthe set."
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 335,
        "top": 2180,
        "width": 1249
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "display": "list-item",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "li:nth-of-type(6)",
      "html": "To match a literal <tt class=\"docutils literal\"><span class=\"pre\">']'</span></tt> inside a set, precede it with a backslash, or\nplace it at the beginning of the set.  For example, both <tt class=\"docutils literal\"><span class=\"pre\">[()[\\]{}]</span></tt> and\n<tt class=\"docutils literal\"><span class=\"pre\">[]()[{}]</span></tt> will both match a parenthesis.",
      "path": "div > div > div > div > div > div > dl > dd > ul > li",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dd:nth-of-type(12) > ul.last.simple:nth-of-type(1) > li:nth-of-type(6)",
      "text": [
        "To match a literal ",
        "']'",
        " inside a set, precede it with a backslash, or\nplace it at the beginning of the set.  For example, both ",
        "[()[\\]{}]",
        " and\n",
        "[]()[{}]",
        " will both match a parenthesis."
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 265,
        "top": 2210,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt:nth-of-type(13)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">'|'</span></tt>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dt:nth-of-type(13)",
      "text": [
        "'|'"
      ]
    },
    {
      "bound": {
        "height": 80,
        "left": 295,
        "top": 2233,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-bottom": "10px",
        "margin-left": "30px",
        "margin-right": "0px",
        "margin-top": "3px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dd:nth-of-type(13)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">A|B</span></tt>, where A and B can be arbitrary REs, creates a regular expression that\nwill match either A or B.  An arbitrary number of REs can be separated by the\n<tt class=\"docutils literal\"><span class=\"pre\">'|'</span></tt> in this way.  This can be used inside groups (see below) as well.  As\nthe target string is scanned, REs separated by <tt class=\"docutils literal\"><span class=\"pre\">'|'</span></tt> are tried from left to\nright. When one pattern completely matches, that branch is accepted. This means\nthat once <tt class=\"docutils literal\"><span class=\"pre\">A</span></tt> matches, <tt class=\"docutils literal\"><span class=\"pre\">B</span></tt> will not be tested further, even if it would\nproduce a longer overall match.  In other words, the <tt class=\"docutils literal\"><span class=\"pre\">'|'</span></tt> operator is never\ngreedy.  To match a literal <tt class=\"docutils literal\"><span class=\"pre\">'|'</span></tt>, use <tt class=\"docutils literal\"><span class=\"pre\">\\|</span></tt>, or enclose it inside a\ncharacter class, as in <tt class=\"docutils literal\"><span class=\"pre\">[|]</span></tt>.",
      "path": "div > div > div > div > div > div > dl > dd",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dd:nth-of-type(13)",
      "text": [
        "A|B",
        ", where A and B can be arbitrary REs, creates a regular expression that\nwill match either A or B.  An arbitrary number of REs can be separated by the\n",
        "'|'",
        " in this way.  This can be used inside groups (see below) as well.  As\nthe target string is scanned, REs separated by ",
        "'|'",
        " are tried from left to\nright. When one pattern completely matches, that branch is accepted. This means\nthat once ",
        "A",
        " matches, ",
        "B",
        " will not be tested further, even if it would\nproduce a longer overall match.  In other words, the ",
        "'|'",
        " operator is never\ngreedy.  To match a literal ",
        "'|'",
        ", use ",
        "\\|",
        ", or enclose it inside a\ncharacter class, as in ",
        "[|]",
        "."
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 265,
        "top": 2323,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt:nth-of-type(14)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">(...)</span></tt>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dt:nth-of-type(14)",
      "text": [
        "(...)"
      ]
    },
    {
      "bound": {
        "height": 60,
        "left": 295,
        "top": 2346,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-bottom": "10px",
        "margin-left": "30px",
        "margin-right": "0px",
        "margin-top": "3px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dd:nth-of-type(14)",
      "html": "Matches whatever regular expression is inside the parentheses, and indicates the\nstart and end of a group; the contents of a group can be retrieved after a match\nhas been performed, and can be matched later in the string with the <tt class=\"docutils literal\"><span class=\"pre\">\\number</span></tt>\nspecial sequence, described below.  To match the literals <tt class=\"docutils literal\"><span class=\"pre\">'('</span></tt> or <tt class=\"docutils literal\"><span class=\"pre\">')'</span></tt>,\nuse <tt class=\"docutils literal\"><span class=\"pre\">\\(</span></tt> or <tt class=\"docutils literal\"><span class=\"pre\">\\)</span></tt>, or enclose them inside a character class: <tt class=\"docutils literal\"><span class=\"pre\">[(]</span> <span class=\"pre\">[)]</span></tt>.",
      "path": "div > div > div > div > div > div > dl > dd",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dd:nth-of-type(14)",
      "text": [
        "Matches whatever regular expression is inside the parentheses, and indicates the\nstart and end of a group; the contents of a group can be retrieved after a match\nhas been performed, and can be matched later in the string with the ",
        "\\number",
        "\nspecial sequence, described below.  To match the literals ",
        "'('",
        " or ",
        "')'",
        ",\nuse ",
        "\\(",
        " or ",
        "\\)",
        ", or enclose them inside a character class: ",
        "[(]",
        "[)]",
        "."
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 265,
        "top": 2416,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt:nth-of-type(15)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">(?...)</span></tt>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dt:nth-of-type(15)",
      "text": [
        "(?...)"
      ]
    },
    {
      "bound": {
        "height": 40,
        "left": 295,
        "top": 2439,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-bottom": "10px",
        "margin-left": "30px",
        "margin-right": "0px",
        "margin-top": "3px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dd:nth-of-type(15)",
      "html": "This is an extension notation (a <tt class=\"docutils literal\"><span class=\"pre\">'?'</span></tt> following a <tt class=\"docutils literal\"><span class=\"pre\">'('</span></tt> is not meaningful\notherwise).  The first character after the <tt class=\"docutils literal\"><span class=\"pre\">'?'</span></tt> determines what the meaning\nand further syntax of the construct is. Extensions usually do not create a new\ngroup; <tt class=\"docutils literal\"><span class=\"pre\">(?P&lt;name&gt;...)</span></tt> is the only exception to this rule. Following are the\ncurrently supported extensions.",
      "path": "div > div > div > div > div > div > dl > dd",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dd:nth-of-type(15)",
      "text": [
        "This is an extension notation (a ",
        "'?'",
        " following a ",
        "'('",
        " is not meaningful\notherwise).  The first character after the ",
        "'?'",
        " determines what the meaning\nand further syntax of the construct is. Extensions usually do not create a new\ngroup; ",
        "(?P<name>...)",
        " is the only exception to this rule. Following are the\ncurrently supported extensions."
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 265,
        "top": 2489,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt:nth-of-type(16)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">(?aiLmsux)</span></tt>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dt:nth-of-type(16)",
      "text": [
        "(?aiLmsux)"
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 295,
        "top": 2512,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p.first:nth-of-type(1)",
      "html": "(One or more letters from the set <tt class=\"docutils literal\"><span class=\"pre\">'a'</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">'i'</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">'L'</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">'m'</span></tt>,\n<tt class=\"docutils literal\"><span class=\"pre\">'s'</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">'u'</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">'x'</span></tt>.)  The group matches the empty string; the\nletters set the corresponding flags: <a class=\"reference internal\" href=\"#re.A\" title=\"re.A\"><tt class=\"xref py py-const docutils literal\"><span class=\"pre\">re.A</span></tt></a> (ASCII-only matching),\n<a class=\"reference internal\" href=\"#re.I\" title=\"re.I\"><tt class=\"xref py py-const docutils literal\"><span class=\"pre\">re.I</span></tt></a> (ignore case), <a class=\"reference internal\" href=\"#re.L\" title=\"re.L\"><tt class=\"xref py py-const docutils literal\"><span class=\"pre\">re.L</span></tt></a> (locale dependent),\n<a class=\"reference internal\" href=\"#re.M\" title=\"re.M\"><tt class=\"xref py py-const docutils literal\"><span class=\"pre\">re.M</span></tt></a> (multi-line), <a class=\"reference internal\" href=\"#re.S\" title=\"re.S\"><tt class=\"xref py py-const docutils literal\"><span class=\"pre\">re.S</span></tt></a> (dot matches all),\nand <a class=\"reference internal\" href=\"#re.X\" title=\"re.X\"><tt class=\"xref py py-const docutils literal\"><span class=\"pre\">re.X</span></tt></a> (verbose), for the entire regular expression. (The\nflags are described in <a class=\"reference internal\" href=\"#contents-of-module-re\"><em>Module Contents</em></a>.) This\nis useful if you wish to include the flags as part of the regular\nexpression, instead of passing a <em>flag</em> argument to the\n<a class=\"reference internal\" href=\"#re.compile\" title=\"re.compile\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">re.compile()</span></tt></a> function.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dd:nth-of-type(16) > p.first:nth-of-type(1)",
      "text": [
        "(One or more letters from the set ",
        "'a'",
        ", ",
        "'i'",
        ", ",
        "'L'",
        ", ",
        "'m'",
        ",\n",
        "'s'",
        ", ",
        "'u'",
        ", ",
        "'x'",
        ".)  The group matches the empty string; the\nletters set the corresponding flags: ",
        "re.A",
        " (ASCII-only matching),\n",
        "re.I",
        " (ignore case), ",
        "re.L",
        " (locale dependent),\n",
        "re.M",
        " (multi-line), ",
        "re.S",
        " (dot matches all),\nand ",
        "re.X",
        " (verbose), for the entire regular expression. (The\nflags are described in ",
        "Module Contents",
        ".) This\nis useful if you wish to include the flags as part of the regular\nexpression, instead of passing a ",
        "flag",
        " argument to the\n",
        "re.compile()",
        " function."
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 295,
        "top": 2594,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p.last:nth-of-type(2)",
      "html": "Note that the <tt class=\"docutils literal\"><span class=\"pre\">(?x)</span></tt> flag changes how the expression is parsed. It should be\nused first in the expression string, or after one or more whitespace characters.\nIf there are non-whitespace characters before the flag, the results are\nundefined.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dd:nth-of-type(16) > p.last:nth-of-type(2)",
      "text": [
        "Note that the ",
        "(?x)",
        " flag changes how the expression is parsed. It should be\nused first in the expression string, or after one or more whitespace characters.\nIf there are non-whitespace characters before the flag, the results are\nundefined."
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 265,
        "top": 2654,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt:nth-of-type(17)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">(?:...)</span></tt>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dt:nth-of-type(17)",
      "text": [
        "(?:...)"
      ]
    },
    {
      "bound": {
        "height": 40,
        "left": 295,
        "top": 2677,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-bottom": "10px",
        "margin-left": "30px",
        "margin-right": "0px",
        "margin-top": "3px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dd:nth-of-type(17)",
      "html": "A non-capturing version of regular parentheses.  Matches whatever regular\nexpression is inside the parentheses, but the substring matched by the group\n<em>cannot</em> be retrieved after performing a match or referenced later in the\npattern.",
      "path": "div > div > div > div > div > div > dl > dd",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dd:nth-of-type(17)",
      "text": [
        "A non-capturing version of regular parentheses.  Matches whatever regular\nexpression is inside the parentheses, but the substring matched by the group\n",
        "cannot",
        " be retrieved after performing a match or referenced later in the\npattern."
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 265,
        "top": 2727,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt:nth-of-type(18)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">(?P&lt;name&gt;...)</span></tt>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dt:nth-of-type(18)",
      "text": [
        "(?P<name>...)"
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 295,
        "top": 2750,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p.first:nth-of-type(1)",
      "html": "Similar to regular parentheses, but the substring matched by the group is\naccessible within the rest of the regular expression via the symbolic group\nname <em>name</em>.  Group names must be valid Python identifiers, and each group\nname must be defined only once within a regular expression.  A symbolic group\nis also a numbered group, just as if the group were not named.  So the group\nnamed <tt class=\"docutils literal\"><span class=\"pre\">id</span></tt> in the example below can also be referenced as the numbered group\n<tt class=\"docutils literal\"><span class=\"pre\">1</span></tt>.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dd:nth-of-type(18) > p.first:nth-of-type(1)",
      "text": [
        "Similar to regular parentheses, but the substring matched by the group is\naccessible within the rest of the regular expression via the symbolic group\nname ",
        "name",
        ".  Group names must be valid Python identifiers, and each group\nname must be defined only once within a regular expression.  A symbolic group\nis also a numbered group, just as if the group were not named.  So the group\nnamed ",
        "id",
        " in the example below can also be referenced as the numbered group\n",
        "1",
        "."
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 295,
        "top": 2832,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p.last:nth-of-type(2)",
      "html": "For example, if the pattern is <tt class=\"docutils literal\"><span class=\"pre\">(?P&lt;id&gt;[a-zA-Z_]\\w*)</span></tt>, the group can be\nreferenced by its name in arguments to methods of match objects, such as\n<tt class=\"docutils literal\"><span class=\"pre\">m.group('id')</span></tt> or <tt class=\"docutils literal\"><span class=\"pre\">m.end('id')</span></tt>, and also by name in the regular\nexpression itself (using <tt class=\"docutils literal\"><span class=\"pre\">(?P=id)</span></tt>) and replacement text given to\n<tt class=\"docutils literal\"><span class=\"pre\">.sub()</span></tt> (using <tt class=\"docutils literal\"><span class=\"pre\">\\g&lt;id&gt;</span></tt>).",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dd:nth-of-type(18) > p.last:nth-of-type(2)",
      "text": [
        "For example, if the pattern is ",
        "(?P<id>[a-zA-Z_]\\w*)",
        ", the group can be\nreferenced by its name in arguments to methods of match objects, such as\n",
        "m.group('id')",
        " or ",
        "m.end('id')",
        ", and also by name in the regular\nexpression itself (using ",
        "(?P=id)",
        ") and replacement text given to\n",
        ".sub()",
        " (using ",
        "\\g<id>",
        ")."
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 265,
        "top": 2892,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt:nth-of-type(19)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">(?P=name)</span></tt>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dt:nth-of-type(19)",
      "text": [
        "(?P=name)"
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 295,
        "top": 2915,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-bottom": "10px",
        "margin-left": "30px",
        "margin-right": "0px",
        "margin-top": "3px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dd:nth-of-type(19)",
      "html": "Matches whatever text was matched by the earlier group named <em>name</em>.",
      "path": "div > div > div > div > div > div > dl > dd",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dd:nth-of-type(19)",
      "text": [
        "Matches whatever text was matched by the earlier group named ",
        "name",
        "."
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 265,
        "top": 2945,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt:nth-of-type(20)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">(?#...)</span></tt>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dt:nth-of-type(20)",
      "text": [
        "(?#...)"
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 295,
        "top": 2968,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-bottom": "10px",
        "margin-left": "30px",
        "margin-right": "0px",
        "margin-top": "3px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dd:nth-of-type(20)",
      "html": "A comment; the contents of the parentheses are simply ignored.",
      "path": "div > div > div > div > div > div > dl > dd",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dd:nth-of-type(20)",
      "text": [
        "A comment; the contents of the parentheses are simply ignored."
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 265,
        "top": 2998,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt:nth-of-type(21)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">(?=...)</span></tt>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dt:nth-of-type(21)",
      "text": [
        "(?=...)"
      ]
    },
    {
      "bound": {
        "height": 40,
        "left": 295,
        "top": 3021,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-bottom": "10px",
        "margin-left": "30px",
        "margin-right": "0px",
        "margin-top": "3px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dd:nth-of-type(21)",
      "html": "Matches if <tt class=\"docutils literal\"><span class=\"pre\">...</span></tt> matches next, but doesn’t consume any of the string.  This is\ncalled a lookahead assertion.  For example, <tt class=\"docutils literal\"><span class=\"pre\">Isaac</span> <span class=\"pre\">(?=Asimov)</span></tt> will match\n<tt class=\"docutils literal\"><span class=\"pre\">'Isaac</span> <span class=\"pre\">'</span></tt> only if it’s followed by <tt class=\"docutils literal\"><span class=\"pre\">'Asimov'</span></tt>.",
      "path": "div > div > div > div > div > div > dl > dd",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dd:nth-of-type(21)",
      "text": [
        "Matches if ",
        "...",
        " matches next, but doesn’t consume any of the string.  This is\ncalled a lookahead assertion.  For example, ",
        "Isaac",
        "(?=Asimov)",
        " will match\n",
        "'Isaac",
        "'",
        " only if it’s followed by ",
        "'Asimov'",
        "."
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 265,
        "top": 3071,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt:nth-of-type(22)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">(?!...)</span></tt>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dt:nth-of-type(22)",
      "text": [
        "(?!...)"
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 295,
        "top": 3094,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-bottom": "10px",
        "margin-left": "30px",
        "margin-right": "0px",
        "margin-top": "3px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dd:nth-of-type(22)",
      "html": "Matches if <tt class=\"docutils literal\"><span class=\"pre\">...</span></tt> doesn’t match next.  This is a negative lookahead assertion.\nFor example, <tt class=\"docutils literal\"><span class=\"pre\">Isaac</span> <span class=\"pre\">(?!Asimov)</span></tt> will match <tt class=\"docutils literal\"><span class=\"pre\">'Isaac</span> <span class=\"pre\">'</span></tt> only if it’s <em>not</em>\nfollowed by <tt class=\"docutils literal\"><span class=\"pre\">'Asimov'</span></tt>.",
      "path": "div > div > div > div > div > div > dl > dd",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dd:nth-of-type(22)",
      "text": [
        "Matches if ",
        "...",
        " doesn’t match next.  This is a negative lookahead assertion.\nFor example, ",
        "Isaac",
        "(?!Asimov)",
        " will match ",
        "'Isaac",
        "'",
        " only if it’s ",
        "not",
        "\nfollowed by ",
        "'Asimov'",
        "."
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 265,
        "top": 3124,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt:nth-of-type(23)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">(?&lt;=...)</span></tt>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dt:nth-of-type(23)",
      "text": [
        "(?<=...)"
      ]
    },
    {
      "bound": {
        "height": 88,
        "left": 295,
        "top": 3147,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p.first:nth-of-type(1)",
      "html": "Matches if the current position in the string is preceded by a match for <tt class=\"docutils literal\"><span class=\"pre\">...</span></tt>\nthat ends at the current position.  This is called a <em class=\"dfn\">positive lookbehind\nassertion</em>. <tt class=\"docutils literal\"><span class=\"pre\">(?&lt;=abc)def</span></tt> will find a match in <tt class=\"docutils literal\"><span class=\"pre\">abcdef</span></tt>, since the\nlookbehind will back up 3 characters and check if the contained pattern matches.\nThe contained pattern must only match strings of some fixed length, meaning that\n<tt class=\"docutils literal\"><span class=\"pre\">abc</span></tt> or <tt class=\"docutils literal\"><span class=\"pre\">a|b</span></tt> are allowed, but <tt class=\"docutils literal\"><span class=\"pre\">a*</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">a{3,4}</span></tt> are not.  Note that\npatterns which start with positive lookbehind assertions will not match at the\nbeginning of the string being searched; you will most likely want to use the\n<a class=\"reference internal\" href=\"#re.search\" title=\"re.search\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">search()</span></tt></a> function rather than the <a class=\"reference internal\" href=\"#re.match\" title=\"re.match\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">match()</span></tt></a> function:",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dd:nth-of-type(23) > p.first:nth-of-type(1)",
      "text": [
        "Matches if the current position in the string is preceded by a match for ",
        "...",
        "\nthat ends at the current position.  This is called a ",
        "positive lookbehind\nassertion",
        ". ",
        "(?<=abc)def",
        " will find a match in ",
        "abcdef",
        ", since the\nlookbehind will back up 3 characters and check if the contained pattern matches.\nThe contained pattern must only match strings of some fixed length, meaning that\n",
        "abc",
        " or ",
        "a|b",
        " are allowed, but ",
        "a*",
        " and ",
        "a{3,4}",
        " are not.  Note that\npatterns which start with positive lookbehind assertions will not match at the\nbeginning of the string being searched; you will most likely want to use the\n",
        "search()",
        " function rather than the ",
        "match()",
        " function:"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 1554,
        "top": 3251,
        "width": 30
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(170, 204, 153)",
        "cursor": "pointer",
        "font-family": "monospace",
        "font-size": "13px",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(170, 204, 153)",
        "padding-left": "2px",
        "padding-right": "2px",
        "position": "absolute",
        "text-align": "justify"
      },
      "element": "span.copybutton:nth-of-type(1)",
      "html": "&gt;&gt;&gt;",
      "path": "div > div > div > div > div > div > dl > dd > div > div > span",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dd:nth-of-type(23) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > span.copybutton:nth-of-type(1)",
      "text": [
        ">>>"
      ]
    },
    {
      "bound": {
        "height": 84,
        "left": 295,
        "top": 3251,
        "width": 1289
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "text-align": "justify",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">re</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"s\">'(?&lt;=abc)def'</span><span class=\"p\">,</span> <span class=\"s\">'abcdef'</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">'def'</span>\n",
      "path": "div > div > div > div > div > div > dl > dd > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dd:nth-of-type(23) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        ">>> ",
        "import",
        "re",
        ">>> ",
        "m",
        "=",
        "re",
        ".",
        "search",
        "(",
        "'(?<=abc)def'",
        ",",
        "'abcdef'",
        ")",
        ">>> ",
        "m",
        ".",
        "group",
        "(",
        "0",
        ")",
        "'def'"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 3350,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "This example looks for a word following a hyphen:",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dd:nth-of-type(23) > p:nth-of-type(2)",
      "text": [
        "This example looks for a word following a hyphen:"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 1554,
        "top": 3388,
        "width": 30
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(170, 204, 153)",
        "cursor": "pointer",
        "font-family": "monospace",
        "font-size": "13px",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(170, 204, 153)",
        "padding-left": "2px",
        "padding-right": "2px",
        "position": "absolute",
        "text-align": "justify"
      },
      "element": "span.copybutton:nth-of-type(1)",
      "html": "&gt;&gt;&gt;",
      "path": "div > div > div > div > div > div > dl > dd > div > div > span",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dd:nth-of-type(23) > div.highlight-python3.last:nth-of-type(2) > div.highlight:nth-of-type(1) > span.copybutton:nth-of-type(1)",
      "text": [
        ">>>"
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 295,
        "top": 3388,
        "width": 1289
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "text-align": "justify",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"s\">'(?&lt;=-)\\w+'</span><span class=\"p\">,</span> <span class=\"s\">'spam-egg'</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">'egg'</span>\n",
      "path": "div > div > div > div > div > div > dl > dd > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dd:nth-of-type(23) > div.highlight-python3.last:nth-of-type(2) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        ">>> ",
        "m",
        "=",
        "re",
        ".",
        "search",
        "(",
        "'(?<=-)\\w+'",
        ",",
        "'spam-egg'",
        ")",
        ">>> ",
        "m",
        ".",
        "group",
        "(",
        "0",
        ")",
        "'egg'"
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 265,
        "top": 3469,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt:nth-of-type(24)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">(?&lt;!...)</span></tt>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dt:nth-of-type(24)",
      "text": [
        "(?<!...)"
      ]
    },
    {
      "bound": {
        "height": 60,
        "left": 295,
        "top": 3492,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-bottom": "10px",
        "margin-left": "30px",
        "margin-right": "0px",
        "margin-top": "3px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dd:nth-of-type(24)",
      "html": "Matches if the current position in the string is not preceded by a match for\n<tt class=\"docutils literal\"><span class=\"pre\">...</span></tt>.  This is called a <em class=\"dfn\">negative lookbehind assertion</em>.  Similar to\npositive lookbehind assertions, the contained pattern must only match strings of\nsome fixed length.  Patterns which start with negative lookbehind assertions may\nmatch at the beginning of the string being searched.",
      "path": "div > div > div > div > div > div > dl > dd",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dd:nth-of-type(24)",
      "text": [
        "Matches if the current position in the string is not preceded by a match for\n",
        "...",
        ".  This is called a ",
        "negative lookbehind assertion",
        ".  Similar to\npositive lookbehind assertions, the contained pattern must only match strings of\nsome fixed length.  Patterns which start with negative lookbehind assertions may\nmatch at the beginning of the string being searched."
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 265,
        "top": 3562,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt:nth-of-type(25)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">(?(id/name)yes-pattern|no-pattern)</span></tt>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dt:nth-of-type(25)",
      "text": [
        "(?(id/name)yes-pattern|no-pattern)"
      ]
    },
    {
      "bound": {
        "height": 60,
        "left": 295,
        "top": 3585,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-bottom": "10px",
        "margin-left": "30px",
        "margin-right": "0px",
        "margin-top": "3px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dd:nth-of-type(25)",
      "html": "Will try to match with <tt class=\"docutils literal\"><span class=\"pre\">yes-pattern</span></tt> if the group with given <em>id</em> or\n<em>name</em> exists, and with <tt class=\"docutils literal\"><span class=\"pre\">no-pattern</span></tt> if it doesn’t. <tt class=\"docutils literal\"><span class=\"pre\">no-pattern</span></tt> is\noptional and can be omitted. For example,\n<tt class=\"docutils literal\"><span class=\"pre\">(&lt;)?(\\w+@\\w+(?:\\.\\w+)+)(?(1)&gt;|$)</span></tt> is a poor email matching pattern, which\nwill match with <tt class=\"docutils literal\"><span class=\"pre\">'&lt;user@host.com&gt;'</span></tt> as well as <tt class=\"docutils literal\"><span class=\"pre\">'user@host.com'</span></tt>, but\nnot with <tt class=\"docutils literal\"><span class=\"pre\">'&lt;user@host.com'</span></tt> nor <tt class=\"docutils literal\"><span class=\"pre\">'user@host.com&gt;'</span></tt> .",
      "path": "div > div > div > div > div > div > dl > dd",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(1) > dd:nth-of-type(25)",
      "text": [
        "Will try to match with ",
        "yes-pattern",
        " if the group with given ",
        "id",
        " or\n",
        "name",
        " exists, and with ",
        "no-pattern",
        " if it doesn’t. ",
        "no-pattern",
        " is\noptional and can be omitted. For example,\n",
        "(<)?(\\w+@\\w+(?:\\.\\w+)+)(?(1)>|$)",
        " is a poor email matching pattern, which\nwill match with ",
        "'<user@host.com>'",
        " as well as ",
        "'user@host.com'",
        ", but\nnot with ",
        "'<user@host.com'",
        " nor ",
        "'user@host.com>'",
        " ."
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 3661,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(7)",
      "html": "The special sequences consist of <tt class=\"docutils literal\"><span class=\"pre\">'\\'</span></tt> and a character from the list below.\nIf the ordinary character is not on the list, then the resulting RE will match\nthe second character.  For example, <tt class=\"docutils literal\"><span class=\"pre\">\\$</span></tt> matches the character <tt class=\"docutils literal\"><span class=\"pre\">'$'</span></tt>.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > p:nth-of-type(7)",
      "text": [
        "The special sequences consist of ",
        "'\\'",
        " and a character from the list below.\nIf the ordinary character is not on the list, then the resulting RE will match\nthe second character.  For example, ",
        "\\$",
        " matches the character ",
        "'$'",
        "."
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 265,
        "top": 3721,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt:nth-of-type(1)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">\\number</span></tt>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(2) > dt:nth-of-type(1)",
      "text": [
        "\\number"
      ]
    },
    {
      "bound": {
        "height": 60,
        "left": 295,
        "top": 3744,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-bottom": "10px",
        "margin-left": "30px",
        "margin-right": "0px",
        "margin-top": "3px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dd:nth-of-type(1)",
      "html": "Matches the contents of the group of the same number.  Groups are numbered\nstarting from 1.  For example, <tt class=\"docutils literal\"><span class=\"pre\">(.+)</span> <span class=\"pre\">\\1</span></tt> matches <tt class=\"docutils literal\"><span class=\"pre\">'the</span> <span class=\"pre\">the'</span></tt> or <tt class=\"docutils literal\"><span class=\"pre\">'55</span> <span class=\"pre\">55'</span></tt>,\nbut not <tt class=\"docutils literal\"><span class=\"pre\">'the</span> <span class=\"pre\">end'</span></tt> (note the space after the group).  This special sequence\ncan only be used to match one of the first 99 groups.  If the first digit of\n<em>number</em> is 0, or <em>number</em> is 3 octal digits long, it will not be interpreted as\na group match, but as the character with octal value <em>number</em>. Inside the\n<tt class=\"docutils literal\"><span class=\"pre\">'['</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">']'</span></tt> of a character class, all numeric escapes are treated as\ncharacters.",
      "path": "div > div > div > div > div > div > dl > dd",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(2) > dd:nth-of-type(1)",
      "text": [
        "Matches the contents of the group of the same number.  Groups are numbered\nstarting from 1.  For example, ",
        "(.+)",
        "\\1",
        " matches ",
        "'the",
        "the'",
        " or ",
        "'55",
        "55'",
        ",\nbut not ",
        "'the",
        "end'",
        " (note the space after the group).  This special sequence\ncan only be used to match one of the first 99 groups.  If the first digit of\n",
        "number",
        " is 0, or ",
        "number",
        " is 3 octal digits long, it will not be interpreted as\na group match, but as the character with octal value ",
        "number",
        ". Inside the\n",
        "'['",
        " and ",
        "']'",
        " of a character class, all numeric escapes are treated as\ncharacters."
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 265,
        "top": 3814,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt:nth-of-type(2)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">\\A</span></tt>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(2) > dt:nth-of-type(2)",
      "text": [
        "\\A"
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 295,
        "top": 3837,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-bottom": "10px",
        "margin-left": "30px",
        "margin-right": "0px",
        "margin-top": "3px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dd:nth-of-type(2)",
      "html": "Matches only at the start of the string.",
      "path": "div > div > div > div > div > div > dl > dd",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(2) > dd:nth-of-type(2)",
      "text": [
        "Matches only at the start of the string."
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 265,
        "top": 3867,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt:nth-of-type(3)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">\\b</span></tt>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(2) > dt:nth-of-type(3)",
      "text": [
        "\\b"
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 295,
        "top": 3890,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p.first:nth-of-type(1)",
      "html": "Matches the empty string, but only at the beginning or end of a word.\nA word is defined as a sequence of Unicode alphanumeric or underscore\ncharacters, so the end of a word is indicated by whitespace or a\nnon-alphanumeric, non-underscore Unicode character.  Note that formally,\n<tt class=\"docutils literal\"><span class=\"pre\">\\b</span></tt> is defined as the boundary between a <tt class=\"docutils literal\"><span class=\"pre\">\\w</span></tt> and a <tt class=\"docutils literal\"><span class=\"pre\">\\W</span></tt> character\n(or vice versa), or between <tt class=\"docutils literal\"><span class=\"pre\">\\w</span></tt> and the beginning/end of the string.\nThis means that <tt class=\"docutils literal\"><span class=\"pre\">r'\\bfoo\\b'</span></tt> matches <tt class=\"docutils literal\"><span class=\"pre\">'foo'</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">'foo.'</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">'(foo)'</span></tt>,\n<tt class=\"docutils literal\"><span class=\"pre\">'bar</span> <span class=\"pre\">foo</span> <span class=\"pre\">baz'</span></tt> but not <tt class=\"docutils literal\"><span class=\"pre\">'foobar'</span></tt> or <tt class=\"docutils literal\"><span class=\"pre\">'foo3'</span></tt>.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(2) > dd:nth-of-type(3) > p.first:nth-of-type(1)",
      "text": [
        "Matches the empty string, but only at the beginning or end of a word.\nA word is defined as a sequence of Unicode alphanumeric or underscore\ncharacters, so the end of a word is indicated by whitespace or a\nnon-alphanumeric, non-underscore Unicode character.  Note that formally,\n",
        "\\b",
        " is defined as the boundary between a ",
        "\\w",
        " and a ",
        "\\W",
        " character\n(or vice versa), or between ",
        "\\w",
        " and the beginning/end of the string.\nThis means that ",
        "r'\\bfoo\\b'",
        " matches ",
        "'foo'",
        ", ",
        "'foo.'",
        ", ",
        "'(foo)'",
        ",\n",
        "'bar",
        "foo",
        "baz'",
        " but not ",
        "'foobar'",
        " or ",
        "'foo3'",
        "."
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 295,
        "top": 3972,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p.last:nth-of-type(2)",
      "html": "By default Unicode alphanumerics are the ones used, but this can  be changed\nby using the <a class=\"reference internal\" href=\"#re.ASCII\" title=\"re.ASCII\"><tt class=\"xref py py-const docutils literal\"><span class=\"pre\">ASCII</span></tt></a> flag.  Inside a character range, <tt class=\"docutils literal\"><span class=\"pre\">\\b</span></tt>\nrepresents the backspace character, for compatibility with Python’s string\nliterals.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(2) > dd:nth-of-type(3) > p.last:nth-of-type(2)",
      "text": [
        "By default Unicode alphanumerics are the ones used, but this can  be changed\nby using the ",
        "ASCII",
        " flag.  Inside a character range, ",
        "\\b",
        "\nrepresents the backspace character, for compatibility with Python’s string\nliterals."
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 265,
        "top": 4032,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt:nth-of-type(4)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">\\B</span></tt>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(2) > dt:nth-of-type(4)",
      "text": [
        "\\B"
      ]
    },
    {
      "bound": {
        "height": 40,
        "left": 295,
        "top": 4055,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-bottom": "10px",
        "margin-left": "30px",
        "margin-right": "0px",
        "margin-top": "3px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dd:nth-of-type(4)",
      "html": "Matches the empty string, but only when it is <em>not</em> at the beginning or end\nof a word.  This means that <tt class=\"docutils literal\"><span class=\"pre\">r'py\\B'</span></tt> matches <tt class=\"docutils literal\"><span class=\"pre\">'python'</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">'py3'</span></tt>,\n<tt class=\"docutils literal\"><span class=\"pre\">'py2'</span></tt>, but not <tt class=\"docutils literal\"><span class=\"pre\">'py'</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">'py.'</span></tt>, or <tt class=\"docutils literal\"><span class=\"pre\">'py!'</span></tt>.\n<tt class=\"docutils literal\"><span class=\"pre\">\\B</span></tt> is just the opposite of <tt class=\"docutils literal\"><span class=\"pre\">\\b</span></tt>, so word characters are\nUnicode alphanumerics or the underscore, although this can be changed\nby using the <a class=\"reference internal\" href=\"#re.ASCII\" title=\"re.ASCII\"><tt class=\"xref py py-const docutils literal\"><span class=\"pre\">ASCII</span></tt></a> flag.",
      "path": "div > div > div > div > div > div > dl > dd",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(2) > dd:nth-of-type(4)",
      "text": [
        "Matches the empty string, but only when it is ",
        "not",
        " at the beginning or end\nof a word.  This means that ",
        "r'py\\B'",
        " matches ",
        "'python'",
        ", ",
        "'py3'",
        ",\n",
        "'py2'",
        ", but not ",
        "'py'",
        ", ",
        "'py.'",
        ", or ",
        "'py!'",
        ".\n",
        "\\B",
        " is just the opposite of ",
        "\\b",
        ", so word characters are\nUnicode alphanumerics or the underscore, although this can be changed\nby using the ",
        "ASCII",
        " flag."
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 265,
        "top": 4105,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt:nth-of-type(5)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">\\d</span></tt>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(2) > dt:nth-of-type(5)",
      "text": [
        "\\d"
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 295,
        "top": 4128,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dt:nth-of-type(1)",
      "html": "For Unicode (str) patterns:",
      "path": "div > div > div > div > div > div > dl > dd > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(2) > dd:nth-of-type(5) > dl.docutils.first.last:nth-of-type(1) > dt:nth-of-type(1)",
      "text": [
        "For Unicode (str) patterns:"
      ]
    },
    {
      "bound": {
        "height": 40,
        "left": 325,
        "top": 4151,
        "width": 1259
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-bottom": "10px",
        "margin-left": "30px",
        "margin-right": "0px",
        "margin-top": "3px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dd:nth-of-type(1)",
      "html": "Matches any Unicode decimal digit (that is, any character in\nUnicode character category [Nd]).  This includes <tt class=\"docutils literal\"><span class=\"pre\">[0-9]</span></tt>, and\nalso many other digit characters.  If the <a class=\"reference internal\" href=\"#re.ASCII\" title=\"re.ASCII\"><tt class=\"xref py py-const docutils literal\"><span class=\"pre\">ASCII</span></tt></a> flag is\nused only <tt class=\"docutils literal\"><span class=\"pre\">[0-9]</span></tt> is matched (but the flag affects the entire\nregular expression, so in such cases using an explicit <tt class=\"docutils literal\"><span class=\"pre\">[0-9]</span></tt>\nmay be a better choice).",
      "path": "div > div > div > div > div > div > dl > dd > dl > dd",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(2) > dd:nth-of-type(5) > dl.docutils.first.last:nth-of-type(1) > dd:nth-of-type(1)",
      "text": [
        "Matches any Unicode decimal digit (that is, any character in\nUnicode character category [Nd]).  This includes ",
        "[0-9]",
        ", and\nalso many other digit characters.  If the ",
        "ASCII",
        " flag is\nused only ",
        "[0-9]",
        " is matched (but the flag affects the entire\nregular expression, so in such cases using an explicit ",
        "[0-9]",
        "\nmay be a better choice)."
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 295,
        "top": 4201,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dt:nth-of-type(2)",
      "html": "For 8-bit (bytes) patterns:",
      "path": "div > div > div > div > div > div > dl > dd > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(2) > dd:nth-of-type(5) > dl.docutils.first.last:nth-of-type(1) > dt:nth-of-type(2)",
      "text": [
        "For 8-bit (bytes) patterns:"
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 325,
        "top": 4224,
        "width": 1259
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-bottom": "10px",
        "margin-left": "30px",
        "margin-right": "0px",
        "margin-top": "3px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dd:nth-of-type(2)",
      "html": "Matches any decimal digit; this is equivalent to <tt class=\"docutils literal\"><span class=\"pre\">[0-9]</span></tt>.",
      "path": "div > div > div > div > div > div > dl > dd > dl > dd",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(2) > dd:nth-of-type(5) > dl.docutils.first.last:nth-of-type(1) > dd:nth-of-type(2)",
      "text": [
        "Matches any decimal digit; this is equivalent to ",
        "[0-9]",
        "."
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 265,
        "top": 4259,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt:nth-of-type(6)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">\\D</span></tt>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(2) > dt:nth-of-type(6)",
      "text": [
        "\\D"
      ]
    },
    {
      "bound": {
        "height": 40,
        "left": 295,
        "top": 4282,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-bottom": "10px",
        "margin-left": "30px",
        "margin-right": "0px",
        "margin-top": "3px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dd:nth-of-type(6)",
      "html": "Matches any character which is not a Unicode decimal digit. This is\nthe opposite of <tt class=\"docutils literal\"><span class=\"pre\">\\d</span></tt>. If the <a class=\"reference internal\" href=\"#re.ASCII\" title=\"re.ASCII\"><tt class=\"xref py py-const docutils literal\"><span class=\"pre\">ASCII</span></tt></a> flag is used this\nbecomes the equivalent of <tt class=\"docutils literal\"><span class=\"pre\">[^0-9]</span></tt> (but the flag affects the entire\nregular expression, so in such cases using an explicit <tt class=\"docutils literal\"><span class=\"pre\">[^0-9]</span></tt> may\nbe a better choice).",
      "path": "div > div > div > div > div > div > dl > dd",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(2) > dd:nth-of-type(6)",
      "text": [
        "Matches any character which is not a Unicode decimal digit. This is\nthe opposite of ",
        "\\d",
        ". If the ",
        "ASCII",
        " flag is used this\nbecomes the equivalent of ",
        "[^0-9]",
        " (but the flag affects the entire\nregular expression, so in such cases using an explicit ",
        "[^0-9]",
        " may\nbe a better choice)."
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 265,
        "top": 4332,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt:nth-of-type(7)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">\\s</span></tt>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(2) > dt:nth-of-type(7)",
      "text": [
        "\\s"
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 295,
        "top": 4355,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dt:nth-of-type(1)",
      "html": "For Unicode (str) patterns:",
      "path": "div > div > div > div > div > div > dl > dd > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(2) > dd:nth-of-type(7) > dl.docutils.first.last:nth-of-type(1) > dt:nth-of-type(1)",
      "text": [
        "For Unicode (str) patterns:"
      ]
    },
    {
      "bound": {
        "height": 60,
        "left": 325,
        "top": 4378,
        "width": 1259
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-bottom": "10px",
        "margin-left": "30px",
        "margin-right": "0px",
        "margin-top": "3px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dd:nth-of-type(1)",
      "html": "Matches Unicode whitespace characters (which includes\n<tt class=\"docutils literal\"><span class=\"pre\">[</span> <span class=\"pre\">\\t\\n\\r\\f\\v]</span></tt>, and also many other characters, for example the\nnon-breaking spaces mandated by typography rules in many\nlanguages). If the <a class=\"reference internal\" href=\"#re.ASCII\" title=\"re.ASCII\"><tt class=\"xref py py-const docutils literal\"><span class=\"pre\">ASCII</span></tt></a> flag is used, only\n<tt class=\"docutils literal\"><span class=\"pre\">[</span> <span class=\"pre\">\\t\\n\\r\\f\\v]</span></tt> is matched (but the flag affects the entire\nregular expression, so in such cases using an explicit\n<tt class=\"docutils literal\"><span class=\"pre\">[</span> <span class=\"pre\">\\t\\n\\r\\f\\v]</span></tt> may be a better choice).",
      "path": "div > div > div > div > div > div > dl > dd > dl > dd",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(2) > dd:nth-of-type(7) > dl.docutils.first.last:nth-of-type(1) > dd:nth-of-type(1)",
      "text": [
        "Matches Unicode whitespace characters (which includes\n",
        "[",
        "\\t\\n\\r\\f\\v]",
        ", and also many other characters, for example the\nnon-breaking spaces mandated by typography rules in many\nlanguages). If the ",
        "ASCII",
        " flag is used, only\n",
        "[",
        "\\t\\n\\r\\f\\v]",
        " is matched (but the flag affects the entire\nregular expression, so in such cases using an explicit\n",
        "[",
        "\\t\\n\\r\\f\\v]",
        " may be a better choice)."
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 295,
        "top": 4448,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dt:nth-of-type(2)",
      "html": "For 8-bit (bytes) patterns:",
      "path": "div > div > div > div > div > div > dl > dd > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(2) > dd:nth-of-type(7) > dl.docutils.first.last:nth-of-type(1) > dt:nth-of-type(2)",
      "text": [
        "For 8-bit (bytes) patterns:"
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 325,
        "top": 4471,
        "width": 1259
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-bottom": "10px",
        "margin-left": "30px",
        "margin-right": "0px",
        "margin-top": "3px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dd:nth-of-type(2)",
      "html": "Matches characters considered whitespace in the ASCII character set;\nthis is equivalent to <tt class=\"docutils literal\"><span class=\"pre\">[</span> <span class=\"pre\">\\t\\n\\r\\f\\v]</span></tt>.",
      "path": "div > div > div > div > div > div > dl > dd > dl > dd",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(2) > dd:nth-of-type(7) > dl.docutils.first.last:nth-of-type(1) > dd:nth-of-type(2)",
      "text": [
        "Matches characters considered whitespace in the ASCII character set;\nthis is equivalent to ",
        "[",
        "\\t\\n\\r\\f\\v]",
        "."
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 265,
        "top": 4506,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt:nth-of-type(8)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">\\S</span></tt>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(2) > dt:nth-of-type(8)",
      "text": [
        "\\S"
      ]
    },
    {
      "bound": {
        "height": 40,
        "left": 295,
        "top": 4529,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-bottom": "10px",
        "margin-left": "30px",
        "margin-right": "0px",
        "margin-top": "3px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dd:nth-of-type(8)",
      "html": "Matches any character which is not a Unicode whitespace character. This is\nthe opposite of <tt class=\"docutils literal\"><span class=\"pre\">\\s</span></tt>. If the <a class=\"reference internal\" href=\"#re.ASCII\" title=\"re.ASCII\"><tt class=\"xref py py-const docutils literal\"><span class=\"pre\">ASCII</span></tt></a> flag is used this\nbecomes the equivalent of <tt class=\"docutils literal\"><span class=\"pre\">[^</span> <span class=\"pre\">\\t\\n\\r\\f\\v]</span></tt> (but the flag affects the entire\nregular expression, so in such cases using an explicit <tt class=\"docutils literal\"><span class=\"pre\">[^</span> <span class=\"pre\">\\t\\n\\r\\f\\v]</span></tt> may\nbe a better choice).",
      "path": "div > div > div > div > div > div > dl > dd",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(2) > dd:nth-of-type(8)",
      "text": [
        "Matches any character which is not a Unicode whitespace character. This is\nthe opposite of ",
        "\\s",
        ". If the ",
        "ASCII",
        " flag is used this\nbecomes the equivalent of ",
        "[^",
        "\\t\\n\\r\\f\\v]",
        " (but the flag affects the entire\nregular expression, so in such cases using an explicit ",
        "[^",
        "\\t\\n\\r\\f\\v]",
        " may\nbe a better choice)."
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 265,
        "top": 4579,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt:nth-of-type(9)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">\\w</span></tt>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(2) > dt:nth-of-type(9)",
      "text": [
        "\\w"
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 295,
        "top": 4602,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dt:nth-of-type(1)",
      "html": "For Unicode (str) patterns:",
      "path": "div > div > div > div > div > div > dl > dd > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(2) > dd:nth-of-type(9) > dl.docutils.first.last:nth-of-type(1) > dt:nth-of-type(1)",
      "text": [
        "For Unicode (str) patterns:"
      ]
    },
    {
      "bound": {
        "height": 40,
        "left": 325,
        "top": 4625,
        "width": 1259
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-bottom": "10px",
        "margin-left": "30px",
        "margin-right": "0px",
        "margin-top": "3px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dd:nth-of-type(1)",
      "html": "Matches Unicode word characters; this includes most characters\nthat can be part of a word in any language, as well as numbers and\nthe underscore. If the <a class=\"reference internal\" href=\"#re.ASCII\" title=\"re.ASCII\"><tt class=\"xref py py-const docutils literal\"><span class=\"pre\">ASCII</span></tt></a> flag is used, only\n<tt class=\"docutils literal\"><span class=\"pre\">[a-zA-Z0-9_]</span></tt> is matched (but the flag affects the entire\nregular expression, so in such cases using an explicit\n<tt class=\"docutils literal\"><span class=\"pre\">[a-zA-Z0-9_]</span></tt> may be a better choice).",
      "path": "div > div > div > div > div > div > dl > dd > dl > dd",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(2) > dd:nth-of-type(9) > dl.docutils.first.last:nth-of-type(1) > dd:nth-of-type(1)",
      "text": [
        "Matches Unicode word characters; this includes most characters\nthat can be part of a word in any language, as well as numbers and\nthe underscore. If the ",
        "ASCII",
        " flag is used, only\n",
        "[a-zA-Z0-9_]",
        " is matched (but the flag affects the entire\nregular expression, so in such cases using an explicit\n",
        "[a-zA-Z0-9_]",
        " may be a better choice)."
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 295,
        "top": 4675,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dt:nth-of-type(2)",
      "html": "For 8-bit (bytes) patterns:",
      "path": "div > div > div > div > div > div > dl > dd > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(2) > dd:nth-of-type(9) > dl.docutils.first.last:nth-of-type(1) > dt:nth-of-type(2)",
      "text": [
        "For 8-bit (bytes) patterns:"
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 325,
        "top": 4698,
        "width": 1259
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-bottom": "10px",
        "margin-left": "30px",
        "margin-right": "0px",
        "margin-top": "3px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dd:nth-of-type(2)",
      "html": "Matches characters considered alphanumeric in the ASCII character set;\nthis is equivalent to <tt class=\"docutils literal\"><span class=\"pre\">[a-zA-Z0-9_]</span></tt>.",
      "path": "div > div > div > div > div > div > dl > dd > dl > dd",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(2) > dd:nth-of-type(9) > dl.docutils.first.last:nth-of-type(1) > dd:nth-of-type(2)",
      "text": [
        "Matches characters considered alphanumeric in the ASCII character set;\nthis is equivalent to ",
        "[a-zA-Z0-9_]",
        "."
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 265,
        "top": 4733,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt:nth-of-type(10)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">\\W</span></tt>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(2) > dt:nth-of-type(10)",
      "text": [
        "\\W"
      ]
    },
    {
      "bound": {
        "height": 40,
        "left": 295,
        "top": 4756,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-bottom": "10px",
        "margin-left": "30px",
        "margin-right": "0px",
        "margin-top": "3px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dd:nth-of-type(10)",
      "html": "Matches any character which is not a Unicode word character. This is\nthe opposite of <tt class=\"docutils literal\"><span class=\"pre\">\\w</span></tt>. If the <a class=\"reference internal\" href=\"#re.ASCII\" title=\"re.ASCII\"><tt class=\"xref py py-const docutils literal\"><span class=\"pre\">ASCII</span></tt></a> flag is used this\nbecomes the equivalent of <tt class=\"docutils literal\"><span class=\"pre\">[^a-zA-Z0-9_]</span></tt> (but the flag affects the\nentire regular expression, so in such cases using an explicit\n<tt class=\"docutils literal\"><span class=\"pre\">[^a-zA-Z0-9_]</span></tt> may be a better choice).",
      "path": "div > div > div > div > div > div > dl > dd",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(2) > dd:nth-of-type(10)",
      "text": [
        "Matches any character which is not a Unicode word character. This is\nthe opposite of ",
        "\\w",
        ". If the ",
        "ASCII",
        " flag is used this\nbecomes the equivalent of ",
        "[^a-zA-Z0-9_]",
        " (but the flag affects the\nentire regular expression, so in such cases using an explicit\n",
        "[^a-zA-Z0-9_]",
        " may be a better choice)."
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 265,
        "top": 4806,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt:nth-of-type(11)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">\\Z</span></tt>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(2) > dt:nth-of-type(11)",
      "text": [
        "\\Z"
      ]
    },
    {
      "bound": {
        "height": 20,
        "left": 295,
        "top": 4829,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-bottom": "10px",
        "margin-left": "30px",
        "margin-right": "0px",
        "margin-top": "3px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dd:nth-of-type(11)",
      "html": "Matches only at the end of the string.",
      "path": "div > div > div > div > div > div > dl > dd",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > dl.docutils:nth-of-type(2) > dd:nth-of-type(11)",
      "text": [
        "Matches only at the end of the string."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 4865,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(8)",
      "html": "Most of the standard escapes supported by Python string literals are also\naccepted by the regular expression parser:",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > p:nth-of-type(8)",
      "text": [
        "Most of the standard escapes supported by Python string literals are also\naccepted by the regular expression parser:"
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 265,
        "top": 4903,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "\\<span class=\"n\">a</span>      \\<span class=\"n\">b</span>      \\<span class=\"n\">f</span>      \\<span class=\"n\">n</span>\n\\<span class=\"n\">r</span>      \\<span class=\"n\">t</span>      \\<span class=\"n\">u</span>      \\<span class=\"n\">U</span>\n\\<span class=\"n\">v</span>      \\<span class=\"n\">x</span>      \\\\\n",
      "path": "div > div > div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        "\\",
        "a",
        "      \\",
        "b",
        "      \\",
        "f",
        "      \\",
        "n",
        "\n\\",
        "r",
        "      \\",
        "t",
        "      \\",
        "u",
        "      \\",
        "U",
        "\n\\",
        "v",
        "      \\",
        "x",
        "      \\\\\n"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 4985,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(9)",
      "html": "(Note that <tt class=\"docutils literal\"><span class=\"pre\">\\b</span></tt> is used to represent word boundaries, and means “backspace”\nonly inside character classes.)",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > p:nth-of-type(9)",
      "text": [
        "(Note that ",
        "\\b",
        " is used to represent word boundaries, and means “backspace”\nonly inside character classes.)"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 5023,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(10)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">'\\u'</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">'\\U'</span></tt> escape sequences are only recognized in Unicode\npatterns.  In bytes patterns they are not treated specially.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > p:nth-of-type(10)",
      "text": [
        "'\\u'",
        " and ",
        "'\\U'",
        " escape sequences are only recognized in Unicode\npatterns.  In bytes patterns they are not treated specially."
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 5061,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(11)",
      "html": "Octal escapes are included in a limited form.  If the first digit is a 0, or if\nthere are three octal digits, it is considered an octal escape. Otherwise, it is\na group reference.  As for string literals, octal escapes are always at most\nthree digits in length.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > p:nth-of-type(11)",
      "text": [
        "Octal escapes are included in a limited form.  If the first digit is a 0, or if\nthere are three octal digits, it is considered an octal escape. Otherwise, it is\na group reference.  As for string literals, octal escapes are always at most\nthree digits in length."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 5121,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p.versionchanged:nth-of-type(12)",
      "html": "\n<span class=\"versionmodified\">Changed in version 3.3:</span> The <tt class=\"docutils literal\"><span class=\"pre\">'\\u'</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">'\\U'</span></tt> escape sequences have been added.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-syntax.section:nth-of-type(2) > p.versionchanged:nth-of-type(12)",
      "text": [
        "Changed in version 3.3:",
        " The ",
        "'\\u'",
        " and ",
        "'\\U'",
        " escape sequences have been added."
      ]
    },
    {
      "bound": {
        "height": 46,
        "left": 265,
        "top": 5159,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "26px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "7px",
        "padding-top": "7px"
      },
      "element": "h2:nth-of-type(1)",
      "html": "6.2.2. Module Contents<a class=\"headerlink\" href=\"#module-contents\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > div > h2",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > h2:nth-of-type(1)",
      "text": [
        "6.2.2. Module Contents",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 5221,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "The module defines several functions, constants, and an exception. Some of the\nfunctions are simplified versions of the full featured methods for compiled\nregular expressions.  Most non-trivial applications always use the compiled\nform.",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > p:nth-of-type(1)",
      "text": [
        "The module defines several functions, constants, and an exception. Some of the\nfunctions are simplified versions of the full featured methods for compiled\nregular expressions.  Most non-trivial applications always use the compiled\nform."
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 5281,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.compile:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">re.</tt><tt class=\"descname\">compile</tt><big>(</big><em>pattern</em>, <em>flags=0</em><big>)</big><a class=\"headerlink\" href=\"#re.compile\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(1) > dt#re.compile:nth-of-type(1)",
      "text": [
        "re.",
        "compile",
        "(",
        "pattern",
        ", ",
        "flags=0",
        ")",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 5309,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "Compile a regular expression pattern into a regular expression object, which\ncan be used for matching using its <a class=\"reference internal\" href=\"#re.match\" title=\"re.match\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">match()</span></tt></a> and <a class=\"reference internal\" href=\"#re.search\" title=\"re.search\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">search()</span></tt></a> methods,\ndescribed below.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(1) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "Compile a regular expression pattern into a regular expression object, which\ncan be used for matching using its ",
        "match()",
        " and ",
        "search()",
        " methods,\ndescribed below."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 5347,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "The expression’s behaviour can be modified by specifying a <em>flags</em> value.\nValues can be any of the following variables, combined using bitwise OR (the\n<tt class=\"docutils literal\"><span class=\"pre\">|</span></tt> operator).",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(1) > dd:nth-of-type(1) > p:nth-of-type(2)",
      "text": [
        "The expression’s behaviour can be modified by specifying a ",
        "flags",
        " value.\nValues can be any of the following variables, combined using bitwise OR (the\n",
        "|",
        " operator)."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 5385,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(3)",
      "html": "The sequence",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(1) > dd:nth-of-type(1) > p:nth-of-type(3)",
      "text": [
        "The sequence"
      ]
    },
    {
      "bound": {
        "height": 48,
        "left": 295,
        "top": 5423,
        "width": 1289
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "text-align": "justify",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"n\">prog</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">)</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">prog</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">)</span>\n",
      "path": "div > div > div > div > div > div > dl > dd > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(1) > dd:nth-of-type(1) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        "prog",
        "=",
        "re",
        ".",
        "compile",
        "(",
        "pattern",
        ")",
        "result",
        "=",
        "prog",
        ".",
        "match",
        "(",
        "string",
        ")"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 5486,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(4)",
      "html": "is equivalent to",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(1) > dd:nth-of-type(1) > p:nth-of-type(4)",
      "text": [
        "is equivalent to"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 295,
        "top": 5524,
        "width": 1289
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "text-align": "justify",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">,</span> <span class=\"n\">string</span><span class=\"p\">)</span>\n",
      "path": "div > div > div > div > div > div > dl > dd > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(1) > dd:nth-of-type(1) > div.highlight-python3:nth-of-type(2) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        "result",
        "=",
        "re",
        ".",
        "match",
        "(",
        "pattern",
        ",",
        "string",
        ")"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 5569,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(5)",
      "html": "but using <a class=\"reference internal\" href=\"#re.compile\" title=\"re.compile\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">re.compile()</span></tt></a> and saving the resulting regular expression\nobject for reuse is more efficient when the expression will be used several\ntimes in a single program.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(1) > dd:nth-of-type(1) > p:nth-of-type(5)",
      "text": [
        "but using ",
        "re.compile()",
        " and saving the resulting regular expression\nobject for reuse is more efficient when the expression will be used several\ntimes in a single program."
      ]
    },
    {
      "bound": {
        "height": 60,
        "left": 295,
        "top": 5607,
        "width": 1289
      },
      "computed": {
        "background-color": "rgb(238, 238, 238)",
        "border-bottom-color": "rgb(204, 204, 204)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(204, 204, 204)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(204, 204, 204)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(204, 204, 204)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-bottom": "10px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "10px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "7px",
        "padding-left": "7px",
        "padding-right": "7px",
        "padding-top": "7px",
        "text-align": "justify"
      },
      "element": "div.admonition.note:nth-of-type(3)",
      "html": "\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">The compiled versions of the most recent patterns passed to\n<a class=\"reference internal\" href=\"#re.match\" title=\"re.match\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">re.match()</span></tt></a>, <a class=\"reference internal\" href=\"#re.search\" title=\"re.search\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">re.search()</span></tt></a> or <a class=\"reference internal\" href=\"#re.compile\" title=\"re.compile\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">re.compile()</span></tt></a> are cached, so\nprograms that use only a few regular expressions at a time needn’t worry\nabout compiling regular expressions.</p>\n",
      "path": "div > div > div > div > div > div > dl > dd > div",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(1) > dd:nth-of-type(1) > div.admonition.note:nth-of-type(3)",
      "text": [
        "Note",
        "The compiled versions of the most recent patterns passed to\n",
        "re.match()",
        ", ",
        "re.search()",
        " or ",
        "re.compile()",
        " are cached, so\nprograms that use only a few regular expressions at a time needn’t worry\nabout compiling regular expressions."
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 5683,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.A:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">re.</tt><tt class=\"descname\">A</tt><a class=\"headerlink\" href=\"#re.A\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.data:nth-of-type(2) > dt#re.A:nth-of-type(1)",
      "text": [
        "re.",
        "A",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 5708,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.ASCII:nth-of-type(2)",
      "html": "\n<tt class=\"descclassname\">re.</tt><tt class=\"descname\">ASCII</tt><a class=\"headerlink\" href=\"#re.ASCII\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.data:nth-of-type(2) > dt#re.ASCII:nth-of-type(2)",
      "text": [
        "re.",
        "ASCII",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 295,
        "top": 5736,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "Make <tt class=\"docutils literal\"><span class=\"pre\">\\w</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">\\W</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">\\b</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">\\B</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">\\d</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">\\D</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">\\s</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">\\S</span></tt>\nperform ASCII-only matching instead of full Unicode matching.  This is only\nmeaningful for Unicode patterns, and is ignored for byte patterns.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.data:nth-of-type(2) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "Make ",
        "\\w",
        ", ",
        "\\W",
        ", ",
        "\\b",
        ", ",
        "\\B",
        ", ",
        "\\d",
        ", ",
        "\\D",
        ", ",
        "\\s",
        " and ",
        "\\S",
        "\nperform ASCII-only matching instead of full Unicode matching.  This is only\nmeaningful for Unicode patterns, and is ignored for byte patterns."
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 295,
        "top": 5796,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "Note that for backward compatibility, the <tt class=\"xref py py-const docutils literal\"><span class=\"pre\">re.U</span></tt> flag still\nexists (as well as its synonym <tt class=\"xref py py-const docutils literal\"><span class=\"pre\">re.UNICODE</span></tt> and its embedded\ncounterpart <tt class=\"docutils literal\"><span class=\"pre\">(?u)</span></tt>), but these are redundant in Python 3 since\nmatches are Unicode by default for strings (and Unicode matching\nisn’t allowed for bytes).",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.data:nth-of-type(2) > dd:nth-of-type(1) > p:nth-of-type(2)",
      "text": [
        "Note that for backward compatibility, the ",
        "re.U",
        " flag still\nexists (as well as its synonym ",
        "re.UNICODE",
        " and its embedded\ncounterpart ",
        "(?u)",
        "), but these are redundant in Python 3 since\nmatches are Unicode by default for strings (and Unicode matching\nisn’t allowed for bytes)."
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 5856,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.DEBUG:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">re.</tt><tt class=\"descname\">DEBUG</tt><a class=\"headerlink\" href=\"#re.DEBUG\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.data:nth-of-type(3) > dt#re.DEBUG:nth-of-type(1)",
      "text": [
        "re.",
        "DEBUG",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 5884,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "Display debug information about compiled expression.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.data:nth-of-type(3) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "Display debug information about compiled expression."
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 5922,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.I:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">re.</tt><tt class=\"descname\">I</tt><a class=\"headerlink\" href=\"#re.I\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.data:nth-of-type(4) > dt#re.I:nth-of-type(1)",
      "text": [
        "re.",
        "I",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 5947,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.IGNORECASE:nth-of-type(2)",
      "html": "\n<tt class=\"descclassname\">re.</tt><tt class=\"descname\">IGNORECASE</tt><a class=\"headerlink\" href=\"#re.IGNORECASE\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.data:nth-of-type(4) > dt#re.IGNORECASE:nth-of-type(2)",
      "text": [
        "re.",
        "IGNORECASE",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 295,
        "top": 5975,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "Perform case-insensitive matching; expressions like <tt class=\"docutils literal\"><span class=\"pre\">[A-Z]</span></tt> will match\nlowercase letters, too.  This is not affected by the current locale\nand works for Unicode characters as expected.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.data:nth-of-type(4) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "Perform case-insensitive matching; expressions like ",
        "[A-Z]",
        " will match\nlowercase letters, too.  This is not affected by the current locale\nand works for Unicode characters as expected."
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 6035,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.L:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">re.</tt><tt class=\"descname\">L</tt><a class=\"headerlink\" href=\"#re.L\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.data:nth-of-type(5) > dt#re.L:nth-of-type(1)",
      "text": [
        "re.",
        "L",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 6060,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.LOCALE:nth-of-type(2)",
      "html": "\n<tt class=\"descclassname\">re.</tt><tt class=\"descname\">LOCALE</tt><a class=\"headerlink\" href=\"#re.LOCALE\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.data:nth-of-type(5) > dt#re.LOCALE:nth-of-type(2)",
      "text": [
        "re.",
        "LOCALE",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 295,
        "top": 6088,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "Make <tt class=\"docutils literal\"><span class=\"pre\">\\w</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">\\W</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">\\b</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">\\B</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">\\s</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">\\S</span></tt> dependent on the\ncurrent locale. The use of this flag is discouraged as the locale mechanism\nis very unreliable, and it only handles one “culture” at a time anyway;\nyou should use Unicode matching instead, which is the default in Python 3\nfor Unicode (str) patterns.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.data:nth-of-type(5) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "Make ",
        "\\w",
        ", ",
        "\\W",
        ", ",
        "\\b",
        ", ",
        "\\B",
        ", ",
        "\\s",
        " and ",
        "\\S",
        " dependent on the\ncurrent locale. The use of this flag is discouraged as the locale mechanism\nis very unreliable, and it only handles one “culture” at a time anyway;\nyou should use Unicode matching instead, which is the default in Python 3\nfor Unicode (str) patterns."
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 6148,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.M:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">re.</tt><tt class=\"descname\">M</tt><a class=\"headerlink\" href=\"#re.M\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.data:nth-of-type(6) > dt#re.M:nth-of-type(1)",
      "text": [
        "re.",
        "M",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 6173,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.MULTILINE:nth-of-type(2)",
      "html": "\n<tt class=\"descclassname\">re.</tt><tt class=\"descname\">MULTILINE</tt><a class=\"headerlink\" href=\"#re.MULTILINE\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.data:nth-of-type(6) > dt#re.MULTILINE:nth-of-type(2)",
      "text": [
        "re.",
        "MULTILINE",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 295,
        "top": 6201,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "When specified, the pattern character <tt class=\"docutils literal\"><span class=\"pre\">'^'</span></tt> matches at the beginning of the\nstring and at the beginning of each line (immediately following each newline);\nand the pattern character <tt class=\"docutils literal\"><span class=\"pre\">'$'</span></tt> matches at the end of the string and at the\nend of each line (immediately preceding each newline).  By default, <tt class=\"docutils literal\"><span class=\"pre\">'^'</span></tt>\nmatches only at the beginning of the string, and <tt class=\"docutils literal\"><span class=\"pre\">'$'</span></tt> only at the end of the\nstring and immediately before the newline (if any) at the end of the string.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.data:nth-of-type(6) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "When specified, the pattern character ",
        "'^'",
        " matches at the beginning of the\nstring and at the beginning of each line (immediately following each newline);\nand the pattern character ",
        "'$'",
        " matches at the end of the string and at the\nend of each line (immediately preceding each newline).  By default, ",
        "'^'",
        "\nmatches only at the beginning of the string, and ",
        "'$'",
        " only at the end of the\nstring and immediately before the newline (if any) at the end of the string."
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 6283,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.S:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">re.</tt><tt class=\"descname\">S</tt><a class=\"headerlink\" href=\"#re.S\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.data:nth-of-type(7) > dt#re.S:nth-of-type(1)",
      "text": [
        "re.",
        "S",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 6308,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.DOTALL:nth-of-type(2)",
      "html": "\n<tt class=\"descclassname\">re.</tt><tt class=\"descname\">DOTALL</tt><a class=\"headerlink\" href=\"#re.DOTALL\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.data:nth-of-type(7) > dt#re.DOTALL:nth-of-type(2)",
      "text": [
        "re.",
        "DOTALL",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 6336,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "Make the <tt class=\"docutils literal\"><span class=\"pre\">'.'</span></tt> special character match any character at all, including a\nnewline; without this flag, <tt class=\"docutils literal\"><span class=\"pre\">'.'</span></tt> will match anything <em>except</em> a newline.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.data:nth-of-type(7) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "Make the ",
        "'.'",
        " special character match any character at all, including a\nnewline; without this flag, ",
        "'.'",
        " will match anything ",
        "except",
        " a newline."
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 6374,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.X:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">re.</tt><tt class=\"descname\">X</tt><a class=\"headerlink\" href=\"#re.X\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.data:nth-of-type(8) > dt#re.X:nth-of-type(1)",
      "text": [
        "re.",
        "X",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 6399,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.VERBOSE:nth-of-type(2)",
      "html": "\n<tt class=\"descclassname\">re.</tt><tt class=\"descname\">VERBOSE</tt><a class=\"headerlink\" href=\"#re.VERBOSE\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.data:nth-of-type(8) > dt#re.VERBOSE:nth-of-type(2)",
      "text": [
        "re.",
        "VERBOSE",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 295,
        "top": 6427,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "This flag allows you to write regular expressions that look nicer. Whitespace\nwithin the pattern is ignored, except when in a character class or preceded by\nan unescaped backslash, and, when a line contains a <tt class=\"docutils literal\"><span class=\"pre\">'#'</span></tt> neither in a\ncharacter class or preceded by an unescaped backslash, all characters from the\nleftmost such <tt class=\"docutils literal\"><span class=\"pre\">'#'</span></tt> through the end of the line are ignored.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.data:nth-of-type(8) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "This flag allows you to write regular expressions that look nicer. Whitespace\nwithin the pattern is ignored, except when in a character class or preceded by\nan unescaped backslash, and, when a line contains a ",
        "'#'",
        " neither in a\ncharacter class or preceded by an unescaped backslash, all characters from the\nleftmost such ",
        "'#'",
        " through the end of the line are ignored."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 6509,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "That means that the two following regular expression objects that match a\ndecimal number are functionally equal:",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.data:nth-of-type(8) > dd:nth-of-type(1) > p:nth-of-type(2)",
      "text": [
        "That means that the two following regular expression objects that match a\ndecimal number are functionally equal:"
      ]
    },
    {
      "bound": {
        "height": 84,
        "left": 295,
        "top": 6547,
        "width": 1289
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "text-align": "justify",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"s\">r\"\"\"\\d +  # the integral part</span>\n<span class=\"s\">                   \\.    # the decimal point</span>\n<span class=\"s\">                   \\d *  # some fractional digits\"\"\"</span><span class=\"p\">,</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">X</span><span class=\"p\">)</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"s\">r\"\\d+\\.\\d*\"</span><span class=\"p\">)</span>\n",
      "path": "div > div > div > div > div > div > dl > dd > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.data:nth-of-type(8) > dd:nth-of-type(1) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        "a",
        "=",
        "re",
        ".",
        "compile",
        "(",
        "r\"\"\"\\d +  # the integral part",
        "                   \\.    # the decimal point",
        "                   \\d *  # some fractional digits\"\"\"",
        ",",
        "re",
        ".",
        "X",
        ")",
        "b",
        "=",
        "re",
        ".",
        "compile",
        "(",
        "r\"\\d+\\.\\d*\"",
        ")"
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 6647,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.search:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">re.</tt><tt class=\"descname\">search</tt><big>(</big><em>pattern</em>, <em>string</em>, <em>flags=0</em><big>)</big><a class=\"headerlink\" href=\"#re.search\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(9) > dt#re.search:nth-of-type(1)",
      "text": [
        "re.",
        "search",
        "(",
        "pattern",
        ", ",
        "string",
        ", ",
        "flags=0",
        ")",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 295,
        "top": 6675,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "Scan through <em>string</em> looking for a location where the regular expression\n<em>pattern</em> produces a match, and return a corresponding <a class=\"reference internal\" href=\"#match-objects\"><em>match object</em></a>.  Return <tt class=\"xref docutils literal\"><span class=\"pre\">None</span></tt> if no position in the string matches the\npattern; note that this is different from finding a zero-length match at some\npoint in the string.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(9) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "Scan through ",
        "string",
        " looking for a location where the regular expression\n",
        "pattern",
        " produces a match, and return a corresponding ",
        "match object",
        ".  Return ",
        "None",
        " if no position in the string matches the\npattern; note that this is different from finding a zero-length match at some\npoint in the string."
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 6735,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.match:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">re.</tt><tt class=\"descname\">match</tt><big>(</big><em>pattern</em>, <em>string</em>, <em>flags=0</em><big>)</big><a class=\"headerlink\" href=\"#re.match\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(10) > dt#re.match:nth-of-type(1)",
      "text": [
        "re.",
        "match",
        "(",
        "pattern",
        ", ",
        "string",
        ", ",
        "flags=0",
        ")",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 295,
        "top": 6763,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "If zero or more characters at the beginning of <em>string</em> match the regular\nexpression <em>pattern</em>, return a corresponding <a class=\"reference internal\" href=\"#match-objects\"><em>match object</em></a>.  Return <tt class=\"xref docutils literal\"><span class=\"pre\">None</span></tt> if the string does not match the pattern;\nnote that this is different from a zero-length match.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(10) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "If zero or more characters at the beginning of ",
        "string",
        " match the regular\nexpression ",
        "pattern",
        ", return a corresponding ",
        "match object",
        ".  Return ",
        "None",
        " if the string does not match the pattern;\nnote that this is different from a zero-length match."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 6823,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "Note that even in <a class=\"reference internal\" href=\"#re.MULTILINE\" title=\"re.MULTILINE\"><tt class=\"xref py py-const docutils literal\"><span class=\"pre\">MULTILINE</span></tt></a> mode, <a class=\"reference internal\" href=\"#re.match\" title=\"re.match\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">re.match()</span></tt></a> will only match\nat the beginning of the string and not at the beginning of each line.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(10) > dd:nth-of-type(1) > p:nth-of-type(2)",
      "text": [
        "Note that even in ",
        "MULTILINE",
        " mode, ",
        "re.match()",
        " will only match\nat the beginning of the string and not at the beginning of each line."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 6861,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(3)",
      "html": "If you want to locate a match anywhere in <em>string</em>, use <a class=\"reference internal\" href=\"#re.search\" title=\"re.search\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">search()</span></tt></a>\ninstead (see also <a class=\"reference internal\" href=\"#search-vs-match\"><em>search() vs. match()</em></a>).",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(10) > dd:nth-of-type(1) > p:nth-of-type(3)",
      "text": [
        "If you want to locate a match anywhere in ",
        "string",
        ", use ",
        "search()",
        "\ninstead (see also ",
        "search() vs. match()",
        ")."
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 6899,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.split:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">re.</tt><tt class=\"descname\">split</tt><big>(</big><em>pattern</em>, <em>string</em>, <em>maxsplit=0</em>, <em>flags=0</em><big>)</big><a class=\"headerlink\" href=\"#re.split\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(11) > dt#re.split:nth-of-type(1)",
      "text": [
        "re.",
        "split",
        "(",
        "pattern",
        ", ",
        "string",
        ", ",
        "maxsplit=0",
        ", ",
        "flags=0",
        ")",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 295,
        "top": 6927,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "Split <em>string</em> by the occurrences of <em>pattern</em>.  If capturing parentheses are\nused in <em>pattern</em>, then the text of all groups in the pattern are also returned\nas part of the resulting list. If <em>maxsplit</em> is nonzero, at most <em>maxsplit</em>\nsplits occur, and the remainder of the string is returned as the final element\nof the list.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(11) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "Split ",
        "string",
        " by the occurrences of ",
        "pattern",
        ".  If capturing parentheses are\nused in ",
        "pattern",
        ", then the text of all groups in the pattern are also returned\nas part of the resulting list. If ",
        "maxsplit",
        " is nonzero, at most ",
        "maxsplit",
        "\nsplits occur, and the remainder of the string is returned as the final element\nof the list."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 1554,
        "top": 6987,
        "width": 30
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(170, 204, 153)",
        "cursor": "pointer",
        "font-family": "monospace",
        "font-size": "13px",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(170, 204, 153)",
        "padding-left": "2px",
        "padding-right": "2px",
        "position": "absolute",
        "text-align": "justify"
      },
      "element": "span.copybutton:nth-of-type(1)",
      "html": "&gt;&gt;&gt;",
      "path": "div > div > div > div > div > div > dl > dd > div > div > span",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(11) > dd:nth-of-type(1) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > span.copybutton:nth-of-type(1)",
      "text": [
        ">>>"
      ]
    },
    {
      "bound": {
        "height": 156,
        "left": 295,
        "top": 6987,
        "width": 1289
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "text-align": "justify",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s\">'\\W+'</span><span class=\"p\">,</span> <span class=\"s\">'Words, words, words.'</span><span class=\"p\">)</span>\n<span class=\"go\">['Words', 'words', 'words', '']</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s\">'(\\W+)'</span><span class=\"p\">,</span> <span class=\"s\">'Words, words, words.'</span><span class=\"p\">)</span>\n<span class=\"go\">['Words', ', ', 'words', ', ', 'words', '.', '']</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s\">'\\W+'</span><span class=\"p\">,</span> <span class=\"s\">'Words, words, words.'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">['Words', 'words, words.']</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s\">'[a-f]+'</span><span class=\"p\">,</span> <span class=\"s\">'0a3B9'</span><span class=\"p\">,</span> <span class=\"n\">flags</span><span class=\"o\">=</span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">IGNORECASE</span><span class=\"p\">)</span>\n<span class=\"go\">['0', '3', '9']</span>\n",
      "path": "div > div > div > div > div > div > dl > dd > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(11) > dd:nth-of-type(1) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        ">>> ",
        "re",
        ".",
        "split",
        "(",
        "'\\W+'",
        ",",
        "'Words, words, words.'",
        ")",
        "['Words', 'words', 'words', '']",
        ">>> ",
        "re",
        ".",
        "split",
        "(",
        "'(\\W+)'",
        ",",
        "'Words, words, words.'",
        ")",
        "['Words', ', ', 'words', ', ', 'words', '.', '']",
        ">>> ",
        "re",
        ".",
        "split",
        "(",
        "'\\W+'",
        ",",
        "'Words, words, words.'",
        ",",
        "1",
        ")",
        "['Words', 'words, words.']",
        ">>> ",
        "re",
        ".",
        "split",
        "(",
        "'[a-f]+'",
        ",",
        "'0a3B9'",
        ",",
        "flags",
        "=",
        "re",
        ".",
        "IGNORECASE",
        ")",
        "['0', '3', '9']"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 7158,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "If there are capturing groups in the separator and it matches at the start of\nthe string, the result will start with an empty string.  The same holds for\nthe end of the string:",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(11) > dd:nth-of-type(1) > p:nth-of-type(2)",
      "text": [
        "If there are capturing groups in the separator and it matches at the start of\nthe string, the result will start with an empty string.  The same holds for\nthe end of the string:"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 1554,
        "top": 7196,
        "width": 30
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(170, 204, 153)",
        "cursor": "pointer",
        "font-family": "monospace",
        "font-size": "13px",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(170, 204, 153)",
        "padding-left": "2px",
        "padding-right": "2px",
        "position": "absolute",
        "text-align": "justify"
      },
      "element": "span.copybutton:nth-of-type(1)",
      "html": "&gt;&gt;&gt;",
      "path": "div > div > div > div > div > div > dl > dd > div > div > span",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(11) > dd:nth-of-type(1) > div.highlight-python3:nth-of-type(2) > div.highlight:nth-of-type(1) > span.copybutton:nth-of-type(1)",
      "text": [
        ">>>"
      ]
    },
    {
      "bound": {
        "height": 48,
        "left": 295,
        "top": 7196,
        "width": 1289
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "text-align": "justify",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s\">'(\\W+)'</span><span class=\"p\">,</span> <span class=\"s\">'...words, words...'</span><span class=\"p\">)</span>\n<span class=\"go\">['', '...', 'words', ', ', 'words', '...', '']</span>\n",
      "path": "div > div > div > div > div > div > dl > dd > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(11) > dd:nth-of-type(1) > div.highlight-python3:nth-of-type(2) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        ">>> ",
        "re",
        ".",
        "split",
        "(",
        "'(\\W+)'",
        ",",
        "'...words, words...'",
        ")",
        "['', '...', 'words', ', ', 'words', '...', '']"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 7259,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(3)",
      "html": "That way, separator components are always found at the same relative\nindices within the result list.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(11) > dd:nth-of-type(1) > p:nth-of-type(3)",
      "text": [
        "That way, separator components are always found at the same relative\nindices within the result list."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 7297,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(4)",
      "html": "Note that <em>split</em> will never split a string on an empty pattern match.\nFor example:",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(11) > dd:nth-of-type(1) > p:nth-of-type(4)",
      "text": [
        "Note that ",
        "split",
        " will never split a string on an empty pattern match.\nFor example:"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 1554,
        "top": 7335,
        "width": 30
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(170, 204, 153)",
        "cursor": "pointer",
        "font-family": "monospace",
        "font-size": "13px",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(170, 204, 153)",
        "padding-left": "2px",
        "padding-right": "2px",
        "position": "absolute",
        "text-align": "justify"
      },
      "element": "span.copybutton:nth-of-type(1)",
      "html": "&gt;&gt;&gt;",
      "path": "div > div > div > div > div > div > dl > dd > div > div > span",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(11) > dd:nth-of-type(1) > div.highlight-python3:nth-of-type(3) > div.highlight:nth-of-type(1) > span.copybutton:nth-of-type(1)",
      "text": [
        ">>>"
      ]
    },
    {
      "bound": {
        "height": 84,
        "left": 295,
        "top": 7335,
        "width": 1289
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "text-align": "justify",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s\">'x*'</span><span class=\"p\">,</span> <span class=\"s\">'foo'</span><span class=\"p\">)</span>\n<span class=\"go\">['foo']</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s\">\"(?m)^$\"</span><span class=\"p\">,</span> <span class=\"s\">\"foo</span><span class=\"se\">\\n\\n</span><span class=\"s\">bar</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n<span class=\"go\">['foo\\n\\nbar\\n']</span>\n",
      "path": "div > div > div > div > div > div > dl > dd > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(11) > dd:nth-of-type(1) > div.highlight-python3:nth-of-type(3) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        ">>> ",
        "re",
        ".",
        "split",
        "(",
        "'x*'",
        ",",
        "'foo'",
        ")",
        "['foo']",
        ">>> ",
        "re",
        ".",
        "split",
        "(",
        "\"(?m)^$\"",
        ",",
        "\"foo",
        "\\n\\n",
        "bar",
        "\\n",
        "\"",
        ")",
        "['foo\\n\\nbar\\n']"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 7434,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p.versionchanged:nth-of-type(5)",
      "html": "\n<span class=\"versionmodified\">Changed in version 3.1:</span> Added the optional flags argument.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(11) > dd:nth-of-type(1) > p.versionchanged:nth-of-type(5)",
      "text": [
        "Changed in version 3.1:",
        " Added the optional flags argument."
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 7472,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.findall:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">re.</tt><tt class=\"descname\">findall</tt><big>(</big><em>pattern</em>, <em>string</em>, <em>flags=0</em><big>)</big><a class=\"headerlink\" href=\"#re.findall\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(12) > dt#re.findall:nth-of-type(1)",
      "text": [
        "re.",
        "findall",
        "(",
        "pattern",
        ", ",
        "string",
        ", ",
        "flags=0",
        ")",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 295,
        "top": 7500,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "Return all non-overlapping matches of <em>pattern</em> in <em>string</em>, as a list of\nstrings.  The <em>string</em> is scanned left-to-right, and matches are returned in\nthe order found.  If one or more groups are present in the pattern, return a\nlist of groups; this will be a list of tuples if the pattern has more than\none group.  Empty matches are included in the result unless they touch the\nbeginning of another match.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(12) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "Return all non-overlapping matches of ",
        "pattern",
        " in ",
        "string",
        ", as a list of\nstrings.  The ",
        "string",
        " is scanned left-to-right, and matches are returned in\nthe order found.  If one or more groups are present in the pattern, return a\nlist of groups; this will be a list of tuples if the pattern has more than\none group.  Empty matches are included in the result unless they touch the\nbeginning of another match."
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 7582,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.finditer:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">re.</tt><tt class=\"descname\">finditer</tt><big>(</big><em>pattern</em>, <em>string</em>, <em>flags=0</em><big>)</big><a class=\"headerlink\" href=\"#re.finditer\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(13) > dt#re.finditer:nth-of-type(1)",
      "text": [
        "re.",
        "finditer",
        "(",
        "pattern",
        ", ",
        "string",
        ", ",
        "flags=0",
        ")",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 295,
        "top": 7610,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "Return an <a class=\"reference internal\" href=\"../glossary.html#term-iterator\"><em class=\"xref std std-term\">iterator</em></a> yielding <a class=\"reference internal\" href=\"#match-objects\"><em>match objects</em></a> over\nall non-overlapping matches for the RE <em>pattern</em> in <em>string</em>.  The <em>string</em>\nis scanned left-to-right, and matches are returned in the order found.  Empty\nmatches are included in the result unless they touch the beginning of another\nmatch.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(13) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "Return an ",
        "iterator",
        " yielding ",
        "match objects",
        " over\nall non-overlapping matches for the RE ",
        "pattern",
        " in ",
        "string",
        ".  The ",
        "string",
        "\nis scanned left-to-right, and matches are returned in the order found.  Empty\nmatches are included in the result unless they touch the beginning of another\nmatch."
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 7670,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.sub:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">re.</tt><tt class=\"descname\">sub</tt><big>(</big><em>pattern</em>, <em>repl</em>, <em>string</em>, <em>count=0</em>, <em>flags=0</em><big>)</big><a class=\"headerlink\" href=\"#re.sub\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(14) > dt#re.sub:nth-of-type(1)",
      "text": [
        "re.",
        "sub",
        "(",
        "pattern",
        ", ",
        "repl",
        ", ",
        "string",
        ", ",
        "count=0",
        ", ",
        "flags=0",
        ")",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 88,
        "left": 295,
        "top": 7698,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "Return the string obtained by replacing the leftmost non-overlapping occurrences\nof <em>pattern</em> in <em>string</em> by the replacement <em>repl</em>.  If the pattern isn’t found,\n<em>string</em> is returned unchanged.  <em>repl</em> can be a string or a function; if it is\na string, any backslash escapes in it are processed.  That is, <tt class=\"docutils literal\"><span class=\"pre\">\\n</span></tt> is\nconverted to a single newline character, <tt class=\"docutils literal\"><span class=\"pre\">\\r</span></tt> is converted to a carriage return, and\nso forth.  Unknown escapes such as <tt class=\"docutils literal\"><span class=\"pre\">\\j</span></tt> are left alone.  Backreferences, such\nas <tt class=\"docutils literal\"><span class=\"pre\">\\6</span></tt>, are replaced with the substring matched by group 6 in the pattern.\nFor example:",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(14) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "Return the string obtained by replacing the leftmost non-overlapping occurrences\nof ",
        "pattern",
        " in ",
        "string",
        " by the replacement ",
        "repl",
        ".  If the pattern isn’t found,\n",
        "string",
        " is returned unchanged.  ",
        "repl",
        " can be a string or a function; if it is\na string, any backslash escapes in it are processed.  That is, ",
        "\\n",
        " is\nconverted to a single newline character, ",
        "\\r",
        " is converted to a carriage return, and\nso forth.  Unknown escapes such as ",
        "\\j",
        " are left alone.  Backreferences, such\nas ",
        "\\6",
        ", are replaced with the substring matched by group 6 in the pattern.\nFor example:"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 1554,
        "top": 7802,
        "width": 30
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(170, 204, 153)",
        "cursor": "pointer",
        "font-family": "monospace",
        "font-size": "13px",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(170, 204, 153)",
        "padding-left": "2px",
        "padding-right": "2px",
        "position": "absolute",
        "text-align": "justify"
      },
      "element": "span.copybutton:nth-of-type(1)",
      "html": "&gt;&gt;&gt;",
      "path": "div > div > div > div > div > div > dl > dd > div > div > span",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(14) > dd:nth-of-type(1) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > span.copybutton:nth-of-type(1)",
      "text": [
        ">>>"
      ]
    },
    {
      "bound": {
        "height": 84,
        "left": 295,
        "top": 7802,
        "width": 1289
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "text-align": "justify",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"s\">r'def\\s+([a-zA-Z_][a-zA-Z_0-9]*)\\s*\\(\\s*\\):'</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>       <span class=\"s\">r'static PyObject*\\npy_\\1(void)\\n{'</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>       <span class=\"s\">'def myfunc():'</span><span class=\"p\">)</span>\n<span class=\"go\">'static PyObject*\\npy_myfunc(void)\\n{'</span>\n",
      "path": "div > div > div > div > div > div > dl > dd > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(14) > dd:nth-of-type(1) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        ">>> ",
        "re",
        ".",
        "sub",
        "(",
        "r'def\\s+([a-zA-Z_][a-zA-Z_0-9]*)\\s*\\(\\s*\\):'",
        ",",
        "... ",
        "r'static PyObject*\\npy_\\1(void)\\n{'",
        ",",
        "... ",
        "'def myfunc():'",
        ")",
        "'static PyObject*\\npy_myfunc(void)\\n{'"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 295,
        "top": 7901,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "If <em>repl</em> is a function, it is called for every non-overlapping occurrence of\n<em>pattern</em>.  The function takes a single match object argument, and returns the\nreplacement string.  For example:",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(14) > dd:nth-of-type(1) > p:nth-of-type(2)",
      "text": [
        "If ",
        "repl",
        " is a function, it is called for every non-overlapping occurrence of\n",
        "pattern",
        ".  The function takes a single match object argument, and returns the\nreplacement string.  For example:"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 1554,
        "top": 7961,
        "width": 30
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(170, 204, 153)",
        "cursor": "pointer",
        "font-family": "monospace",
        "font-size": "13px",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(170, 204, 153)",
        "padding-left": "2px",
        "padding-right": "2px",
        "position": "absolute",
        "text-align": "justify"
      },
      "element": "span.copybutton:nth-of-type(1)",
      "html": "&gt;&gt;&gt;",
      "path": "div > div > div > div > div > div > dl > dd > div > div > span",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(14) > dd:nth-of-type(1) > div.highlight-python3:nth-of-type(2) > div.highlight:nth-of-type(1) > span.copybutton:nth-of-type(1)",
      "text": [
        ">>>"
      ]
    },
    {
      "bound": {
        "height": 138,
        "left": 295,
        "top": 7961,
        "width": 1289
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "text-align": "justify",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">dashrepl</span><span class=\"p\">(</span><span class=\"n\">matchobj</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"k\">if</span> <span class=\"n\">matchobj</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s\">'-'</span><span class=\"p\">:</span> <span class=\"k\">return</span> <span class=\"s\">' '</span>\n<span class=\"gp\">... </span>    <span class=\"k\">else</span><span class=\"p\">:</span> <span class=\"k\">return</span> <span class=\"s\">'-'</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"s\">'-{1,2}'</span><span class=\"p\">,</span> <span class=\"n\">dashrepl</span><span class=\"p\">,</span> <span class=\"s\">'pro----gram-files'</span><span class=\"p\">)</span>\n<span class=\"go\">'pro--gram files'</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"s\">r'\\sAND\\s'</span><span class=\"p\">,</span> <span class=\"s\">' &amp; '</span><span class=\"p\">,</span> <span class=\"s\">'Baked Beans And Spam'</span><span class=\"p\">,</span> <span class=\"n\">flags</span><span class=\"o\">=</span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">IGNORECASE</span><span class=\"p\">)</span>\n<span class=\"go\">'Baked Beans &amp; Spam'</span>\n",
      "path": "div > div > div > div > div > div > dl > dd > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(14) > dd:nth-of-type(1) > div.highlight-python3:nth-of-type(2) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        ">>> ",
        "def",
        "dashrepl",
        "(",
        "matchobj",
        "):",
        "... ",
        "if",
        "matchobj",
        ".",
        "group",
        "(",
        "0",
        ")",
        "==",
        "'-'",
        ":",
        "return",
        "' '",
        "... ",
        "else",
        ":",
        "return",
        "'-'",
        ">>> ",
        "re",
        ".",
        "sub",
        "(",
        "'-{1,2}'",
        ",",
        "dashrepl",
        ",",
        "'pro----gram-files'",
        ")",
        "'pro--gram files'",
        ">>> ",
        "re",
        ".",
        "sub",
        "(",
        "r'\\sAND\\s'",
        ",",
        "' & '",
        ",",
        "'Baked Beans And Spam'",
        ",",
        "flags",
        "=",
        "re",
        ".",
        "IGNORECASE",
        ")",
        "'Baked Beans & Spam'"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 8114,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(3)",
      "html": "The pattern may be a string or an RE object.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(14) > dd:nth-of-type(1) > p:nth-of-type(3)",
      "text": [
        "The pattern may be a string or an RE object."
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 295,
        "top": 8152,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(4)",
      "html": "The optional argument <em>count</em> is the maximum number of pattern occurrences to be\nreplaced; <em>count</em> must be a non-negative integer.  If omitted or zero, all\noccurrences will be replaced. Empty matches for the pattern are replaced only\nwhen not adjacent to a previous match, so <tt class=\"docutils literal\"><span class=\"pre\">sub('x*',</span> <span class=\"pre\">'-',</span> <span class=\"pre\">'abc')</span></tt> returns\n<tt class=\"docutils literal\"><span class=\"pre\">'-a-b-c-'</span></tt>.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(14) > dd:nth-of-type(1) > p:nth-of-type(4)",
      "text": [
        "The optional argument ",
        "count",
        " is the maximum number of pattern occurrences to be\nreplaced; ",
        "count",
        " must be a non-negative integer.  If omitted or zero, all\noccurrences will be replaced. Empty matches for the pattern are replaced only\nwhen not adjacent to a previous match, so ",
        "sub('x*',",
        "'-',",
        "'abc')",
        " returns\n",
        "'-a-b-c-'",
        "."
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 295,
        "top": 8212,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(5)",
      "html": "In addition to character escapes and backreferences as described above,\n<tt class=\"docutils literal\"><span class=\"pre\">\\g&lt;name&gt;</span></tt> will use the substring matched by the group named <tt class=\"docutils literal\"><span class=\"pre\">name</span></tt>, as\ndefined by the <tt class=\"docutils literal\"><span class=\"pre\">(?P&lt;name&gt;...)</span></tt> syntax. <tt class=\"docutils literal\"><span class=\"pre\">\\g&lt;number&gt;</span></tt> uses the corresponding\ngroup number; <tt class=\"docutils literal\"><span class=\"pre\">\\g&lt;2&gt;</span></tt> is therefore equivalent to <tt class=\"docutils literal\"><span class=\"pre\">\\2</span></tt>, but isn’t ambiguous\nin a replacement such as <tt class=\"docutils literal\"><span class=\"pre\">\\g&lt;2&gt;0</span></tt>.  <tt class=\"docutils literal\"><span class=\"pre\">\\20</span></tt> would be interpreted as a\nreference to group 20, not a reference to group 2 followed by the literal\ncharacter <tt class=\"docutils literal\"><span class=\"pre\">'0'</span></tt>.  The backreference <tt class=\"docutils literal\"><span class=\"pre\">\\g&lt;0&gt;</span></tt> substitutes in the entire\nsubstring matched by the RE.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(14) > dd:nth-of-type(1) > p:nth-of-type(5)",
      "text": [
        "In addition to character escapes and backreferences as described above,\n",
        "\\g<name>",
        " will use the substring matched by the group named ",
        "name",
        ", as\ndefined by the ",
        "(?P<name>...)",
        " syntax. ",
        "\\g<number>",
        " uses the corresponding\ngroup number; ",
        "\\g<2>",
        " is therefore equivalent to ",
        "\\2",
        ", but isn’t ambiguous\nin a replacement such as ",
        "\\g<2>0",
        ".  ",
        "\\20",
        " would be interpreted as a\nreference to group 20, not a reference to group 2 followed by the literal\ncharacter ",
        "'0'",
        ".  The backreference ",
        "\\g<0>",
        " substitutes in the entire\nsubstring matched by the RE."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 8294,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p.versionchanged:nth-of-type(6)",
      "html": "\n<span class=\"versionmodified\">Changed in version 3.1:</span> Added the optional flags argument.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(14) > dd:nth-of-type(1) > p.versionchanged:nth-of-type(6)",
      "text": [
        "Changed in version 3.1:",
        " Added the optional flags argument."
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 8332,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.subn:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">re.</tt><tt class=\"descname\">subn</tt><big>(</big><em>pattern</em>, <em>repl</em>, <em>string</em>, <em>count=0</em>, <em>flags=0</em><big>)</big><a class=\"headerlink\" href=\"#re.subn\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(15) > dt#re.subn:nth-of-type(1)",
      "text": [
        "re.",
        "subn",
        "(",
        "pattern",
        ", ",
        "repl",
        ", ",
        "string",
        ", ",
        "count=0",
        ", ",
        "flags=0",
        ")",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 8360,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "Perform the same operation as <a class=\"reference internal\" href=\"#re.sub\" title=\"re.sub\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">sub()</span></tt></a>, but return a tuple <tt class=\"docutils literal\"><span class=\"pre\">(new_string,</span>\n<span class=\"pre\">number_of_subs_made)</span></tt>.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(15) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "Perform the same operation as ",
        "sub()",
        ", but return a tuple ",
        "(new_string,",
        "number_of_subs_made)",
        "."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 8398,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p.versionchanged:nth-of-type(2)",
      "html": "\n<span class=\"versionmodified\">Changed in version 3.1:</span> Added the optional flags argument.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(15) > dd:nth-of-type(1) > p.versionchanged:nth-of-type(2)",
      "text": [
        "Changed in version 3.1:",
        " Added the optional flags argument."
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 8436,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.escape:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">re.</tt><tt class=\"descname\">escape</tt><big>(</big><em>string</em><big>)</big><a class=\"headerlink\" href=\"#re.escape\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(16) > dt#re.escape:nth-of-type(1)",
      "text": [
        "re.",
        "escape",
        "(",
        "string",
        ")",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 295,
        "top": 8464,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "Escape all the characters in pattern except ASCII letters, numbers and <tt class=\"docutils literal\"><span class=\"pre\">'_'</span></tt>.\nThis is useful if you want to match an arbitrary literal string that may\nhave regular expression metacharacters in it.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(16) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "Escape all the characters in pattern except ASCII letters, numbers and ",
        "'_'",
        ".\nThis is useful if you want to match an arbitrary literal string that may\nhave regular expression metacharacters in it."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 8524,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p.versionchanged:nth-of-type(2)",
      "html": "\n<span class=\"versionmodified\">Changed in version 3.3:</span> The <tt class=\"docutils literal\"><span class=\"pre\">'_'</span></tt> character is no longer escaped.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(16) > dd:nth-of-type(1) > p.versionchanged:nth-of-type(2)",
      "text": [
        "Changed in version 3.3:",
        " The ",
        "'_'",
        " character is no longer escaped."
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 8562,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.purge:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">re.</tt><tt class=\"descname\">purge</tt><big>(</big><big>)</big><a class=\"headerlink\" href=\"#re.purge\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(17) > dt#re.purge:nth-of-type(1)",
      "text": [
        "re.",
        "purge",
        "(",
        ")",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 8590,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "Clear the regular expression cache.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.function:nth-of-type(17) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "Clear the regular expression cache."
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 8628,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.error:nth-of-type(1)",
      "html": "\n<em class=\"property\">exception </em><tt class=\"descclassname\">re.</tt><tt class=\"descname\">error</tt><a class=\"headerlink\" href=\"#re.error\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.exception:nth-of-type(18) > dt#re.error:nth-of-type(1)",
      "text": [
        "exception ",
        "re.",
        "error",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 295,
        "top": 8656,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "Exception raised when a string passed to one of the functions here is not a\nvalid regular expression (for example, it might contain unmatched parentheses)\nor when some other error occurs during compilation or matching.  It is never an\nerror if a string contains no match for a pattern.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#module-contents.section:nth-of-type(3) > dl.exception:nth-of-type(18) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "Exception raised when a string passed to one of the functions here is not a\nvalid regular expression (for example, it might contain unmatched parentheses)\nor when some other error occurs during compilation or matching.  It is never an\nerror if a string contains no match for a pattern."
      ]
    },
    {
      "bound": {
        "height": 46,
        "left": 265,
        "top": 8716,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "26px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "7px",
        "padding-top": "7px"
      },
      "element": "h2:nth-of-type(1)",
      "html": "6.2.3. Regular Expression Objects<a class=\"headerlink\" href=\"#regular-expression-objects\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > div > h2",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-objects.section:nth-of-type(4) > h2:nth-of-type(1)",
      "text": [
        "6.2.3. Regular Expression Objects",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 8778,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "Compiled regular expression objects support the following methods and\nattributes:",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-objects.section:nth-of-type(4) > p:nth-of-type(1)",
      "text": [
        "Compiled regular expression objects support the following methods and\nattributes:"
      ]
    },
    {
      "bound": {
        "height": 26,
        "left": 265,
        "top": 8816,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.regex.search:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">regex.</tt><tt class=\"descname\">search</tt><big>(</big><em>string</em><span class=\"optional\">[</span>, <em>pos</em><span class=\"optional\">[</span>, <em>endpos</em><span class=\"optional\">]</span><span class=\"optional\">]</span><big>)</big><a class=\"headerlink\" href=\"#re.regex.search\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-objects.section:nth-of-type(4) > dl.method:nth-of-type(1) > dt#re.regex.search:nth-of-type(1)",
      "text": [
        "regex.",
        "search",
        "(",
        "string",
        "[",
        ", ",
        "pos",
        "[",
        ", ",
        "endpos",
        "]",
        "]",
        ")",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 295,
        "top": 8845,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "Scan through <em>string</em> looking for a location where this regular expression\nproduces a match, and return a corresponding <a class=\"reference internal\" href=\"#match-objects\"><em>match object</em></a>.  Return <tt class=\"xref docutils literal\"><span class=\"pre\">None</span></tt> if no position in the string matches the\npattern; note that this is different from finding a zero-length match at some\npoint in the string.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-objects.section:nth-of-type(4) > dl.method:nth-of-type(1) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "Scan through ",
        "string",
        " looking for a location where this regular expression\nproduces a match, and return a corresponding ",
        "match object",
        ".  Return ",
        "None",
        " if no position in the string matches the\npattern; note that this is different from finding a zero-length match at some\npoint in the string."
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 295,
        "top": 8905,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "The optional second parameter <em>pos</em> gives an index in the string where the\nsearch is to start; it defaults to <tt class=\"docutils literal\"><span class=\"pre\">0</span></tt>.  This is not completely equivalent to\nslicing the string; the <tt class=\"docutils literal\"><span class=\"pre\">'^'</span></tt> pattern character matches at the real beginning\nof the string and at positions just after a newline, but not necessarily at the\nindex where the search is to start.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-objects.section:nth-of-type(4) > dl.method:nth-of-type(1) > dd:nth-of-type(1) > p:nth-of-type(2)",
      "text": [
        "The optional second parameter ",
        "pos",
        " gives an index in the string where the\nsearch is to start; it defaults to ",
        "0",
        ".  This is not completely equivalent to\nslicing the string; the ",
        "'^'",
        " pattern character matches at the real beginning\nof the string and at positions just after a newline, but not necessarily at the\nindex where the search is to start."
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 295,
        "top": 8965,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(3)",
      "html": "The optional parameter <em>endpos</em> limits how far the string will be searched; it\nwill be as if the string is <em>endpos</em> characters long, so only the characters\nfrom <em>pos</em> to <tt class=\"docutils literal\"><span class=\"pre\">endpos</span> <span class=\"pre\">-</span> <span class=\"pre\">1</span></tt> will be searched for a match.  If <em>endpos</em> is less\nthan <em>pos</em>, no match will be found; otherwise, if <em>rx</em> is a compiled regular\nexpression object, <tt class=\"docutils literal\"><span class=\"pre\">rx.search(string,</span> <span class=\"pre\">0,</span> <span class=\"pre\">50)</span></tt> is equivalent to\n<tt class=\"docutils literal\"><span class=\"pre\">rx.search(string[:50],</span> <span class=\"pre\">0)</span></tt>.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-objects.section:nth-of-type(4) > dl.method:nth-of-type(1) > dd:nth-of-type(1) > p:nth-of-type(3)",
      "text": [
        "The optional parameter ",
        "endpos",
        " limits how far the string will be searched; it\nwill be as if the string is ",
        "endpos",
        " characters long, so only the characters\nfrom ",
        "pos",
        " to ",
        "endpos",
        "-",
        "1",
        " will be searched for a match.  If ",
        "endpos",
        " is less\nthan ",
        "pos",
        ", no match will be found; otherwise, if ",
        "rx",
        " is a compiled regular\nexpression object, ",
        "rx.search(string,",
        "0,",
        "50)",
        " is equivalent to\n",
        "rx.search(string[:50],",
        "0)",
        "."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 1554,
        "top": 9047,
        "width": 30
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(170, 204, 153)",
        "cursor": "pointer",
        "font-family": "monospace",
        "font-size": "13px",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(170, 204, 153)",
        "padding-left": "2px",
        "padding-right": "2px",
        "position": "absolute",
        "text-align": "justify"
      },
      "element": "span.copybutton:nth-of-type(1)",
      "html": "&gt;&gt;&gt;",
      "path": "div > div > div > div > div > div > dl > dd > div > div > span",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-objects.section:nth-of-type(4) > dl.method:nth-of-type(1) > dd:nth-of-type(1) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > span.copybutton:nth-of-type(1)",
      "text": [
        ">>>"
      ]
    },
    {
      "bound": {
        "height": 84,
        "left": 295,
        "top": 9047,
        "width": 1289
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "text-align": "justify",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pattern</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"s\">\"d\"</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pattern</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"s\">\"dog\"</span><span class=\"p\">)</span>     <span class=\"c\"># Match at index 0</span>\n<span class=\"go\">&lt;_sre.SRE_Match object at ...&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pattern</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"s\">\"dog\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c\"># No match; search doesn't include the \"d\"</span>\n",
      "path": "div > div > div > div > div > div > dl > dd > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-objects.section:nth-of-type(4) > dl.method:nth-of-type(1) > dd:nth-of-type(1) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        ">>> ",
        "pattern",
        "=",
        "re",
        ".",
        "compile",
        "(",
        "\"d\"",
        ")",
        ">>> ",
        "pattern",
        ".",
        "search",
        "(",
        "\"dog\"",
        ")",
        "# Match at index 0",
        "<_sre.SRE_Match object at ...>",
        ">>> ",
        "pattern",
        ".",
        "search",
        "(",
        "\"dog\"",
        ",",
        "1",
        ")",
        "# No match; search doesn't include the \"d\""
      ]
    },
    {
      "bound": {
        "height": 26,
        "left": 265,
        "top": 9147,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.regex.match:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">regex.</tt><tt class=\"descname\">match</tt><big>(</big><em>string</em><span class=\"optional\">[</span>, <em>pos</em><span class=\"optional\">[</span>, <em>endpos</em><span class=\"optional\">]</span><span class=\"optional\">]</span><big>)</big><a class=\"headerlink\" href=\"#re.regex.match\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-objects.section:nth-of-type(4) > dl.method:nth-of-type(2) > dt#re.regex.match:nth-of-type(1)",
      "text": [
        "regex.",
        "match",
        "(",
        "string",
        "[",
        ", ",
        "pos",
        "[",
        ", ",
        "endpos",
        "]",
        "]",
        ")",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 295,
        "top": 9176,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "If zero or more characters at the <em>beginning</em> of <em>string</em> match this regular\nexpression, return a corresponding <a class=\"reference internal\" href=\"#match-objects\"><em>match object</em></a>.\nReturn <tt class=\"xref docutils literal\"><span class=\"pre\">None</span></tt> if the string does not match the pattern; note that this is\ndifferent from a zero-length match.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-objects.section:nth-of-type(4) > dl.method:nth-of-type(2) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "If zero or more characters at the ",
        "beginning",
        " of ",
        "string",
        " match this regular\nexpression, return a corresponding ",
        "match object",
        ".\nReturn ",
        "None",
        " if the string does not match the pattern; note that this is\ndifferent from a zero-length match."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 9236,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "The optional <em>pos</em> and <em>endpos</em> parameters have the same meaning as for the\n<a class=\"reference internal\" href=\"#re.regex.search\" title=\"re.regex.search\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">search()</span></tt></a> method.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-objects.section:nth-of-type(4) > dl.method:nth-of-type(2) > dd:nth-of-type(1) > p:nth-of-type(2)",
      "text": [
        "The optional ",
        "pos",
        " and ",
        "endpos",
        " parameters have the same meaning as for the\n",
        "search()",
        " method."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 1554,
        "top": 9274,
        "width": 30
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(170, 204, 153)",
        "cursor": "pointer",
        "font-family": "monospace",
        "font-size": "13px",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(170, 204, 153)",
        "padding-left": "2px",
        "padding-right": "2px",
        "position": "absolute",
        "text-align": "justify"
      },
      "element": "span.copybutton:nth-of-type(1)",
      "html": "&gt;&gt;&gt;",
      "path": "div > div > div > div > div > div > dl > dd > div > div > span",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-objects.section:nth-of-type(4) > dl.method:nth-of-type(2) > dd:nth-of-type(1) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > span.copybutton:nth-of-type(1)",
      "text": [
        ">>>"
      ]
    },
    {
      "bound": {
        "height": 84,
        "left": 295,
        "top": 9274,
        "width": 1289
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "text-align": "justify",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pattern</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"s\">\"o\"</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pattern</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"s\">\"dog\"</span><span class=\"p\">)</span>      <span class=\"c\"># No match as \"o\" is not at the start of \"dog\".</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pattern</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"s\">\"dog\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>   <span class=\"c\"># Match as \"o\" is the 2nd character of \"dog\".</span>\n<span class=\"go\">&lt;_sre.SRE_Match object at ...&gt;</span>\n",
      "path": "div > div > div > div > div > div > dl > dd > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-objects.section:nth-of-type(4) > dl.method:nth-of-type(2) > dd:nth-of-type(1) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        ">>> ",
        "pattern",
        "=",
        "re",
        ".",
        "compile",
        "(",
        "\"o\"",
        ")",
        ">>> ",
        "pattern",
        ".",
        "match",
        "(",
        "\"dog\"",
        ")",
        "# No match as \"o\" is not at the start of \"dog\".",
        ">>> ",
        "pattern",
        ".",
        "match",
        "(",
        "\"dog\"",
        ",",
        "1",
        ")",
        "# Match as \"o\" is the 2nd character of \"dog\".",
        "<_sre.SRE_Match object at ...>"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 9373,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(3)",
      "html": "If you want to locate a match anywhere in <em>string</em>, use\n<a class=\"reference internal\" href=\"#re.regex.search\" title=\"re.regex.search\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">search()</span></tt></a> instead (see also <a class=\"reference internal\" href=\"#search-vs-match\"><em>search() vs. match()</em></a>).",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-objects.section:nth-of-type(4) > dl.method:nth-of-type(2) > dd:nth-of-type(1) > p:nth-of-type(3)",
      "text": [
        "If you want to locate a match anywhere in ",
        "string",
        ", use\n",
        "search()",
        " instead (see also ",
        "search() vs. match()",
        ")."
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 9411,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.regex.split:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">regex.</tt><tt class=\"descname\">split</tt><big>(</big><em>string</em>, <em>maxsplit=0</em><big>)</big><a class=\"headerlink\" href=\"#re.regex.split\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-objects.section:nth-of-type(4) > dl.method:nth-of-type(3) > dt#re.regex.split:nth-of-type(1)",
      "text": [
        "regex.",
        "split",
        "(",
        "string",
        ", ",
        "maxsplit=0",
        ")",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 9439,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "Identical to the <a class=\"reference internal\" href=\"#re.split\" title=\"re.split\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">split()</span></tt></a> function, using the compiled pattern.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-objects.section:nth-of-type(4) > dl.method:nth-of-type(3) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "Identical to the ",
        "split()",
        " function, using the compiled pattern."
      ]
    },
    {
      "bound": {
        "height": 26,
        "left": 265,
        "top": 9477,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.regex.findall:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">regex.</tt><tt class=\"descname\">findall</tt><big>(</big><em>string</em><span class=\"optional\">[</span>, <em>pos</em><span class=\"optional\">[</span>, <em>endpos</em><span class=\"optional\">]</span><span class=\"optional\">]</span><big>)</big><a class=\"headerlink\" href=\"#re.regex.findall\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-objects.section:nth-of-type(4) > dl.method:nth-of-type(4) > dt#re.regex.findall:nth-of-type(1)",
      "text": [
        "regex.",
        "findall",
        "(",
        "string",
        "[",
        ", ",
        "pos",
        "[",
        ", ",
        "endpos",
        "]",
        "]",
        ")",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 9506,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "Similar to the <a class=\"reference internal\" href=\"#re.findall\" title=\"re.findall\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">findall()</span></tt></a> function, using the compiled pattern, but\nalso accepts optional <em>pos</em> and <em>endpos</em> parameters that limit the search\nregion like for <a class=\"reference internal\" href=\"#re.match\" title=\"re.match\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">match()</span></tt></a>.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-objects.section:nth-of-type(4) > dl.method:nth-of-type(4) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "Similar to the ",
        "findall()",
        " function, using the compiled pattern, but\nalso accepts optional ",
        "pos",
        " and ",
        "endpos",
        " parameters that limit the search\nregion like for ",
        "match()",
        "."
      ]
    },
    {
      "bound": {
        "height": 26,
        "left": 265,
        "top": 9544,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.regex.finditer:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">regex.</tt><tt class=\"descname\">finditer</tt><big>(</big><em>string</em><span class=\"optional\">[</span>, <em>pos</em><span class=\"optional\">[</span>, <em>endpos</em><span class=\"optional\">]</span><span class=\"optional\">]</span><big>)</big><a class=\"headerlink\" href=\"#re.regex.finditer\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-objects.section:nth-of-type(4) > dl.method:nth-of-type(5) > dt#re.regex.finditer:nth-of-type(1)",
      "text": [
        "regex.",
        "finditer",
        "(",
        "string",
        "[",
        ", ",
        "pos",
        "[",
        ", ",
        "endpos",
        "]",
        "]",
        ")",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 9573,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "Similar to the <a class=\"reference internal\" href=\"#re.finditer\" title=\"re.finditer\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">finditer()</span></tt></a> function, using the compiled pattern, but\nalso accepts optional <em>pos</em> and <em>endpos</em> parameters that limit the search\nregion like for <a class=\"reference internal\" href=\"#re.match\" title=\"re.match\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">match()</span></tt></a>.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-objects.section:nth-of-type(4) > dl.method:nth-of-type(5) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "Similar to the ",
        "finditer()",
        " function, using the compiled pattern, but\nalso accepts optional ",
        "pos",
        " and ",
        "endpos",
        " parameters that limit the search\nregion like for ",
        "match()",
        "."
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 9611,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.regex.sub:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">regex.</tt><tt class=\"descname\">sub</tt><big>(</big><em>repl</em>, <em>string</em>, <em>count=0</em><big>)</big><a class=\"headerlink\" href=\"#re.regex.sub\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-objects.section:nth-of-type(4) > dl.method:nth-of-type(6) > dt#re.regex.sub:nth-of-type(1)",
      "text": [
        "regex.",
        "sub",
        "(",
        "repl",
        ", ",
        "string",
        ", ",
        "count=0",
        ")",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 9639,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "Identical to the <a class=\"reference internal\" href=\"#re.sub\" title=\"re.sub\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">sub()</span></tt></a> function, using the compiled pattern.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-objects.section:nth-of-type(4) > dl.method:nth-of-type(6) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "Identical to the ",
        "sub()",
        " function, using the compiled pattern."
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 9677,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.regex.subn:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">regex.</tt><tt class=\"descname\">subn</tt><big>(</big><em>repl</em>, <em>string</em>, <em>count=0</em><big>)</big><a class=\"headerlink\" href=\"#re.regex.subn\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-objects.section:nth-of-type(4) > dl.method:nth-of-type(7) > dt#re.regex.subn:nth-of-type(1)",
      "text": [
        "regex.",
        "subn",
        "(",
        "repl",
        ", ",
        "string",
        ", ",
        "count=0",
        ")",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 9705,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "Identical to the <a class=\"reference internal\" href=\"#re.subn\" title=\"re.subn\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">subn()</span></tt></a> function, using the compiled pattern.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-objects.section:nth-of-type(4) > dl.method:nth-of-type(7) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "Identical to the ",
        "subn()",
        " function, using the compiled pattern."
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 9743,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.regex.flags:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">regex.</tt><tt class=\"descname\">flags</tt><a class=\"headerlink\" href=\"#re.regex.flags\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-objects.section:nth-of-type(4) > dl.attribute:nth-of-type(8) > dt#re.regex.flags:nth-of-type(1)",
      "text": [
        "regex.",
        "flags",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 295,
        "top": 9771,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "The regex matching flags.  This is a combination of the flags given to\n<a class=\"reference internal\" href=\"#re.compile\" title=\"re.compile\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">compile()</span></tt></a>, any <tt class=\"docutils literal\"><span class=\"pre\">(?...)</span></tt> inline flags in the pattern, and implicit\nflags such as <tt class=\"xref py py-data docutils literal\"><span class=\"pre\">UNICODE</span></tt> if the pattern is a Unicode string.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-objects.section:nth-of-type(4) > dl.attribute:nth-of-type(8) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "The regex matching flags.  This is a combination of the flags given to\n",
        "compile()",
        ", any ",
        "(?...)",
        " inline flags in the pattern, and implicit\nflags such as ",
        "UNICODE",
        " if the pattern is a Unicode string."
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 9831,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.regex.groups:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">regex.</tt><tt class=\"descname\">groups</tt><a class=\"headerlink\" href=\"#re.regex.groups\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-objects.section:nth-of-type(4) > dl.attribute:nth-of-type(9) > dt#re.regex.groups:nth-of-type(1)",
      "text": [
        "regex.",
        "groups",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 9859,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "The number of capturing groups in the pattern.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-objects.section:nth-of-type(4) > dl.attribute:nth-of-type(9) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "The number of capturing groups in the pattern."
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 9897,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.regex.groupindex:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">regex.</tt><tt class=\"descname\">groupindex</tt><a class=\"headerlink\" href=\"#re.regex.groupindex\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-objects.section:nth-of-type(4) > dl.attribute:nth-of-type(10) > dt#re.regex.groupindex:nth-of-type(1)",
      "text": [
        "regex.",
        "groupindex",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 9925,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "A dictionary mapping any symbolic group names defined by <tt class=\"docutils literal\"><span class=\"pre\">(?P&lt;id&gt;)</span></tt> to group\nnumbers.  The dictionary is empty if no symbolic groups were used in the\npattern.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-objects.section:nth-of-type(4) > dl.attribute:nth-of-type(10) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "A dictionary mapping any symbolic group names defined by ",
        "(?P<id>)",
        " to group\nnumbers.  The dictionary is empty if no symbolic groups were used in the\npattern."
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 9963,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.regex.pattern:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">regex.</tt><tt class=\"descname\">pattern</tt><a class=\"headerlink\" href=\"#re.regex.pattern\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-objects.section:nth-of-type(4) > dl.attribute:nth-of-type(11) > dt#re.regex.pattern:nth-of-type(1)",
      "text": [
        "regex.",
        "pattern",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 9991,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "The pattern string from which the RE object was compiled.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-objects.section:nth-of-type(4) > dl.attribute:nth-of-type(11) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "The pattern string from which the RE object was compiled."
      ]
    },
    {
      "bound": {
        "height": 46,
        "left": 265,
        "top": 10029,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "26px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "7px",
        "padding-top": "7px"
      },
      "element": "h2:nth-of-type(1)",
      "html": "6.2.4. Match Objects<a class=\"headerlink\" href=\"#match-objects\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > div > h2",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > h2:nth-of-type(1)",
      "text": [
        "6.2.4. Match Objects",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 10091,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "Match objects always have a boolean value of <tt class=\"xref docutils literal\"><span class=\"pre\">True</span></tt>.\nSince <a class=\"reference internal\" href=\"#re.regex.match\" title=\"re.regex.match\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">match()</span></tt></a> and <a class=\"reference internal\" href=\"#re.regex.search\" title=\"re.regex.search\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">search()</span></tt></a> return <tt class=\"xref docutils literal\"><span class=\"pre\">None</span></tt>\nwhen there is no match, you can test whether there was a match with a simple\n<tt class=\"docutils literal\"><span class=\"pre\">if</span></tt> statement:",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > p:nth-of-type(1)",
      "text": [
        "Match objects always have a boolean value of ",
        "True",
        ".\nSince ",
        "match()",
        " and ",
        "search()",
        " return ",
        "None",
        "\nwhen there is no match, you can test whether there was a match with a simple\n",
        "if",
        " statement:"
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 265,
        "top": 10151,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">,</span> <span class=\"n\">string</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">match</span><span class=\"p\">:</span>\n    <span class=\"n\">process</span><span class=\"p\">(</span><span class=\"n\">match</span><span class=\"p\">)</span>\n",
      "path": "div > div > div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        "match",
        "=",
        "re",
        ".",
        "search",
        "(",
        "pattern",
        ",",
        "string",
        ")",
        "if",
        "match",
        ":",
        "process",
        "(",
        "match",
        ")"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 10233,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "Match objects support the following methods and attributes:",
      "path": "div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > p:nth-of-type(2)",
      "text": [
        "Match objects support the following methods and attributes:"
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 10271,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.match.expand:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">match.</tt><tt class=\"descname\">expand</tt><big>(</big><em>template</em><big>)</big><a class=\"headerlink\" href=\"#re.match.expand\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.method:nth-of-type(1) > dt#re.match.expand:nth-of-type(1)",
      "text": [
        "match.",
        "expand",
        "(",
        "template",
        ")",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 295,
        "top": 10299,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "Return the string obtained by doing backslash substitution on the template\nstring <em>template</em>, as done by the <a class=\"reference internal\" href=\"#re.regex.sub\" title=\"re.regex.sub\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">sub()</span></tt></a> method.\nEscapes such as <tt class=\"docutils literal\"><span class=\"pre\">\\n</span></tt> are converted to the appropriate characters,\nand numeric backreferences (<tt class=\"docutils literal\"><span class=\"pre\">\\1</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">\\2</span></tt>) and named backreferences\n(<tt class=\"docutils literal\"><span class=\"pre\">\\g&lt;1&gt;</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">\\g&lt;name&gt;</span></tt>) are replaced by the contents of the\ncorresponding group.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.method:nth-of-type(1) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "Return the string obtained by doing backslash substitution on the template\nstring ",
        "template",
        ", as done by the ",
        "sub()",
        " method.\nEscapes such as ",
        "\\n",
        " are converted to the appropriate characters,\nand numeric backreferences (",
        "\\1",
        ", ",
        "\\2",
        ") and named backreferences\n(",
        "\\g<1>",
        ", ",
        "\\g<name>",
        ") are replaced by the contents of the\ncorresponding group."
      ]
    },
    {
      "bound": {
        "height": 26,
        "left": 265,
        "top": 10359,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.match.group:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">match.</tt><tt class=\"descname\">group</tt><big>(</big><span class=\"optional\">[</span><em>group1</em>, <em>...</em><span class=\"optional\">]</span><big>)</big><a class=\"headerlink\" href=\"#re.match.group\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.method:nth-of-type(2) > dt#re.match.group:nth-of-type(1)",
      "text": [
        "match.",
        "group",
        "(",
        "[",
        "group1",
        ", ",
        "...",
        "]",
        ")",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 110,
        "left": 295,
        "top": 10388,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "Returns one or more subgroups of the match.  If there is a single argument, the\nresult is a single string; if there are multiple arguments, the result is a\ntuple with one item per argument. Without arguments, <em>group1</em> defaults to zero\n(the whole match is returned). If a <em>groupN</em> argument is zero, the corresponding\nreturn value is the entire matching string; if it is in the inclusive range\n[1..99], it is the string matching the corresponding parenthesized group.  If a\ngroup number is negative or larger than the number of groups defined in the\npattern, an <a class=\"reference internal\" href=\"exceptions.html#IndexError\" title=\"IndexError\"><tt class=\"xref py py-exc docutils literal\"><span class=\"pre\">IndexError</span></tt></a> exception is raised. If a group is contained in a\npart of the pattern that did not match, the corresponding result is <tt class=\"xref docutils literal\"><span class=\"pre\">None</span></tt>.\nIf a group is contained in a part of the pattern that matched multiple times,\nthe last match is returned.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.method:nth-of-type(2) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "Returns one or more subgroups of the match.  If there is a single argument, the\nresult is a single string; if there are multiple arguments, the result is a\ntuple with one item per argument. Without arguments, ",
        "group1",
        " defaults to zero\n(the whole match is returned). If a ",
        "groupN",
        " argument is zero, the corresponding\nreturn value is the entire matching string; if it is in the inclusive range\n[1..99], it is the string matching the corresponding parenthesized group.  If a\ngroup number is negative or larger than the number of groups defined in the\npattern, an ",
        "IndexError",
        " exception is raised. If a group is contained in a\npart of the pattern that did not match, the corresponding result is ",
        "None",
        ".\nIf a group is contained in a part of the pattern that matched multiple times,\nthe last match is returned."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 1554,
        "top": 10514,
        "width": 30
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(170, 204, 153)",
        "cursor": "pointer",
        "font-family": "monospace",
        "font-size": "13px",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(170, 204, 153)",
        "padding-left": "2px",
        "padding-right": "2px",
        "position": "absolute",
        "text-align": "justify"
      },
      "element": "span.copybutton:nth-of-type(1)",
      "html": "&gt;&gt;&gt;",
      "path": "div > div > div > div > div > div > dl > dd > div > div > span",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.method:nth-of-type(2) > dd:nth-of-type(1) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > span.copybutton:nth-of-type(1)",
      "text": [
        ">>>"
      ]
    },
    {
      "bound": {
        "height": 174,
        "left": 295,
        "top": 10514,
        "width": 1289
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "text-align": "justify",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"s\">r\"(\\w+) (\\w+)\"</span><span class=\"p\">,</span> <span class=\"s\">\"Isaac Newton, physicist\"</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>       <span class=\"c\"># The entire match</span>\n<span class=\"go\">'Isaac Newton'</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>       <span class=\"c\"># The first parenthesized subgroup.</span>\n<span class=\"go\">'Isaac'</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>       <span class=\"c\"># The second parenthesized subgroup.</span>\n<span class=\"go\">'Newton'</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>    <span class=\"c\"># Multiple arguments give us a tuple.</span>\n<span class=\"go\">('Isaac', 'Newton')</span>\n",
      "path": "div > div > div > div > div > div > dl > dd > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.method:nth-of-type(2) > dd:nth-of-type(1) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        ">>> ",
        "m",
        "=",
        "re",
        ".",
        "match",
        "(",
        "r\"(\\w+) (\\w+)\"",
        ",",
        "\"Isaac Newton, physicist\"",
        ")",
        ">>> ",
        "m",
        ".",
        "group",
        "(",
        "0",
        ")",
        "# The entire match",
        "'Isaac Newton'",
        ">>> ",
        "m",
        ".",
        "group",
        "(",
        "1",
        ")",
        "# The first parenthesized subgroup.",
        "'Isaac'",
        ">>> ",
        "m",
        ".",
        "group",
        "(",
        "2",
        ")",
        "# The second parenthesized subgroup.",
        "'Newton'",
        ">>> ",
        "m",
        ".",
        "group",
        "(",
        "1",
        ",",
        "2",
        ")",
        "# Multiple arguments give us a tuple.",
        "('Isaac', 'Newton')"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 295,
        "top": 10703,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "If the regular expression uses the <tt class=\"docutils literal\"><span class=\"pre\">(?P&lt;name&gt;...)</span></tt> syntax, the <em>groupN</em>\narguments may also be strings identifying groups by their group name.  If a\nstring argument is not used as a group name in the pattern, an <a class=\"reference internal\" href=\"exceptions.html#IndexError\" title=\"IndexError\"><tt class=\"xref py py-exc docutils literal\"><span class=\"pre\">IndexError</span></tt></a>\nexception is raised.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.method:nth-of-type(2) > dd:nth-of-type(1) > p:nth-of-type(2)",
      "text": [
        "If the regular expression uses the ",
        "(?P<name>...)",
        " syntax, the ",
        "groupN",
        "\narguments may also be strings identifying groups by their group name.  If a\nstring argument is not used as a group name in the pattern, an ",
        "IndexError",
        "\nexception is raised."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 10763,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(3)",
      "html": "A moderately complicated example:",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.method:nth-of-type(2) > dd:nth-of-type(1) > p:nth-of-type(3)",
      "text": [
        "A moderately complicated example:"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 1554,
        "top": 10801,
        "width": 30
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(170, 204, 153)",
        "cursor": "pointer",
        "font-family": "monospace",
        "font-size": "13px",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(170, 204, 153)",
        "padding-left": "2px",
        "padding-right": "2px",
        "position": "absolute",
        "text-align": "justify"
      },
      "element": "span.copybutton:nth-of-type(1)",
      "html": "&gt;&gt;&gt;",
      "path": "div > div > div > div > div > div > dl > dd > div > div > span",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.method:nth-of-type(2) > dd:nth-of-type(1) > div.highlight-python3:nth-of-type(2) > div.highlight:nth-of-type(1) > span.copybutton:nth-of-type(1)",
      "text": [
        ">>>"
      ]
    },
    {
      "bound": {
        "height": 102,
        "left": 295,
        "top": 10801,
        "width": 1289
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "text-align": "justify",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"s\">r\"(?P&lt;first_name&gt;\\w+) (?P&lt;last_name&gt;\\w+)\"</span><span class=\"p\">,</span> <span class=\"s\">\"Malcolm Reynolds\"</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"s\">'first_name'</span><span class=\"p\">)</span>\n<span class=\"go\">'Malcolm'</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"s\">'last_name'</span><span class=\"p\">)</span>\n<span class=\"go\">'Reynolds'</span>\n",
      "path": "div > div > div > div > div > div > dl > dd > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.method:nth-of-type(2) > dd:nth-of-type(1) > div.highlight-python3:nth-of-type(2) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        ">>> ",
        "m",
        "=",
        "re",
        ".",
        "match",
        "(",
        "r\"(?P<first_name>\\w+) (?P<last_name>\\w+)\"",
        ",",
        "\"Malcolm Reynolds\"",
        ")",
        ">>> ",
        "m",
        ".",
        "group",
        "(",
        "'first_name'",
        ")",
        "'Malcolm'",
        ">>> ",
        "m",
        ".",
        "group",
        "(",
        "'last_name'",
        ")",
        "'Reynolds'"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 10918,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(4)",
      "html": "Named groups can also be referred to by their index:",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.method:nth-of-type(2) > dd:nth-of-type(1) > p:nth-of-type(4)",
      "text": [
        "Named groups can also be referred to by their index:"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 1554,
        "top": 10956,
        "width": 30
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(170, 204, 153)",
        "cursor": "pointer",
        "font-family": "monospace",
        "font-size": "13px",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(170, 204, 153)",
        "padding-left": "2px",
        "padding-right": "2px",
        "position": "absolute",
        "text-align": "justify"
      },
      "element": "span.copybutton:nth-of-type(1)",
      "html": "&gt;&gt;&gt;",
      "path": "div > div > div > div > div > div > dl > dd > div > div > span",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.method:nth-of-type(2) > dd:nth-of-type(1) > div.highlight-python3:nth-of-type(3) > div.highlight:nth-of-type(1) > span.copybutton:nth-of-type(1)",
      "text": [
        ">>>"
      ]
    },
    {
      "bound": {
        "height": 84,
        "left": 295,
        "top": 10956,
        "width": 1289
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "text-align": "justify",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">'Malcolm'</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">'Reynolds'</span>\n",
      "path": "div > div > div > div > div > div > dl > dd > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.method:nth-of-type(2) > dd:nth-of-type(1) > div.highlight-python3:nth-of-type(3) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        ">>> ",
        "m",
        ".",
        "group",
        "(",
        "1",
        ")",
        "'Malcolm'",
        ">>> ",
        "m",
        ".",
        "group",
        "(",
        "2",
        ")",
        "'Reynolds'"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 11055,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(5)",
      "html": "If a group matches multiple times, only the last match is accessible:",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.method:nth-of-type(2) > dd:nth-of-type(1) > p:nth-of-type(5)",
      "text": [
        "If a group matches multiple times, only the last match is accessible:"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 1554,
        "top": 11093,
        "width": 30
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(170, 204, 153)",
        "cursor": "pointer",
        "font-family": "monospace",
        "font-size": "13px",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(170, 204, 153)",
        "padding-left": "2px",
        "padding-right": "2px",
        "position": "absolute",
        "text-align": "justify"
      },
      "element": "span.copybutton:nth-of-type(1)",
      "html": "&gt;&gt;&gt;",
      "path": "div > div > div > div > div > div > dl > dd > div > div > span",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.method:nth-of-type(2) > dd:nth-of-type(1) > div.highlight-python3:nth-of-type(4) > div.highlight:nth-of-type(1) > span.copybutton:nth-of-type(1)",
      "text": [
        ">>>"
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 295,
        "top": 11093,
        "width": 1289
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "text-align": "justify",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"s\">r\"(..)+\"</span><span class=\"p\">,</span> <span class=\"s\">\"a1b2c3\"</span><span class=\"p\">)</span>  <span class=\"c\"># Matches 3 times.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>                        <span class=\"c\"># Returns only the last match.</span>\n<span class=\"go\">'c3'</span>\n",
      "path": "div > div > div > div > div > div > dl > dd > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.method:nth-of-type(2) > dd:nth-of-type(1) > div.highlight-python3:nth-of-type(4) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        ">>> ",
        "m",
        "=",
        "re",
        ".",
        "match",
        "(",
        "r\"(..)+\"",
        ",",
        "\"a1b2c3\"",
        ")",
        "# Matches 3 times.",
        ">>> ",
        "m",
        ".",
        "group",
        "(",
        "1",
        ")",
        "# Returns only the last match.",
        "'c3'"
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 11175,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.match.groups:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">match.</tt><tt class=\"descname\">groups</tt><big>(</big><em>default=None</em><big>)</big><a class=\"headerlink\" href=\"#re.match.groups\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.method:nth-of-type(3) > dt#re.match.groups:nth-of-type(1)",
      "text": [
        "match.",
        "groups",
        "(",
        "default=None",
        ")",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 295,
        "top": 11203,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "Return a tuple containing all the subgroups of the match, from 1 up to however\nmany groups are in the pattern.  The <em>default</em> argument is used for groups that\ndid not participate in the match; it defaults to <tt class=\"xref docutils literal\"><span class=\"pre\">None</span></tt>.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.method:nth-of-type(3) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "Return a tuple containing all the subgroups of the match, from 1 up to however\nmany groups are in the pattern.  The ",
        "default",
        " argument is used for groups that\ndid not participate in the match; it defaults to ",
        "None",
        "."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 11263,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "For example:",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.method:nth-of-type(3) > dd:nth-of-type(1) > p:nth-of-type(2)",
      "text": [
        "For example:"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 1554,
        "top": 11301,
        "width": 30
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(170, 204, 153)",
        "cursor": "pointer",
        "font-family": "monospace",
        "font-size": "13px",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(170, 204, 153)",
        "padding-left": "2px",
        "padding-right": "2px",
        "position": "absolute",
        "text-align": "justify"
      },
      "element": "span.copybutton:nth-of-type(1)",
      "html": "&gt;&gt;&gt;",
      "path": "div > div > div > div > div > div > dl > dd > div > div > span",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.method:nth-of-type(3) > dd:nth-of-type(1) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > span.copybutton:nth-of-type(1)",
      "text": [
        ">>>"
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 295,
        "top": 11301,
        "width": 1289
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "text-align": "justify",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"s\">r\"(\\d+)\\.(\\d+)\"</span><span class=\"p\">,</span> <span class=\"s\">\"24.1632\"</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">groups</span><span class=\"p\">()</span>\n<span class=\"go\">('24', '1632')</span>\n",
      "path": "div > div > div > div > div > div > dl > dd > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.method:nth-of-type(3) > dd:nth-of-type(1) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        ">>> ",
        "m",
        "=",
        "re",
        ".",
        "match",
        "(",
        "r\"(\\d+)\\.(\\d+)\"",
        ",",
        "\"24.1632\"",
        ")",
        ">>> ",
        "m",
        ".",
        "groups",
        "()",
        "('24', '1632')"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 295,
        "top": 11382,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(3)",
      "html": "If we make the decimal place and everything after it optional, not all groups\nmight participate in the match.  These groups will default to <tt class=\"xref docutils literal\"><span class=\"pre\">None</span></tt> unless\nthe <em>default</em> argument is given:",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.method:nth-of-type(3) > dd:nth-of-type(1) > p:nth-of-type(3)",
      "text": [
        "If we make the decimal place and everything after it optional, not all groups\nmight participate in the match.  These groups will default to ",
        "None",
        " unless\nthe ",
        "default",
        " argument is given:"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 1554,
        "top": 11442,
        "width": 30
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(170, 204, 153)",
        "cursor": "pointer",
        "font-family": "monospace",
        "font-size": "13px",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(170, 204, 153)",
        "padding-left": "2px",
        "padding-right": "2px",
        "position": "absolute",
        "text-align": "justify"
      },
      "element": "span.copybutton:nth-of-type(1)",
      "html": "&gt;&gt;&gt;",
      "path": "div > div > div > div > div > div > dl > dd > div > div > span",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.method:nth-of-type(3) > dd:nth-of-type(1) > div.highlight-python3:nth-of-type(2) > div.highlight:nth-of-type(1) > span.copybutton:nth-of-type(1)",
      "text": [
        ">>>"
      ]
    },
    {
      "bound": {
        "height": 102,
        "left": 295,
        "top": 11442,
        "width": 1289
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "text-align": "justify",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"s\">r\"(\\d+)\\.?(\\d+)?\"</span><span class=\"p\">,</span> <span class=\"s\">\"24\"</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">groups</span><span class=\"p\">()</span>      <span class=\"c\"># Second group defaults to None.</span>\n<span class=\"go\">('24', None)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">groups</span><span class=\"p\">(</span><span class=\"s\">'0'</span><span class=\"p\">)</span>   <span class=\"c\"># Now, the second group defaults to '0'.</span>\n<span class=\"go\">('24', '0')</span>\n",
      "path": "div > div > div > div > div > div > dl > dd > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.method:nth-of-type(3) > dd:nth-of-type(1) > div.highlight-python3:nth-of-type(2) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        ">>> ",
        "m",
        "=",
        "re",
        ".",
        "match",
        "(",
        "r\"(\\d+)\\.?(\\d+)?\"",
        ",",
        "\"24\"",
        ")",
        ">>> ",
        "m",
        ".",
        "groups",
        "()",
        "# Second group defaults to None.",
        "('24', None)",
        ">>> ",
        "m",
        ".",
        "groups",
        "(",
        "'0'",
        ")",
        "# Now, the second group defaults to '0'.",
        "('24', '0')"
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 11560,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.match.groupdict:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">match.</tt><tt class=\"descname\">groupdict</tt><big>(</big><em>default=None</em><big>)</big><a class=\"headerlink\" href=\"#re.match.groupdict\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.method:nth-of-type(4) > dt#re.match.groupdict:nth-of-type(1)",
      "text": [
        "match.",
        "groupdict",
        "(",
        "default=None",
        ")",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 295,
        "top": 11588,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "Return a dictionary containing all the <em>named</em> subgroups of the match, keyed by\nthe subgroup name.  The <em>default</em> argument is used for groups that did not\nparticipate in the match; it defaults to <tt class=\"xref docutils literal\"><span class=\"pre\">None</span></tt>.  For example:",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.method:nth-of-type(4) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "Return a dictionary containing all the ",
        "named",
        " subgroups of the match, keyed by\nthe subgroup name.  The ",
        "default",
        " argument is used for groups that did not\nparticipate in the match; it defaults to ",
        "None",
        ".  For example:"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 1554,
        "top": 11648,
        "width": 30
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(170, 204, 153)",
        "cursor": "pointer",
        "font-family": "monospace",
        "font-size": "13px",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(170, 204, 153)",
        "padding-left": "2px",
        "padding-right": "2px",
        "position": "absolute",
        "text-align": "justify"
      },
      "element": "span.copybutton:nth-of-type(1)",
      "html": "&gt;&gt;&gt;",
      "path": "div > div > div > div > div > div > dl > dd > div > div > span",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.method:nth-of-type(4) > dd:nth-of-type(1) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > span.copybutton:nth-of-type(1)",
      "text": [
        ">>>"
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 295,
        "top": 11648,
        "width": 1289
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "text-align": "justify",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"s\">r\"(?P&lt;first_name&gt;\\w+) (?P&lt;last_name&gt;\\w+)\"</span><span class=\"p\">,</span> <span class=\"s\">\"Malcolm Reynolds\"</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">groupdict</span><span class=\"p\">()</span>\n<span class=\"go\">{'first_name': 'Malcolm', 'last_name': 'Reynolds'}</span>\n",
      "path": "div > div > div > div > div > div > dl > dd > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.method:nth-of-type(4) > dd:nth-of-type(1) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        ">>> ",
        "m",
        "=",
        "re",
        ".",
        "match",
        "(",
        "r\"(?P<first_name>\\w+) (?P<last_name>\\w+)\"",
        ",",
        "\"Malcolm Reynolds\"",
        ")",
        ">>> ",
        "m",
        ".",
        "groupdict",
        "()",
        "{'first_name': 'Malcolm', 'last_name': 'Reynolds'}"
      ]
    },
    {
      "bound": {
        "height": 26,
        "left": 265,
        "top": 11730,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.match.start:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">match.</tt><tt class=\"descname\">start</tt><big>(</big><span class=\"optional\">[</span><em>group</em><span class=\"optional\">]</span><big>)</big><a class=\"headerlink\" href=\"#re.match.start\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.method:nth-of-type(5) > dt#re.match.start:nth-of-type(1)",
      "text": [
        "match.",
        "start",
        "(",
        "[",
        "group",
        "]",
        ")",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 26,
        "left": 265,
        "top": 11756,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.match.end:nth-of-type(2)",
      "html": "\n<tt class=\"descclassname\">match.</tt><tt class=\"descname\">end</tt><big>(</big><span class=\"optional\">[</span><em>group</em><span class=\"optional\">]</span><big>)</big><a class=\"headerlink\" href=\"#re.match.end\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.method:nth-of-type(5) > dt#re.match.end:nth-of-type(2)",
      "text": [
        "match.",
        "end",
        "(",
        "[",
        "group",
        "]",
        ")",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 295,
        "top": 11785,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "Return the indices of the start and end of the substring matched by <em>group</em>;\n<em>group</em> defaults to zero (meaning the whole matched substring). Return <tt class=\"docutils literal\"><span class=\"pre\">-1</span></tt> if\n<em>group</em> exists but did not contribute to the match.  For a match object <em>m</em>, and\na group <em>g</em> that did contribute to the match, the substring matched by group <em>g</em>\n(equivalent to <tt class=\"docutils literal\"><span class=\"pre\">m.group(g)</span></tt>) is",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.method:nth-of-type(5) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "Return the indices of the start and end of the substring matched by ",
        "group",
        ";\n",
        "group",
        " defaults to zero (meaning the whole matched substring). Return ",
        "-1",
        " if\n",
        "group",
        " exists but did not contribute to the match.  For a match object ",
        "m",
        ", and\na group ",
        "g",
        " that did contribute to the match, the substring matched by group ",
        "g",
        "\n(equivalent to ",
        "m.group(g)",
        ") is"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 295,
        "top": 11845,
        "width": 1289
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "text-align": "justify",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">string</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">):</span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">end</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">)]</span>\n",
      "path": "div > div > div > div > div > div > dl > dd > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.method:nth-of-type(5) > dd:nth-of-type(1) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        "m",
        ".",
        "string",
        "[",
        "m",
        ".",
        "start",
        "(",
        "g",
        "):",
        "m",
        ".",
        "end",
        "(",
        "g",
        ")]"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 295,
        "top": 11890,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "Note that <tt class=\"docutils literal\"><span class=\"pre\">m.start(group)</span></tt> will equal <tt class=\"docutils literal\"><span class=\"pre\">m.end(group)</span></tt> if <em>group</em> matched a\nnull string.  For example, after <tt class=\"docutils literal\"><span class=\"pre\">m</span> <span class=\"pre\">=</span> <span class=\"pre\">re.search('b(c?)',</span> <span class=\"pre\">'cba')</span></tt>,\n<tt class=\"docutils literal\"><span class=\"pre\">m.start(0)</span></tt> is 1, <tt class=\"docutils literal\"><span class=\"pre\">m.end(0)</span></tt> is 2, <tt class=\"docutils literal\"><span class=\"pre\">m.start(1)</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">m.end(1)</span></tt> are both\n2, and <tt class=\"docutils literal\"><span class=\"pre\">m.start(2)</span></tt> raises an <a class=\"reference internal\" href=\"exceptions.html#IndexError\" title=\"IndexError\"><tt class=\"xref py py-exc docutils literal\"><span class=\"pre\">IndexError</span></tt></a> exception.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.method:nth-of-type(5) > dd:nth-of-type(1) > p:nth-of-type(2)",
      "text": [
        "Note that ",
        "m.start(group)",
        " will equal ",
        "m.end(group)",
        " if ",
        "group",
        " matched a\nnull string.  For example, after ",
        "m",
        "=",
        "re.search('b(c?)',",
        "'cba')",
        ",\n",
        "m.start(0)",
        " is 1, ",
        "m.end(0)",
        " is 2, ",
        "m.start(1)",
        " and ",
        "m.end(1)",
        " are both\n2, and ",
        "m.start(2)",
        " raises an ",
        "IndexError",
        " exception."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 11950,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(3)",
      "html": "An example that will remove <em>remove_this</em> from email addresses:",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.method:nth-of-type(5) > dd:nth-of-type(1) > p:nth-of-type(3)",
      "text": [
        "An example that will remove ",
        "remove_this",
        " from email addresses:"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 1554,
        "top": 11988,
        "width": 30
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(170, 204, 153)",
        "cursor": "pointer",
        "font-family": "monospace",
        "font-size": "13px",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(170, 204, 153)",
        "padding-left": "2px",
        "padding-right": "2px",
        "position": "absolute",
        "text-align": "justify"
      },
      "element": "span.copybutton:nth-of-type(1)",
      "html": "&gt;&gt;&gt;",
      "path": "div > div > div > div > div > div > dl > dd > div > div > span",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.method:nth-of-type(5) > dd:nth-of-type(1) > div.highlight-python3:nth-of-type(2) > div.highlight:nth-of-type(1) > span.copybutton:nth-of-type(1)",
      "text": [
        ">>>"
      ]
    },
    {
      "bound": {
        "height": 84,
        "left": 295,
        "top": 11988,
        "width": 1289
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "text-align": "justify",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"s\">\"tony@tiremove_thisger.net\"</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"s\">\"remove_this\"</span><span class=\"p\">,</span> <span class=\"n\">email</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">email</span><span class=\"p\">[:</span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()]</span> <span class=\"o\">+</span> <span class=\"n\">email</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">end</span><span class=\"p\">():]</span>\n<span class=\"go\">'tony@tiger.net'</span>\n",
      "path": "div > div > div > div > div > div > dl > dd > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.method:nth-of-type(5) > dd:nth-of-type(1) > div.highlight-python3:nth-of-type(2) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        ">>> ",
        "email",
        "=",
        "\"tony@tiremove_thisger.net\"",
        ">>> ",
        "m",
        "=",
        "re",
        ".",
        "search",
        "(",
        "\"remove_this\"",
        ",",
        "email",
        ")",
        ">>> ",
        "email",
        "[:",
        "m",
        ".",
        "start",
        "()]",
        "+",
        "email",
        "[",
        "m",
        ".",
        "end",
        "():]",
        "'tony@tiger.net'"
      ]
    },
    {
      "bound": {
        "height": 26,
        "left": 265,
        "top": 12088,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.match.span:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">match.</tt><tt class=\"descname\">span</tt><big>(</big><span class=\"optional\">[</span><em>group</em><span class=\"optional\">]</span><big>)</big><a class=\"headerlink\" href=\"#re.match.span\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.method:nth-of-type(6) > dt#re.match.span:nth-of-type(1)",
      "text": [
        "match.",
        "span",
        "(",
        "[",
        "group",
        "]",
        ")",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 12117,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "For a match <em>m</em>, return the 2-tuple <tt class=\"docutils literal\"><span class=\"pre\">(m.start(group),</span> <span class=\"pre\">m.end(group))</span></tt>. Note\nthat if <em>group</em> did not contribute to the match, this is <tt class=\"docutils literal\"><span class=\"pre\">(-1,</span> <span class=\"pre\">-1)</span></tt>.\n<em>group</em> defaults to zero, the entire match.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.method:nth-of-type(6) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "For a match ",
        "m",
        ", return the 2-tuple ",
        "(m.start(group),",
        "m.end(group))",
        ". Note\nthat if ",
        "group",
        " did not contribute to the match, this is ",
        "(-1,",
        "-1)",
        ".\n",
        "group",
        " defaults to zero, the entire match."
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 12155,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.match.pos:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">match.</tt><tt class=\"descname\">pos</tt><a class=\"headerlink\" href=\"#re.match.pos\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.attribute:nth-of-type(7) > dt#re.match.pos:nth-of-type(1)",
      "text": [
        "match.",
        "pos",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 12183,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "The value of <em>pos</em> which was passed to the <a class=\"reference internal\" href=\"#re.regex.search\" title=\"re.regex.search\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">search()</span></tt></a> or\n<a class=\"reference internal\" href=\"#re.regex.match\" title=\"re.regex.match\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">match()</span></tt></a> method of a <a class=\"reference internal\" href=\"#re-objects\"><em>regex object</em></a>.  This is\nthe index into the string at which the RE engine started looking for a match.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.attribute:nth-of-type(7) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "The value of ",
        "pos",
        " which was passed to the ",
        "search()",
        " or\n",
        "match()",
        " method of a ",
        "regex object",
        ".  This is\nthe index into the string at which the RE engine started looking for a match."
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 12221,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.match.endpos:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">match.</tt><tt class=\"descname\">endpos</tt><a class=\"headerlink\" href=\"#re.match.endpos\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.attribute:nth-of-type(8) > dt#re.match.endpos:nth-of-type(1)",
      "text": [
        "match.",
        "endpos",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 12249,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "The value of <em>endpos</em> which was passed to the <a class=\"reference internal\" href=\"#re.regex.search\" title=\"re.regex.search\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">search()</span></tt></a> or\n<a class=\"reference internal\" href=\"#re.regex.match\" title=\"re.regex.match\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">match()</span></tt></a> method of a <a class=\"reference internal\" href=\"#re-objects\"><em>regex object</em></a>.  This is\nthe index into the string beyond which the RE engine will not go.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.attribute:nth-of-type(8) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "The value of ",
        "endpos",
        " which was passed to the ",
        "search()",
        " or\n",
        "match()",
        " method of a ",
        "regex object",
        ".  This is\nthe index into the string beyond which the RE engine will not go."
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 12287,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.match.lastindex:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">match.</tt><tt class=\"descname\">lastindex</tt><a class=\"headerlink\" href=\"#re.match.lastindex\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.attribute:nth-of-type(9) > dt#re.match.lastindex:nth-of-type(1)",
      "text": [
        "match.",
        "lastindex",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 295,
        "top": 12315,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "The integer index of the last matched capturing group, or <tt class=\"xref docutils literal\"><span class=\"pre\">None</span></tt> if no group\nwas matched at all. For example, the expressions <tt class=\"docutils literal\"><span class=\"pre\">(a)b</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">((a)(b))</span></tt>, and\n<tt class=\"docutils literal\"><span class=\"pre\">((ab))</span></tt> will have <tt class=\"docutils literal\"><span class=\"pre\">lastindex</span> <span class=\"pre\">==</span> <span class=\"pre\">1</span></tt> if applied to the string <tt class=\"docutils literal\"><span class=\"pre\">'ab'</span></tt>, while\nthe expression <tt class=\"docutils literal\"><span class=\"pre\">(a)(b)</span></tt> will have <tt class=\"docutils literal\"><span class=\"pre\">lastindex</span> <span class=\"pre\">==</span> <span class=\"pre\">2</span></tt>, if applied to the same\nstring.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.attribute:nth-of-type(9) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "The integer index of the last matched capturing group, or ",
        "None",
        " if no group\nwas matched at all. For example, the expressions ",
        "(a)b",
        ", ",
        "((a)(b))",
        ", and\n",
        "((ab))",
        " will have ",
        "lastindex",
        "==",
        "1",
        " if applied to the string ",
        "'ab'",
        ", while\nthe expression ",
        "(a)(b)",
        " will have ",
        "lastindex",
        "==",
        "2",
        ", if applied to the same\nstring."
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 12375,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.match.lastgroup:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">match.</tt><tt class=\"descname\">lastgroup</tt><a class=\"headerlink\" href=\"#re.match.lastgroup\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.attribute:nth-of-type(10) > dt#re.match.lastgroup:nth-of-type(1)",
      "text": [
        "match.",
        "lastgroup",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 12403,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "The name of the last matched capturing group, or <tt class=\"xref docutils literal\"><span class=\"pre\">None</span></tt> if the group didn’t\nhave a name, or if no group was matched at all.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.attribute:nth-of-type(10) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "The name of the last matched capturing group, or ",
        "None",
        " if the group didn’t\nhave a name, or if no group was matched at all."
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 12441,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.match.re:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">match.</tt><tt class=\"descname\">re</tt><a class=\"headerlink\" href=\"#re.match.re\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.attribute:nth-of-type(11) > dt#re.match.re:nth-of-type(1)",
      "text": [
        "match.",
        "re",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 12469,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "The regular expression object whose <a class=\"reference internal\" href=\"#re.regex.match\" title=\"re.regex.match\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">match()</span></tt></a> or\n<a class=\"reference internal\" href=\"#re.regex.search\" title=\"re.regex.search\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">search()</span></tt></a> method produced this match instance.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.attribute:nth-of-type(11) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "The regular expression object whose ",
        "match()",
        " or\n",
        "search()",
        " method produced this match instance."
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 12507,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#re.match.string:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">match.</tt><tt class=\"descname\">string</tt><a class=\"headerlink\" href=\"#re.match.string\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.attribute:nth-of-type(12) > dt#re.match.string:nth-of-type(1)",
      "text": [
        "match.",
        "string",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 12535,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "The string passed to <a class=\"reference internal\" href=\"#re.regex.match\" title=\"re.regex.match\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">match()</span></tt></a> or <a class=\"reference internal\" href=\"#re.regex.search\" title=\"re.regex.search\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">search()</span></tt></a>.",
      "path": "div > div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#match-objects.section:nth-of-type(5) > dl.attribute:nth-of-type(12) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "The string passed to ",
        "match()",
        " or ",
        "search()",
        "."
      ]
    },
    {
      "bound": {
        "height": 46,
        "left": 265,
        "top": 12573,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "26px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "7px",
        "padding-top": "7px"
      },
      "element": "h2:nth-of-type(1)",
      "html": "6.2.5. Regular Expression Examples<a class=\"headerlink\" href=\"#regular-expression-examples\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > div > h2",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > h2:nth-of-type(1)",
      "text": [
        "6.2.5. Regular Expression Examples",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 39,
        "left": 265,
        "top": 12619,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "22px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "6px",
        "padding-top": "6px"
      },
      "element": "h3:nth-of-type(1)",
      "html": "6.2.5.1. Checking for a Pair<a class=\"headerlink\" href=\"#checking-for-a-pair\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > div > div > h3",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#checking-for-a-pair.section:nth-of-type(1) > h3:nth-of-type(1)",
      "text": [
        "6.2.5.1. Checking for a Pair",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 12674,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "In this example, we’ll use the following helper function to display match\nobjects a little more gracefully:",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#checking-for-a-pair.section:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "In this example, we’ll use the following helper function to display match\nobjects a little more gracefully:"
      ]
    },
    {
      "bound": {
        "height": 84,
        "left": 265,
        "top": 12712,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"k\">def</span> <span class=\"nf\">displaymatch</span><span class=\"p\">(</span><span class=\"n\">match</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">match</span> <span class=\"ow\">is</span> <span class=\"k\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"k\">None</span>\n    <span class=\"k\">return</span> <span class=\"s\">'&lt;Match: %r, groups=%r&gt;'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(),</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">groups</span><span class=\"p\">())</span>\n",
      "path": "div > div > div > div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#checking-for-a-pair.section:nth-of-type(1) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        "def",
        "displaymatch",
        "(",
        "match",
        "):",
        "if",
        "match",
        "is",
        "None",
        ":",
        "return",
        "None",
        "return",
        "'<Match: %r, groups=%r>'",
        "%",
        "(",
        "match",
        ".",
        "group",
        "(),",
        "match",
        ".",
        "groups",
        "())"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 12812,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "Suppose you are writing a poker program where a player’s hand is represented as\na 5-character string with each character representing a card, “a” for ace, “k”\nfor king, “q” for queen, “j” for jack, “t” for 10, and “2” through “9”\nrepresenting the card with that value.",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#checking-for-a-pair.section:nth-of-type(1) > p:nth-of-type(2)",
      "text": [
        "Suppose you are writing a poker program where a player’s hand is represented as\na 5-character string with each character representing a card, “a” for ace, “k”\nfor king, “q” for queen, “j” for jack, “t” for 10, and “2” through “9”\nrepresenting the card with that value."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 12872,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(3)",
      "html": "To see if a given string is a valid hand, one could do the following:",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#checking-for-a-pair.section:nth-of-type(1) > p:nth-of-type(3)",
      "text": [
        "To see if a given string is a valid hand, one could do the following:"
      ]
    },
    {
      "bound": {
        "height": 19,
        "left": 1554,
        "top": 12910,
        "width": 30
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(170, 204, 153)",
        "cursor": "pointer",
        "font-family": "monospace",
        "font-size": "13px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(170, 204, 153)",
        "padding-left": "2px",
        "padding-right": "2px",
        "position": "absolute"
      },
      "element": "span.copybutton:nth-of-type(1)",
      "html": "&gt;&gt;&gt;",
      "path": "div > div > div > div > div > div > div > div > div > span",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#checking-for-a-pair.section:nth-of-type(1) > div.highlight-python3:nth-of-type(2) > div.highlight:nth-of-type(1) > span.copybutton:nth-of-type(1)",
      "text": [
        ">>>"
      ]
    },
    {
      "bound": {
        "height": 138,
        "left": 265,
        "top": 12910,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">valid</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"s\">r\"^[a2-9tjqk]{5}$\"</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">displaymatch</span><span class=\"p\">(</span><span class=\"n\">valid</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"s\">\"akt5q\"</span><span class=\"p\">))</span>  <span class=\"c\"># Valid.</span>\n<span class=\"go\">\"&lt;Match: 'akt5q', groups=()&gt;\"</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">displaymatch</span><span class=\"p\">(</span><span class=\"n\">valid</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"s\">\"akt5e\"</span><span class=\"p\">))</span>  <span class=\"c\"># Invalid.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">displaymatch</span><span class=\"p\">(</span><span class=\"n\">valid</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"s\">\"akt\"</span><span class=\"p\">))</span>    <span class=\"c\"># Invalid.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">displaymatch</span><span class=\"p\">(</span><span class=\"n\">valid</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"s\">\"727ak\"</span><span class=\"p\">))</span>  <span class=\"c\"># Valid.</span>\n<span class=\"go\">\"&lt;Match: '727ak', groups=()&gt;\"</span>\n",
      "path": "div > div > div > div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#checking-for-a-pair.section:nth-of-type(1) > div.highlight-python3:nth-of-type(2) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        ">>> ",
        "valid",
        "=",
        "re",
        ".",
        "compile",
        "(",
        "r\"^[a2-9tjqk]{5}$\"",
        ")",
        ">>> ",
        "displaymatch",
        "(",
        "valid",
        ".",
        "match",
        "(",
        "\"akt5q\"",
        "))",
        "# Valid.",
        "\"<Match: 'akt5q', groups=()>\"",
        ">>> ",
        "displaymatch",
        "(",
        "valid",
        ".",
        "match",
        "(",
        "\"akt5e\"",
        "))",
        "# Invalid.",
        ">>> ",
        "displaymatch",
        "(",
        "valid",
        ".",
        "match",
        "(",
        "\"akt\"",
        "))",
        "# Invalid.",
        ">>> ",
        "displaymatch",
        "(",
        "valid",
        ".",
        "match",
        "(",
        "\"727ak\"",
        "))",
        "# Valid.",
        "\"<Match: '727ak', groups=()>\""
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 13064,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(4)",
      "html": "That last hand, <tt class=\"docutils literal\"><span class=\"pre\">\"727ak\"</span></tt>, contained a pair, or two of the same valued cards.\nTo match this with a regular expression, one could use backreferences as such:",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#checking-for-a-pair.section:nth-of-type(1) > p:nth-of-type(4)",
      "text": [
        "That last hand, ",
        "\"727ak\"",
        ", contained a pair, or two of the same valued cards.\nTo match this with a regular expression, one could use backreferences as such:"
      ]
    },
    {
      "bound": {
        "height": 19,
        "left": 1554,
        "top": 13102,
        "width": 30
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(170, 204, 153)",
        "cursor": "pointer",
        "font-family": "monospace",
        "font-size": "13px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(170, 204, 153)",
        "padding-left": "2px",
        "padding-right": "2px",
        "position": "absolute"
      },
      "element": "span.copybutton:nth-of-type(1)",
      "html": "&gt;&gt;&gt;",
      "path": "div > div > div > div > div > div > div > div > div > span",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#checking-for-a-pair.section:nth-of-type(1) > div.highlight-python3:nth-of-type(3) > div.highlight:nth-of-type(1) > span.copybutton:nth-of-type(1)",
      "text": [
        ">>>"
      ]
    },
    {
      "bound": {
        "height": 120,
        "left": 265,
        "top": 13102,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pair</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"s\">r\".*(.).*\\1\"</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">displaymatch</span><span class=\"p\">(</span><span class=\"n\">pair</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"s\">\"717ak\"</span><span class=\"p\">))</span>     <span class=\"c\"># Pair of 7s.</span>\n<span class=\"go\">\"&lt;Match: '717', groups=('7',)&gt;\"</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">displaymatch</span><span class=\"p\">(</span><span class=\"n\">pair</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"s\">\"718ak\"</span><span class=\"p\">))</span>     <span class=\"c\"># No pairs.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">displaymatch</span><span class=\"p\">(</span><span class=\"n\">pair</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"s\">\"354aa\"</span><span class=\"p\">))</span>     <span class=\"c\"># Pair of aces.</span>\n<span class=\"go\">\"&lt;Match: '354aa', groups=('a',)&gt;\"</span>\n",
      "path": "div > div > div > div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#checking-for-a-pair.section:nth-of-type(1) > div.highlight-python3:nth-of-type(3) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        ">>> ",
        "pair",
        "=",
        "re",
        ".",
        "compile",
        "(",
        "r\".*(.).*\\1\"",
        ")",
        ">>> ",
        "displaymatch",
        "(",
        "pair",
        ".",
        "match",
        "(",
        "\"717ak\"",
        "))",
        "# Pair of 7s.",
        "\"<Match: '717', groups=('7',)>\"",
        ">>> ",
        "displaymatch",
        "(",
        "pair",
        ".",
        "match",
        "(",
        "\"718ak\"",
        "))",
        "# No pairs.",
        ">>> ",
        "displaymatch",
        "(",
        "pair",
        ".",
        "match",
        "(",
        "\"354aa\"",
        "))",
        "# Pair of aces.",
        "\"<Match: '354aa', groups=('a',)>\""
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 13238,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(5)",
      "html": "To find out what card the pair consists of, one could use the\n<a class=\"reference internal\" href=\"#re.match.group\" title=\"re.match.group\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">group()</span></tt></a> method of the match object in the following manner:",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#checking-for-a-pair.section:nth-of-type(1) > p:nth-of-type(5)",
      "text": [
        "To find out what card the pair consists of, one could use the\n",
        "group()",
        " method of the match object in the following manner:"
      ]
    },
    {
      "bound": {
        "height": 19,
        "left": 1554,
        "top": 13276,
        "width": 30
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(170, 204, 153)",
        "cursor": "pointer",
        "font-family": "monospace",
        "font-size": "13px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(170, 204, 153)",
        "padding-left": "2px",
        "padding-right": "2px",
        "position": "absolute"
      },
      "element": "span.copybutton:nth-of-type(1)",
      "html": "&gt;&gt;&gt;",
      "path": "div > div > div > div > div > div > div > div > div > span",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#checking-for-a-pair.section:nth-of-type(1) > div.highlight-python3:nth-of-type(4) > div.highlight:nth-of-type(1) > span.copybutton:nth-of-type(1)",
      "text": [
        ">>>"
      ]
    },
    {
      "bound": {
        "height": 228,
        "left": 265,
        "top": 13276,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pair</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"s\">\"717ak\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">'7'</span>\n\n<span class=\"go\"># Error because re.match() returns None, which doesn't have a group() method:</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pair</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"s\">\"718ak\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gt\">Traceback (most recent call last):</span><span>\n  File </span><span class=\"nb\">\"&lt;pyshell#23&gt;\"</span><span>, line </span><span class=\"m\">1</span><span>, in </span><span class=\"n\">&lt;module&gt;</span>\n    <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"s\">r\".*(.).*\\1\"</span><span class=\"p\">,</span> <span class=\"s\">\"718ak\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gr\">AttributeError</span><span>: </span><span class=\"n\">'NoneType' object has no attribute 'group'</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pair</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"s\">\"354aa\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">'a'</span>\n",
      "path": "div > div > div > div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#checking-for-a-pair.section:nth-of-type(1) > div.highlight-python3:nth-of-type(4) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        ">>> ",
        "pair",
        ".",
        "match",
        "(",
        "\"717ak\"",
        ")",
        ".",
        "group",
        "(",
        "1",
        ")",
        "'7'",
        "# Error because re.match() returns None, which doesn't have a group() method:",
        ">>> ",
        "pair",
        ".",
        "match",
        "(",
        "\"718ak\"",
        ")",
        ".",
        "group",
        "(",
        "1",
        ")",
        "Traceback (most recent call last):",
        "\n  File ",
        "\"<pyshell#23>\"",
        ", line ",
        "1",
        ", in ",
        "<module>",
        "re",
        ".",
        "match",
        "(",
        "r\".*(.).*\\1\"",
        ",",
        "\"718ak\"",
        ")",
        ".",
        "group",
        "(",
        "1",
        ")",
        "AttributeError",
        ": ",
        "'NoneType' object has no attribute 'group'",
        ">>> ",
        "pair",
        ".",
        "match",
        "(",
        "\"354aa\"",
        ")",
        ".",
        "group",
        "(",
        "1",
        ")",
        "'a'"
      ]
    },
    {
      "bound": {
        "height": 39,
        "left": 265,
        "top": 13519,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "22px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "6px",
        "padding-top": "6px"
      },
      "element": "h3:nth-of-type(1)",
      "html": "6.2.5.2. Simulating scanf()<a class=\"headerlink\" href=\"#simulating-scanf\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > div > div > h3",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#simulating-scanf.section:nth-of-type(2) > h3:nth-of-type(1)",
      "text": [
        "6.2.5.2. Simulating scanf()",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 13574,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p#index-0:nth-of-type(1)",
      "html": "Python does not currently have an equivalent to <tt class=\"xref c c-func docutils literal\"><span class=\"pre\">scanf()</span></tt>.  Regular\nexpressions are generally more powerful, though also more verbose, than\n<tt class=\"xref c c-func docutils literal\"><span class=\"pre\">scanf()</span></tt> format strings.  The table below offers some more-or-less\nequivalent mappings between <tt class=\"xref c c-func docutils literal\"><span class=\"pre\">scanf()</span></tt> format tokens and regular\nexpressions.",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#simulating-scanf.section:nth-of-type(2) > p#index-0:nth-of-type(1)",
      "text": [
        "Python does not currently have an equivalent to ",
        "scanf()",
        ".  Regular\nexpressions are generally more powerful, though also more verbose, than\n",
        "scanf()",
        " format strings.  The table below offers some more-or-less\nequivalent mappings between ",
        "scanf()",
        " format tokens and regular\nexpressions."
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 265,
        "top": 13634,
        "width": 183
      },
      "computed": {
        "background-color": "rgb(238, 238, 238)",
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "font-weight": "bold",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "center",
        "vertical-align": "bottom"
      },
      "element": "th.head:nth-of-type(1)",
      "html": "<tt class=\"xref c c-func docutils literal\"><span class=\"pre\">scanf()</span></tt> Token",
      "path": "div > div > div > div > div > div > div > table > thead > tr > th",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#simulating-scanf.section:nth-of-type(2) > table.docutils:nth-of-type(1) > thead:nth-of-type(1) > tr:nth-of-type(1) > th.head:nth-of-type(1)",
      "text": [
        "scanf()",
        " Token"
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 448,
        "top": 13634,
        "width": 251
      },
      "computed": {
        "background-color": "rgb(238, 238, 238)",
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "font-weight": "bold",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "center",
        "vertical-align": "bottom"
      },
      "element": "th.head:nth-of-type(2)",
      "html": "Regular Expression",
      "path": "div > div > div > div > div > div > div > table > thead > tr > th",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#simulating-scanf.section:nth-of-type(2) > table.docutils:nth-of-type(1) > thead:nth-of-type(1) > tr:nth-of-type(1) > th.head:nth-of-type(2)",
      "text": [
        "Regular Expression"
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 265,
        "top": 13663,
        "width": 183
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(1)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">%c</span></tt>",
      "path": "div > div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#simulating-scanf.section:nth-of-type(2) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(1) > td:nth-of-type(1)",
      "text": [
        "%c"
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 448,
        "top": 13663,
        "width": 251
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(2)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">.</span></tt>",
      "path": "div > div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#simulating-scanf.section:nth-of-type(2) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(1) > td:nth-of-type(2)",
      "text": [
        "."
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 265,
        "top": 13692,
        "width": 183
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(1)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">%5c</span></tt>",
      "path": "div > div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#simulating-scanf.section:nth-of-type(2) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(2) > td:nth-of-type(1)",
      "text": [
        "%5c"
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 448,
        "top": 13692,
        "width": 251
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(2)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">.{5}</span></tt>",
      "path": "div > div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#simulating-scanf.section:nth-of-type(2) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(2) > td:nth-of-type(2)",
      "text": [
        ".{5}"
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 265,
        "top": 13721,
        "width": 183
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(1)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">%d</span></tt>",
      "path": "div > div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#simulating-scanf.section:nth-of-type(2) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(3) > td:nth-of-type(1)",
      "text": [
        "%d"
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 448,
        "top": 13721,
        "width": 251
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(2)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">[-+]?\\d+</span></tt>",
      "path": "div > div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#simulating-scanf.section:nth-of-type(2) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(3) > td:nth-of-type(2)",
      "text": [
        "[-+]?\\d+"
      ]
    },
    {
      "bound": {
        "height": 49,
        "left": 265,
        "top": 13750,
        "width": 183
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(1)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">%e</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">%E</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">%f</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">%g</span></tt>",
      "path": "div > div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#simulating-scanf.section:nth-of-type(2) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(4) > td:nth-of-type(1)",
      "text": [
        "%e",
        ", ",
        "%E",
        ", ",
        "%f",
        ", ",
        "%g"
      ]
    },
    {
      "bound": {
        "height": 49,
        "left": 448,
        "top": 13750,
        "width": 251
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(2)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">[-+]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?</span></tt>",
      "path": "div > div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#simulating-scanf.section:nth-of-type(2) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(4) > td:nth-of-type(2)",
      "text": [
        "[-+]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?"
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 265,
        "top": 13799,
        "width": 183
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(1)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">%i</span></tt>",
      "path": "div > div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#simulating-scanf.section:nth-of-type(2) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(5) > td:nth-of-type(1)",
      "text": [
        "%i"
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 448,
        "top": 13799,
        "width": 251
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(2)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">[-+]?(0[xX][\\dA-Fa-f]+|0[0-7]*|\\d+)</span></tt>",
      "path": "div > div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#simulating-scanf.section:nth-of-type(2) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(5) > td:nth-of-type(2)",
      "text": [
        "[-+]?(0[xX][\\dA-Fa-f]+|0[0-7]*|\\d+)"
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 265,
        "top": 13828,
        "width": 183
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(1)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">%o</span></tt>",
      "path": "div > div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#simulating-scanf.section:nth-of-type(2) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(6) > td:nth-of-type(1)",
      "text": [
        "%o"
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 448,
        "top": 13828,
        "width": 251
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(2)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">[-+]?[0-7]+</span></tt>",
      "path": "div > div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#simulating-scanf.section:nth-of-type(2) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(6) > td:nth-of-type(2)",
      "text": [
        "[-+]?[0-7]+"
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 265,
        "top": 13857,
        "width": 183
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(1)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">%s</span></tt>",
      "path": "div > div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#simulating-scanf.section:nth-of-type(2) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(7) > td:nth-of-type(1)",
      "text": [
        "%s"
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 448,
        "top": 13857,
        "width": 251
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(2)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">\\S+</span></tt>",
      "path": "div > div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#simulating-scanf.section:nth-of-type(2) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(7) > td:nth-of-type(2)",
      "text": [
        "\\S+"
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 265,
        "top": 13886,
        "width": 183
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(1)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">%u</span></tt>",
      "path": "div > div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#simulating-scanf.section:nth-of-type(2) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(8) > td:nth-of-type(1)",
      "text": [
        "%u"
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 448,
        "top": 13886,
        "width": 251
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(2)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">\\d+</span></tt>",
      "path": "div > div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#simulating-scanf.section:nth-of-type(2) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(8) > td:nth-of-type(2)",
      "text": [
        "\\d+"
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 265,
        "top": 13915,
        "width": 183
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(1)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">%x</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">%X</span></tt>",
      "path": "div > div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#simulating-scanf.section:nth-of-type(2) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(9) > td:nth-of-type(1)",
      "text": [
        "%x",
        ", ",
        "%X"
      ]
    },
    {
      "bound": {
        "height": 29,
        "left": 448,
        "top": 13915,
        "width": 251
      },
      "computed": {
        "border-bottom-color": "rgb(221, 221, 221)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-collapse": "collapse",
        "border-left-color": "rgb(221, 221, 221)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(221, 221, 221)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(221, 221, 221)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "display": "table-cell",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "4px",
        "padding-left": "8px",
        "padding-right": "8px",
        "padding-top": "4px",
        "text-align": "left",
        "vertical-align": "top"
      },
      "element": "td:nth-of-type(2)",
      "html": "<tt class=\"docutils literal\"><span class=\"pre\">[-+]?(0[xX])?[\\dA-Fa-f]+</span></tt>",
      "path": "div > div > div > div > div > div > div > table > tbody > tr > td",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#simulating-scanf.section:nth-of-type(2) > table.docutils:nth-of-type(1) > tbody:nth-of-type(1) > tr:nth-of-type(9) > td:nth-of-type(2)",
      "text": [
        "[-+]?(0[xX])?[\\dA-Fa-f]+"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 13961,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "To extract the filename and numbers from a string like",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#simulating-scanf.section:nth-of-type(2) > p:nth-of-type(2)",
      "text": [
        "To extract the filename and numbers from a string like"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 265,
        "top": 13999,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">sbin</span><span class=\"o\">/</span><span class=\"n\">sendmail</span> <span class=\"o\">-</span> <span class=\"mi\">0</span> <span class=\"n\">errors</span><span class=\"p\">,</span> <span class=\"mi\">4</span> <span class=\"n\">warnings</span>\n",
      "path": "div > div > div > div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#simulating-scanf.section:nth-of-type(2) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        "/",
        "usr",
        "/",
        "sbin",
        "/",
        "sendmail",
        "-",
        "0",
        "errors",
        ",",
        "4",
        "warnings"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 14045,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(3)",
      "html": "you would use a <tt class=\"xref c c-func docutils literal\"><span class=\"pre\">scanf()</span></tt> format like",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#simulating-scanf.section:nth-of-type(2) > p:nth-of-type(3)",
      "text": [
        "you would use a ",
        "scanf()",
        " format like"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 265,
        "top": 14083,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"o\">%</span><span class=\"n\">s</span> <span class=\"o\">-</span> <span class=\"o\">%</span><span class=\"n\">d</span> <span class=\"n\">errors</span><span class=\"p\">,</span> <span class=\"o\">%</span><span class=\"n\">d</span> <span class=\"n\">warnings</span>\n",
      "path": "div > div > div > div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#simulating-scanf.section:nth-of-type(2) > div.highlight-python3:nth-of-type(2) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        "%",
        "s",
        "-",
        "%",
        "d",
        "errors",
        ",",
        "%",
        "d",
        "warnings"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 14129,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(4)",
      "html": "The equivalent regular expression would be",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#simulating-scanf.section:nth-of-type(2) > p:nth-of-type(4)",
      "text": [
        "The equivalent regular expression would be"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 265,
        "top": 14167,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"p\">(</span>\\<span class=\"n\">S</span><span class=\"o\">+</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"p\">(</span>\\<span class=\"n\">d</span><span class=\"o\">+</span><span class=\"p\">)</span> <span class=\"n\">errors</span><span class=\"p\">,</span> <span class=\"p\">(</span>\\<span class=\"n\">d</span><span class=\"o\">+</span><span class=\"p\">)</span> <span class=\"n\">warnings</span>\n",
      "path": "div > div > div > div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#simulating-scanf.section:nth-of-type(2) > div.highlight-python3:nth-of-type(3) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        "(",
        "\\",
        "S",
        "+",
        ")",
        "-",
        "(",
        "\\",
        "d",
        "+",
        ")",
        "errors",
        ",",
        "(",
        "\\",
        "d",
        "+",
        ")",
        "warnings"
      ]
    },
    {
      "bound": {
        "height": 39,
        "left": 265,
        "top": 14212,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "22px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "6px",
        "padding-top": "6px"
      },
      "element": "h3:nth-of-type(1)",
      "html": "6.2.5.3. search() vs. match()<a class=\"headerlink\" href=\"#search-vs-match\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > div > div > h3",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#search-vs-match.section:nth-of-type(3) > h3:nth-of-type(1)",
      "text": [
        "6.2.5.3. search() vs. match()",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 14267,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "Python offers two different primitive operations based on regular expressions:\n<a class=\"reference internal\" href=\"#re.match\" title=\"re.match\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">re.match()</span></tt></a> checks for a match only at the beginning of the string, while\n<a class=\"reference internal\" href=\"#re.search\" title=\"re.search\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">re.search()</span></tt></a> checks for a match anywhere in the string (this is what Perl\ndoes by default).",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#search-vs-match.section:nth-of-type(3) > p:nth-of-type(1)",
      "text": [
        "Python offers two different primitive operations based on regular expressions:\n",
        "re.match()",
        " checks for a match only at the beginning of the string, while\n",
        "re.search()",
        " checks for a match anywhere in the string (this is what Perl\ndoes by default)."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 14327,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "For example:",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#search-vs-match.section:nth-of-type(3) > p:nth-of-type(2)",
      "text": [
        "For example:"
      ]
    },
    {
      "bound": {
        "height": 19,
        "left": 1554,
        "top": 14365,
        "width": 30
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(170, 204, 153)",
        "cursor": "pointer",
        "font-family": "monospace",
        "font-size": "13px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(170, 204, 153)",
        "padding-left": "2px",
        "padding-right": "2px",
        "position": "absolute"
      },
      "element": "span.copybutton:nth-of-type(1)",
      "html": "&gt;&gt;&gt;",
      "path": "div > div > div > div > div > div > div > div > div > span",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#search-vs-match.section:nth-of-type(3) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > span.copybutton:nth-of-type(1)",
      "text": [
        ">>>"
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 265,
        "top": 14365,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"s\">\"c\"</span><span class=\"p\">,</span> <span class=\"s\">\"abcdef\"</span><span class=\"p\">)</span>  <span class=\"c\"># No match</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"s\">\"c\"</span><span class=\"p\">,</span> <span class=\"s\">\"abcdef\"</span><span class=\"p\">)</span> <span class=\"c\"># Match</span>\n<span class=\"go\">&lt;_sre.SRE_Match object at ...&gt;</span>\n",
      "path": "div > div > div > div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#search-vs-match.section:nth-of-type(3) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        ">>> ",
        "re",
        ".",
        "match",
        "(",
        "\"c\"",
        ",",
        "\"abcdef\"",
        ")",
        "# No match",
        ">>> ",
        "re",
        ".",
        "search",
        "(",
        "\"c\"",
        ",",
        "\"abcdef\"",
        ")",
        "# Match",
        "<_sre.SRE_Match object at ...>"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 14447,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(3)",
      "html": "Regular expressions beginning with <tt class=\"docutils literal\"><span class=\"pre\">'^'</span></tt> can be used with <a class=\"reference internal\" href=\"#re.search\" title=\"re.search\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">search()</span></tt></a> to\nrestrict the match at the beginning of the string:",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#search-vs-match.section:nth-of-type(3) > p:nth-of-type(3)",
      "text": [
        "Regular expressions beginning with ",
        "'^'",
        " can be used with ",
        "search()",
        " to\nrestrict the match at the beginning of the string:"
      ]
    },
    {
      "bound": {
        "height": 19,
        "left": 1554,
        "top": 14485,
        "width": 30
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(170, 204, 153)",
        "cursor": "pointer",
        "font-family": "monospace",
        "font-size": "13px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(170, 204, 153)",
        "padding-left": "2px",
        "padding-right": "2px",
        "position": "absolute"
      },
      "element": "span.copybutton:nth-of-type(1)",
      "html": "&gt;&gt;&gt;",
      "path": "div > div > div > div > div > div > div > div > div > span",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#search-vs-match.section:nth-of-type(3) > div.highlight-python3:nth-of-type(2) > div.highlight:nth-of-type(1) > span.copybutton:nth-of-type(1)",
      "text": [
        ">>>"
      ]
    },
    {
      "bound": {
        "height": 84,
        "left": 265,
        "top": 14485,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"s\">\"c\"</span><span class=\"p\">,</span> <span class=\"s\">\"abcdef\"</span><span class=\"p\">)</span>  <span class=\"c\"># No match</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"s\">\"^c\"</span><span class=\"p\">,</span> <span class=\"s\">\"abcdef\"</span><span class=\"p\">)</span> <span class=\"c\"># No match</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"s\">\"^a\"</span><span class=\"p\">,</span> <span class=\"s\">\"abcdef\"</span><span class=\"p\">)</span>  <span class=\"c\"># Match</span>\n<span class=\"go\">&lt;_sre.SRE_Match object at ...&gt;</span>\n",
      "path": "div > div > div > div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#search-vs-match.section:nth-of-type(3) > div.highlight-python3:nth-of-type(2) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        ">>> ",
        "re",
        ".",
        "match",
        "(",
        "\"c\"",
        ",",
        "\"abcdef\"",
        ")",
        "# No match",
        ">>> ",
        "re",
        ".",
        "search",
        "(",
        "\"^c\"",
        ",",
        "\"abcdef\"",
        ")",
        "# No match",
        ">>> ",
        "re",
        ".",
        "search",
        "(",
        "\"^a\"",
        ",",
        "\"abcdef\"",
        ")",
        "# Match",
        "<_sre.SRE_Match object at ...>"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 14585,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(4)",
      "html": "Note however that in <a class=\"reference internal\" href=\"#re.MULTILINE\" title=\"re.MULTILINE\"><tt class=\"xref py py-const docutils literal\"><span class=\"pre\">MULTILINE</span></tt></a> mode <a class=\"reference internal\" href=\"#re.match\" title=\"re.match\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">match()</span></tt></a> only matches at the\nbeginning of the string, whereas using <a class=\"reference internal\" href=\"#re.search\" title=\"re.search\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">search()</span></tt></a> with a regular expression\nbeginning with <tt class=\"docutils literal\"><span class=\"pre\">'^'</span></tt> will match at the beginning of each line.",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#search-vs-match.section:nth-of-type(3) > p:nth-of-type(4)",
      "text": [
        "Note however that in ",
        "MULTILINE",
        " mode ",
        "match()",
        " only matches at the\nbeginning of the string, whereas using ",
        "search()",
        " with a regular expression\nbeginning with ",
        "'^'",
        " will match at the beginning of each line."
      ]
    },
    {
      "bound": {
        "height": 19,
        "left": 1554,
        "top": 14645,
        "width": 30
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(170, 204, 153)",
        "cursor": "pointer",
        "font-family": "monospace",
        "font-size": "13px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(170, 204, 153)",
        "padding-left": "2px",
        "padding-right": "2px",
        "position": "absolute"
      },
      "element": "span.copybutton:nth-of-type(1)",
      "html": "&gt;&gt;&gt;",
      "path": "div > div > div > div > div > div > div > div > div > span",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#search-vs-match.section:nth-of-type(3) > div.highlight-python3:nth-of-type(3) > div.highlight:nth-of-type(1) > span.copybutton:nth-of-type(1)",
      "text": [
        ">>>"
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 265,
        "top": 14645,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'A</span><span class=\"se\">\\n</span><span class=\"s\">B</span><span class=\"se\">\\n</span><span class=\"s\">X'</span><span class=\"p\">,</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">MULTILINE</span><span class=\"p\">)</span>  <span class=\"c\"># No match</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"s\">'^X'</span><span class=\"p\">,</span> <span class=\"s\">'A</span><span class=\"se\">\\n</span><span class=\"s\">B</span><span class=\"se\">\\n</span><span class=\"s\">X'</span><span class=\"p\">,</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">MULTILINE</span><span class=\"p\">)</span>  <span class=\"c\"># Match</span>\n<span class=\"go\">&lt;_sre.SRE_Match object at ...&gt;</span>\n",
      "path": "div > div > div > div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#search-vs-match.section:nth-of-type(3) > div.highlight-python3:nth-of-type(3) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        ">>> ",
        "re",
        ".",
        "match",
        "(",
        "'X'",
        ",",
        "'A",
        "\\n",
        "B",
        "\\n",
        "X'",
        ",",
        "re",
        ".",
        "MULTILINE",
        ")",
        "# No match",
        ">>> ",
        "re",
        ".",
        "search",
        "(",
        "'^X'",
        ",",
        "'A",
        "\\n",
        "B",
        "\\n",
        "X'",
        ",",
        "re",
        ".",
        "MULTILINE",
        ")",
        "# Match",
        "<_sre.SRE_Match object at ...>"
      ]
    },
    {
      "bound": {
        "height": 39,
        "left": 265,
        "top": 14726,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "22px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "6px",
        "padding-top": "6px"
      },
      "element": "h3:nth-of-type(1)",
      "html": "6.2.5.4. Making a Phonebook<a class=\"headerlink\" href=\"#making-a-phonebook\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > div > div > h3",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#making-a-phonebook.section:nth-of-type(4) > h3:nth-of-type(1)",
      "text": [
        "6.2.5.4. Making a Phonebook",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 14781,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "<a class=\"reference internal\" href=\"#re.split\" title=\"re.split\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">split()</span></tt></a> splits a string into a list delimited by the passed pattern.  The\nmethod is invaluable for converting textual data into data structures that can be\neasily read and modified by Python as demonstrated in the following example that\ncreates a phonebook.",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#making-a-phonebook.section:nth-of-type(4) > p:nth-of-type(1)",
      "text": [
        "split()",
        " splits a string into a list delimited by the passed pattern.  The\nmethod is invaluable for converting textual data into data structures that can be\neasily read and modified by Python as demonstrated in the following example that\ncreates a phonebook."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 14841,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "First, here is the input.  Normally it may come from a file, here we are using\ntriple-quoted string syntax:",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#making-a-phonebook.section:nth-of-type(4) > p:nth-of-type(2)",
      "text": [
        "First, here is the input.  Normally it may come from a file, here we are using\ntriple-quoted string syntax:"
      ]
    },
    {
      "bound": {
        "height": 19,
        "left": 1554,
        "top": 14879,
        "width": 30
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(170, 204, 153)",
        "cursor": "pointer",
        "font-family": "monospace",
        "font-size": "13px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(170, 204, 153)",
        "padding-left": "2px",
        "padding-right": "2px",
        "position": "absolute"
      },
      "element": "span.copybutton:nth-of-type(1)",
      "html": "&gt;&gt;&gt;",
      "path": "div > div > div > div > div > div > div > div > div > span",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#making-a-phonebook.section:nth-of-type(4) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > span.copybutton:nth-of-type(1)",
      "text": [
        ">>>"
      ]
    },
    {
      "bound": {
        "height": 138,
        "left": 265,
        "top": 14879,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s\">\"\"\"Ross McFluff: 834.345.1254 155 Elm Street</span>\n<span class=\"gp\">...</span><span class=\"s\"></span>\n<span class=\"gp\">... </span><span class=\"s\">Ronald Heathmore: 892.345.3428 436 Finley Avenue</span>\n<span class=\"gp\">... </span><span class=\"s\">Frank Burger: 925.541.7625 662 South Dogwood Way</span>\n<span class=\"gp\">...</span><span class=\"s\"></span>\n<span class=\"gp\">...</span><span class=\"s\"></span>\n<span class=\"gp\">... </span><span class=\"s\">Heather Albrecht: 548.326.4584 919 Park Place\"\"\"</span>\n",
      "path": "div > div > div > div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#making-a-phonebook.section:nth-of-type(4) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        ">>> ",
        "text",
        "=",
        "\"\"\"Ross McFluff: 834.345.1254 155 Elm Street",
        "...",
        "... ",
        "Ronald Heathmore: 892.345.3428 436 Finley Avenue",
        "... ",
        "Frank Burger: 925.541.7625 662 South Dogwood Way",
        "...",
        "...",
        "... ",
        "Heather Albrecht: 548.326.4584 919 Park Place\"\"\""
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 15033,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(3)",
      "html": "The entries are separated by one or more newlines. Now we convert the string\ninto a list with each nonempty line having its own entry:",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#making-a-phonebook.section:nth-of-type(4) > p:nth-of-type(3)",
      "text": [
        "The entries are separated by one or more newlines. Now we convert the string\ninto a list with each nonempty line having its own entry:"
      ]
    },
    {
      "bound": {
        "height": 19,
        "left": 1554,
        "top": 15071,
        "width": 30
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(170, 204, 153)",
        "cursor": "pointer",
        "font-family": "monospace",
        "font-size": "13px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(170, 204, 153)",
        "padding-left": "2px",
        "padding-right": "2px",
        "position": "absolute"
      },
      "element": "span.copybutton:nth-of-type(1)",
      "html": "&gt;&gt;&gt;",
      "path": "div > div > div > div > div > div > div > div > div > span",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#making-a-phonebook.section:nth-of-type(4) > div.highlight-python3:nth-of-type(2) > div.highlight:nth-of-type(1) > span.copybutton:nth-of-type(1)",
      "text": [
        ">>>"
      ]
    },
    {
      "bound": {
        "height": 120,
        "left": 265,
        "top": 15071,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">entries</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">+\"</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">entries</span>\n<span class=\"go\">['Ross McFluff: 834.345.1254 155 Elm Street',</span>\n<span class=\"go\">'Ronald Heathmore: 892.345.3428 436 Finley Avenue',</span>\n<span class=\"go\">'Frank Burger: 925.541.7625 662 South Dogwood Way',</span>\n<span class=\"go\">'Heather Albrecht: 548.326.4584 919 Park Place']</span>\n",
      "path": "div > div > div > div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#making-a-phonebook.section:nth-of-type(4) > div.highlight-python3:nth-of-type(2) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        ">>> ",
        "entries",
        "=",
        "re",
        ".",
        "split",
        "(",
        "\"",
        "\\n",
        "+\"",
        ",",
        "text",
        ")",
        ">>> ",
        "entries",
        "['Ross McFluff: 834.345.1254 155 Elm Street',",
        "'Ronald Heathmore: 892.345.3428 436 Finley Avenue',",
        "'Frank Burger: 925.541.7625 662 South Dogwood Way',",
        "'Heather Albrecht: 548.326.4584 919 Park Place']"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 15207,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(4)",
      "html": "Finally, split each entry into a list with first name, last name, telephone\nnumber, and address.  We use the <tt class=\"docutils literal\"><span class=\"pre\">maxsplit</span></tt> parameter of <a class=\"reference internal\" href=\"#re.split\" title=\"re.split\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">split()</span></tt></a>\nbecause the address has spaces, our splitting pattern, in it:",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#making-a-phonebook.section:nth-of-type(4) > p:nth-of-type(4)",
      "text": [
        "Finally, split each entry into a list with first name, last name, telephone\nnumber, and address.  We use the ",
        "maxsplit",
        " parameter of ",
        "split()",
        "\nbecause the address has spaces, our splitting pattern, in it:"
      ]
    },
    {
      "bound": {
        "height": 19,
        "left": 1554,
        "top": 15267,
        "width": 30
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(170, 204, 153)",
        "cursor": "pointer",
        "font-family": "monospace",
        "font-size": "13px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(170, 204, 153)",
        "padding-left": "2px",
        "padding-right": "2px",
        "position": "absolute"
      },
      "element": "span.copybutton:nth-of-type(1)",
      "html": "&gt;&gt;&gt;",
      "path": "div > div > div > div > div > div > div > div > div > span",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#making-a-phonebook.section:nth-of-type(4) > div.highlight-python3:nth-of-type(3) > div.highlight:nth-of-type(1) > span.copybutton:nth-of-type(1)",
      "text": [
        ">>>"
      ]
    },
    {
      "bound": {
        "height": 102,
        "left": 265,
        "top": 15267,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">[</span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s\">\":? \"</span><span class=\"p\">,</span> <span class=\"n\">entry</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">entry</span> <span class=\"ow\">in</span> <span class=\"n\">entries</span><span class=\"p\">]</span>\n<span class=\"go\">[['Ross', 'McFluff', '834.345.1254', '155 Elm Street'],</span>\n<span class=\"go\">['Ronald', 'Heathmore', '892.345.3428', '436 Finley Avenue'],</span>\n<span class=\"go\">['Frank', 'Burger', '925.541.7625', '662 South Dogwood Way'],</span>\n<span class=\"go\">['Heather', 'Albrecht', '548.326.4584', '919 Park Place']]</span>\n",
      "path": "div > div > div > div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#making-a-phonebook.section:nth-of-type(4) > div.highlight-python3:nth-of-type(3) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        ">>> ",
        "[",
        "re",
        ".",
        "split",
        "(",
        "\":? \"",
        ",",
        "entry",
        ",",
        "3",
        ")",
        "for",
        "entry",
        "in",
        "entries",
        "]",
        "[['Ross', 'McFluff', '834.345.1254', '155 Elm Street'],",
        "['Ronald', 'Heathmore', '892.345.3428', '436 Finley Avenue'],",
        "['Frank', 'Burger', '925.541.7625', '662 South Dogwood Way'],",
        "['Heather', 'Albrecht', '548.326.4584', '919 Park Place']]"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 15385,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(5)",
      "html": "The <tt class=\"docutils literal\"><span class=\"pre\">:?</span></tt> pattern matches the colon after the last name, so that it does not\noccur in the result list.  With a <tt class=\"docutils literal\"><span class=\"pre\">maxsplit</span></tt> of <tt class=\"docutils literal\"><span class=\"pre\">4</span></tt>, we could separate the\nhouse number from the street name:",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#making-a-phonebook.section:nth-of-type(4) > p:nth-of-type(5)",
      "text": [
        "The ",
        ":?",
        " pattern matches the colon after the last name, so that it does not\noccur in the result list.  With a ",
        "maxsplit",
        " of ",
        "4",
        ", we could separate the\nhouse number from the street name:"
      ]
    },
    {
      "bound": {
        "height": 19,
        "left": 1554,
        "top": 15445,
        "width": 30
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(170, 204, 153)",
        "cursor": "pointer",
        "font-family": "monospace",
        "font-size": "13px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(170, 204, 153)",
        "padding-left": "2px",
        "padding-right": "2px",
        "position": "absolute"
      },
      "element": "span.copybutton:nth-of-type(1)",
      "html": "&gt;&gt;&gt;",
      "path": "div > div > div > div > div > div > div > div > div > span",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#making-a-phonebook.section:nth-of-type(4) > div.highlight-python3:nth-of-type(4) > div.highlight:nth-of-type(1) > span.copybutton:nth-of-type(1)",
      "text": [
        ">>>"
      ]
    },
    {
      "bound": {
        "height": 102,
        "left": 265,
        "top": 15445,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">[</span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s\">\":? \"</span><span class=\"p\">,</span> <span class=\"n\">entry</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">entry</span> <span class=\"ow\">in</span> <span class=\"n\">entries</span><span class=\"p\">]</span>\n<span class=\"go\">[['Ross', 'McFluff', '834.345.1254', '155', 'Elm Street'],</span>\n<span class=\"go\">['Ronald', 'Heathmore', '892.345.3428', '436', 'Finley Avenue'],</span>\n<span class=\"go\">['Frank', 'Burger', '925.541.7625', '662', 'South Dogwood Way'],</span>\n<span class=\"go\">['Heather', 'Albrecht', '548.326.4584', '919', 'Park Place']]</span>\n",
      "path": "div > div > div > div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#making-a-phonebook.section:nth-of-type(4) > div.highlight-python3:nth-of-type(4) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        ">>> ",
        "[",
        "re",
        ".",
        "split",
        "(",
        "\":? \"",
        ",",
        "entry",
        ",",
        "4",
        ")",
        "for",
        "entry",
        "in",
        "entries",
        "]",
        "[['Ross', 'McFluff', '834.345.1254', '155', 'Elm Street'],",
        "['Ronald', 'Heathmore', '892.345.3428', '436', 'Finley Avenue'],",
        "['Frank', 'Burger', '925.541.7625', '662', 'South Dogwood Way'],",
        "['Heather', 'Albrecht', '548.326.4584', '919', 'Park Place']]"
      ]
    },
    {
      "bound": {
        "height": 39,
        "left": 265,
        "top": 15562,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "22px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "6px",
        "padding-top": "6px"
      },
      "element": "h3:nth-of-type(1)",
      "html": "6.2.5.5. Text Munging<a class=\"headerlink\" href=\"#text-munging\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > div > div > h3",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#text-munging.section:nth-of-type(5) > h3:nth-of-type(1)",
      "text": [
        "6.2.5.5. Text Munging",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 15617,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "<a class=\"reference internal\" href=\"#re.sub\" title=\"re.sub\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">sub()</span></tt></a> replaces every occurrence of a pattern with a string or the\nresult of a function.  This example demonstrates using <a class=\"reference internal\" href=\"#re.sub\" title=\"re.sub\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">sub()</span></tt></a> with\na function to “munge” text, or randomize the order of all the characters\nin each word of a sentence except for the first and last characters:",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#text-munging.section:nth-of-type(5) > p:nth-of-type(1)",
      "text": [
        "sub()",
        " replaces every occurrence of a pattern with a string or the\nresult of a function.  This example demonstrates using ",
        "sub()",
        " with\na function to “munge” text, or randomize the order of all the characters\nin each word of a sentence except for the first and last characters:"
      ]
    },
    {
      "bound": {
        "height": 19,
        "left": 1554,
        "top": 15677,
        "width": 30
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(170, 204, 153)",
        "cursor": "pointer",
        "font-family": "monospace",
        "font-size": "13px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(170, 204, 153)",
        "padding-left": "2px",
        "padding-right": "2px",
        "position": "absolute"
      },
      "element": "span.copybutton:nth-of-type(1)",
      "html": "&gt;&gt;&gt;",
      "path": "div > div > div > div > div > div > div > div > div > span",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#text-munging.section:nth-of-type(5) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > span.copybutton:nth-of-type(1)",
      "text": [
        ">>>"
      ]
    },
    {
      "bound": {
        "height": 174,
        "left": 265,
        "top": 15677,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">repl</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>  <span class=\"n\">inner_word</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"gp\">... </span>  <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">shuffle</span><span class=\"p\">(</span><span class=\"n\">inner_word</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>  <span class=\"k\">return</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s\">\"\"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">inner_word</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s\">\"Professor Abdolmalek, please report your absences promptly.\"</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"s\">r\"(\\w)(\\w+)(\\w)\"</span><span class=\"p\">,</span> <span class=\"n\">repl</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">)</span>\n<span class=\"go\">'Poefsrosr Aealmlobdk, pslaee reorpt your abnseces plmrptoy.'</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"s\">r\"(\\w)(\\w+)(\\w)\"</span><span class=\"p\">,</span> <span class=\"n\">repl</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">)</span>\n<span class=\"go\">'Pofsroser Aodlambelk, plasee reoprt yuor asnebces potlmrpy.'</span>\n",
      "path": "div > div > div > div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#text-munging.section:nth-of-type(5) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        ">>> ",
        "def",
        "repl",
        "(",
        "m",
        "):",
        "... ",
        "inner_word",
        "=",
        "list",
        "(",
        "m",
        ".",
        "group",
        "(",
        "2",
        "))",
        "... ",
        "random",
        ".",
        "shuffle",
        "(",
        "inner_word",
        ")",
        "... ",
        "return",
        "m",
        ".",
        "group",
        "(",
        "1",
        ")",
        "+",
        "\"\"",
        ".",
        "join",
        "(",
        "inner_word",
        ")",
        "+",
        "m",
        ".",
        "group",
        "(",
        "3",
        ")",
        ">>> ",
        "text",
        "=",
        "\"Professor Abdolmalek, please report your absences promptly.\"",
        ">>> ",
        "re",
        ".",
        "sub",
        "(",
        "r\"(\\w)(\\w+)(\\w)\"",
        ",",
        "repl",
        ",",
        "text",
        ")",
        "'Poefsrosr Aealmlobdk, pslaee reorpt your abnseces plmrptoy.'",
        ">>> ",
        "re",
        ".",
        "sub",
        "(",
        "r\"(\\w)(\\w+)(\\w)\"",
        ",",
        "repl",
        ",",
        "text",
        ")",
        "'Pofsroser Aodlambelk, plasee reoprt yuor asnebces potlmrpy.'"
      ]
    },
    {
      "bound": {
        "height": 39,
        "left": 265,
        "top": 15866,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "22px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "6px",
        "padding-top": "6px"
      },
      "element": "h3:nth-of-type(1)",
      "html": "6.2.5.6. Finding all Adverbs<a class=\"headerlink\" href=\"#finding-all-adverbs\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > div > div > h3",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#finding-all-adverbs.section:nth-of-type(6) > h3:nth-of-type(1)",
      "text": [
        "6.2.5.6. Finding all Adverbs",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 15921,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "<a class=\"reference internal\" href=\"#re.findall\" title=\"re.findall\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">findall()</span></tt></a> matches <em>all</em> occurrences of a pattern, not just the first\none as <a class=\"reference internal\" href=\"#re.search\" title=\"re.search\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">search()</span></tt></a> does.  For example, if one was a writer and wanted to\nfind all of the adverbs in some text, he or she might use <a class=\"reference internal\" href=\"#re.findall\" title=\"re.findall\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">findall()</span></tt></a> in\nthe following manner:",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#finding-all-adverbs.section:nth-of-type(6) > p:nth-of-type(1)",
      "text": [
        "findall()",
        " matches ",
        "all",
        " occurrences of a pattern, not just the first\none as ",
        "search()",
        " does.  For example, if one was a writer and wanted to\nfind all of the adverbs in some text, he or she might use ",
        "findall()",
        " in\nthe following manner:"
      ]
    },
    {
      "bound": {
        "height": 19,
        "left": 1554,
        "top": 15981,
        "width": 30
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(170, 204, 153)",
        "cursor": "pointer",
        "font-family": "monospace",
        "font-size": "13px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(170, 204, 153)",
        "padding-left": "2px",
        "padding-right": "2px",
        "position": "absolute"
      },
      "element": "span.copybutton:nth-of-type(1)",
      "html": "&gt;&gt;&gt;",
      "path": "div > div > div > div > div > div > div > div > div > span",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#finding-all-adverbs.section:nth-of-type(6) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > span.copybutton:nth-of-type(1)",
      "text": [
        ">>>"
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 265,
        "top": 15981,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s\">\"He was carefully disguised but captured quickly by police.\"</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">findall</span><span class=\"p\">(</span><span class=\"s\">r\"\\w+ly\"</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">)</span>\n<span class=\"go\">['carefully', 'quickly']</span>\n",
      "path": "div > div > div > div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#finding-all-adverbs.section:nth-of-type(6) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        ">>> ",
        "text",
        "=",
        "\"He was carefully disguised but captured quickly by police.\"",
        ">>> ",
        "re",
        ".",
        "findall",
        "(",
        "r\"\\w+ly\"",
        ",",
        "text",
        ")",
        "['carefully', 'quickly']"
      ]
    },
    {
      "bound": {
        "height": 39,
        "left": 265,
        "top": 16062,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "22px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "6px",
        "padding-top": "6px"
      },
      "element": "h3:nth-of-type(1)",
      "html": "6.2.5.7. Finding all Adverbs and their Positions<a class=\"headerlink\" href=\"#finding-all-adverbs-and-their-positions\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > div > div > h3",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#finding-all-adverbs-and-their-positions.section:nth-of-type(7) > h3:nth-of-type(1)",
      "text": [
        "6.2.5.7. Finding all Adverbs and their Positions",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 16117,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "If one wants more information about all matches of a pattern than the matched\ntext, <a class=\"reference internal\" href=\"#re.finditer\" title=\"re.finditer\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">finditer()</span></tt></a> is useful as it provides <a class=\"reference internal\" href=\"#match-objects\"><em>match objects</em></a> instead of strings.  Continuing with the previous example, if\none was a writer who wanted to find all of the adverbs <em>and their positions</em> in\nsome text, he or she would use <a class=\"reference internal\" href=\"#re.finditer\" title=\"re.finditer\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">finditer()</span></tt></a> in the following manner:",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#finding-all-adverbs-and-their-positions.section:nth-of-type(7) > p:nth-of-type(1)",
      "text": [
        "If one wants more information about all matches of a pattern than the matched\ntext, ",
        "finditer()",
        " is useful as it provides ",
        "match objects",
        " instead of strings.  Continuing with the previous example, if\none was a writer who wanted to find all of the adverbs ",
        "and their positions",
        " in\nsome text, he or she would use ",
        "finditer()",
        " in the following manner:"
      ]
    },
    {
      "bound": {
        "height": 19,
        "left": 1554,
        "top": 16177,
        "width": 30
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(170, 204, 153)",
        "cursor": "pointer",
        "font-family": "monospace",
        "font-size": "13px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(170, 204, 153)",
        "padding-left": "2px",
        "padding-right": "2px",
        "position": "absolute"
      },
      "element": "span.copybutton:nth-of-type(1)",
      "html": "&gt;&gt;&gt;",
      "path": "div > div > div > div > div > div > div > div > div > span",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#finding-all-adverbs-and-their-positions.section:nth-of-type(7) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > span.copybutton:nth-of-type(1)",
      "text": [
        ">>>"
      ]
    },
    {
      "bound": {
        "height": 102,
        "left": 265,
        "top": 16177,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s\">\"He was carefully disguised but captured quickly by police.\"</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">m</span> <span class=\"ow\">in</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">finditer</span><span class=\"p\">(</span><span class=\"s\">r\"\\w+ly\"</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s\">'%02d-%02d: %s'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">(),</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">end</span><span class=\"p\">(),</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)))</span>\n<span class=\"go\">07-16: carefully</span>\n<span class=\"go\">40-47: quickly</span>\n",
      "path": "div > div > div > div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#finding-all-adverbs-and-their-positions.section:nth-of-type(7) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        ">>> ",
        "text",
        "=",
        "\"He was carefully disguised but captured quickly by police.\"",
        ">>> ",
        "for",
        "m",
        "in",
        "re",
        ".",
        "finditer",
        "(",
        "r\"\\w+ly\"",
        ",",
        "text",
        "):",
        "... ",
        "print",
        "(",
        "'%02d-%02d: %s'",
        "%",
        "(",
        "m",
        ".",
        "start",
        "(),",
        "m",
        ".",
        "end",
        "(),",
        "m",
        ".",
        "group",
        "(",
        "0",
        ")))",
        "07-16: carefully",
        "40-47: quickly"
      ]
    },
    {
      "bound": {
        "height": 39,
        "left": 265,
        "top": 16294,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "22px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "6px",
        "padding-top": "6px"
      },
      "element": "h3:nth-of-type(1)",
      "html": "6.2.5.8. Raw String Notation<a class=\"headerlink\" href=\"#raw-string-notation\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > div > div > h3",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#raw-string-notation.section:nth-of-type(8) > h3:nth-of-type(1)",
      "text": [
        "6.2.5.8. Raw String Notation",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 16349,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "Raw string notation (<tt class=\"docutils literal\"><span class=\"pre\">r\"text\"</span></tt>) keeps regular expressions sane.  Without it,\nevery backslash (<tt class=\"docutils literal\"><span class=\"pre\">'\\'</span></tt>) in a regular expression would have to be prefixed with\nanother one to escape it.  For example, the two following lines of code are\nfunctionally identical:",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#raw-string-notation.section:nth-of-type(8) > p:nth-of-type(1)",
      "text": [
        "Raw string notation (",
        "r\"text\"",
        ") keeps regular expressions sane.  Without it,\nevery backslash (",
        "'\\'",
        ") in a regular expression would have to be prefixed with\nanother one to escape it.  For example, the two following lines of code are\nfunctionally identical:"
      ]
    },
    {
      "bound": {
        "height": 19,
        "left": 1554,
        "top": 16409,
        "width": 30
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(170, 204, 153)",
        "cursor": "pointer",
        "font-family": "monospace",
        "font-size": "13px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(170, 204, 153)",
        "padding-left": "2px",
        "padding-right": "2px",
        "position": "absolute"
      },
      "element": "span.copybutton:nth-of-type(1)",
      "html": "&gt;&gt;&gt;",
      "path": "div > div > div > div > div > div > div > div > div > span",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#raw-string-notation.section:nth-of-type(8) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > span.copybutton:nth-of-type(1)",
      "text": [
        ">>>"
      ]
    },
    {
      "bound": {
        "height": 84,
        "left": 265,
        "top": 16409,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"s\">r\"\\W(.)\\1\\W\"</span><span class=\"p\">,</span> <span class=\"s\">\" ff \"</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;_sre.SRE_Match object at ...&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\\\</span><span class=\"s\">W(.)</span><span class=\"se\">\\\\</span><span class=\"s\">1</span><span class=\"se\">\\\\</span><span class=\"s\">W\"</span><span class=\"p\">,</span> <span class=\"s\">\" ff \"</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;_sre.SRE_Match object at ...&gt;</span>\n",
      "path": "div > div > div > div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#raw-string-notation.section:nth-of-type(8) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        ">>> ",
        "re",
        ".",
        "match",
        "(",
        "r\"\\W(.)\\1\\W\"",
        ",",
        "\" ff \"",
        ")",
        "<_sre.SRE_Match object at ...>",
        ">>> ",
        "re",
        ".",
        "match",
        "(",
        "\"",
        "\\\\",
        "W(.)",
        "\\\\",
        "1",
        "\\\\",
        "W\"",
        ",",
        "\" ff \"",
        ")",
        "<_sre.SRE_Match object at ...>"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 16509,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "When one wants to match a literal backslash, it must be escaped in the regular\nexpression.  With raw string notation, this means <tt class=\"docutils literal\"><span class=\"pre\">r\"\\\\\"</span></tt>.  Without raw string\nnotation, one must use <tt class=\"docutils literal\"><span class=\"pre\">\"\\\\\\\\\"</span></tt>, making the following lines of code\nfunctionally identical:",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#raw-string-notation.section:nth-of-type(8) > p:nth-of-type(2)",
      "text": [
        "When one wants to match a literal backslash, it must be escaped in the regular\nexpression.  With raw string notation, this means ",
        "r\"\\\\\"",
        ".  Without raw string\nnotation, one must use ",
        "\"\\\\\\\\\"",
        ", making the following lines of code\nfunctionally identical:"
      ]
    },
    {
      "bound": {
        "height": 19,
        "left": 1554,
        "top": 16569,
        "width": 30
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(170, 204, 153)",
        "cursor": "pointer",
        "font-family": "monospace",
        "font-size": "13px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(170, 204, 153)",
        "padding-left": "2px",
        "padding-right": "2px",
        "position": "absolute"
      },
      "element": "span.copybutton:nth-of-type(1)",
      "html": "&gt;&gt;&gt;",
      "path": "div > div > div > div > div > div > div > div > div > span",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#raw-string-notation.section:nth-of-type(8) > div.highlight-python3:nth-of-type(2) > div.highlight:nth-of-type(1) > span.copybutton:nth-of-type(1)",
      "text": [
        ">>>"
      ]
    },
    {
      "bound": {
        "height": 84,
        "left": 265,
        "top": 16569,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"s\">r\"</span><span class=\"se\">\\\\</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"s\">r\"</span><span class=\"se\">\\\\</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;_sre.SRE_Match object at ...&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\\\\\\\</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"s\">r\"</span><span class=\"se\">\\\\</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;_sre.SRE_Match object at ...&gt;</span>\n",
      "path": "div > div > div > div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#raw-string-notation.section:nth-of-type(8) > div.highlight-python3:nth-of-type(2) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        ">>> ",
        "re",
        ".",
        "match",
        "(",
        "r\"",
        "\\\\",
        "\"",
        ",",
        "r\"",
        "\\\\",
        "\"",
        ")",
        "<_sre.SRE_Match object at ...>",
        ">>> ",
        "re",
        ".",
        "match",
        "(",
        "\"",
        "\\\\\\\\",
        "\"",
        ",",
        "r\"",
        "\\\\",
        "\"",
        ")",
        "<_sre.SRE_Match object at ...>"
      ]
    },
    {
      "bound": {
        "height": 39,
        "left": 265,
        "top": 16668,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "22px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "6px",
        "padding-top": "6px"
      },
      "element": "h3:nth-of-type(1)",
      "html": "6.2.5.9. Writing a Tokenizer<a class=\"headerlink\" href=\"#writing-a-tokenizer\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > div > div > h3",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#writing-a-tokenizer.section:nth-of-type(9) > h3:nth-of-type(1)",
      "text": [
        "6.2.5.9. Writing a Tokenizer",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 16723,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "A <a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/Lexical_analysis\">tokenizer or scanner</a>\nanalyzes a string to categorize groups of characters.  This is a useful first\nstep in writing a compiler or interpreter.",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#writing-a-tokenizer.section:nth-of-type(9) > p:nth-of-type(1)",
      "text": [
        "A ",
        "tokenizer or scanner",
        "\nanalyzes a string to categorize groups of characters.  This is a useful first\nstep in writing a compiler or interpreter."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 16761,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "The text categories are specified with regular expressions.  The technique is\nto combine those into a single master regular expression and to loop over\nsuccessive matches:",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#writing-a-tokenizer.section:nth-of-type(9) > p:nth-of-type(2)",
      "text": [
        "The text categories are specified with regular expressions.  The technique is\nto combine those into a single master regular expression and to loop over\nsuccessive matches:"
      ]
    },
    {
      "bound": {
        "height": 822,
        "left": 265,
        "top": 16799,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"kn\">import</span> <span class=\"nn\">collections</span>\n<span class=\"kn\">import</span> <span class=\"nn\">re</span>\n\n<span class=\"n\">Token</span> <span class=\"o\">=</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">namedtuple</span><span class=\"p\">(</span><span class=\"s\">'Token'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s\">'typ'</span><span class=\"p\">,</span> <span class=\"s\">'value'</span><span class=\"p\">,</span> <span class=\"s\">'line'</span><span class=\"p\">,</span> <span class=\"s\">'column'</span><span class=\"p\">])</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">tokenize</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"n\">keywords</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">'IF'</span><span class=\"p\">,</span> <span class=\"s\">'THEN'</span><span class=\"p\">,</span> <span class=\"s\">'ENDIF'</span><span class=\"p\">,</span> <span class=\"s\">'FOR'</span><span class=\"p\">,</span> <span class=\"s\">'NEXT'</span><span class=\"p\">,</span> <span class=\"s\">'GOSUB'</span><span class=\"p\">,</span> <span class=\"s\">'RETURN'</span><span class=\"p\">}</span>\n    <span class=\"n\">token_specification</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"s\">'NUMBER'</span><span class=\"p\">,</span>  <span class=\"s\">r'\\d+(\\.\\d*)?'</span><span class=\"p\">),</span> <span class=\"c\"># Integer or decimal number</span>\n        <span class=\"p\">(</span><span class=\"s\">'ASSIGN'</span><span class=\"p\">,</span>  <span class=\"s\">r':='</span><span class=\"p\">),</span>          <span class=\"c\"># Assignment operator</span>\n        <span class=\"p\">(</span><span class=\"s\">'END'</span><span class=\"p\">,</span>     <span class=\"s\">r';'</span><span class=\"p\">),</span>           <span class=\"c\"># Statement terminator</span>\n        <span class=\"p\">(</span><span class=\"s\">'ID'</span><span class=\"p\">,</span>      <span class=\"s\">r'[A-Za-z]+'</span><span class=\"p\">),</span>   <span class=\"c\"># Identifiers</span>\n        <span class=\"p\">(</span><span class=\"s\">'OP'</span><span class=\"p\">,</span>      <span class=\"s\">r'[+*\\/\\-]'</span><span class=\"p\">),</span>    <span class=\"c\"># Arithmetic operators</span>\n        <span class=\"p\">(</span><span class=\"s\">'NEWLINE'</span><span class=\"p\">,</span> <span class=\"s\">r'\\n'</span><span class=\"p\">),</span>          <span class=\"c\"># Line endings</span>\n        <span class=\"p\">(</span><span class=\"s\">'SKIP'</span><span class=\"p\">,</span>    <span class=\"s\">r'[ \\t]'</span><span class=\"p\">),</span>       <span class=\"c\"># Skip over spaces and tabs</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">tok_regex</span> <span class=\"o\">=</span> <span class=\"s\">'|'</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"s\">'(?P&lt;%s&gt;%s)'</span> <span class=\"o\">%</span> <span class=\"n\">pair</span> <span class=\"k\">for</span> <span class=\"n\">pair</span> <span class=\"ow\">in</span> <span class=\"n\">token_specification</span><span class=\"p\">)</span>\n    <span class=\"n\">get_token</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"n\">tok_regex</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">match</span>\n    <span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">line_start</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">mo</span> <span class=\"o\">=</span> <span class=\"n\">get_token</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n    <span class=\"k\">while</span> <span class=\"n\">mo</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"k\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">typ</span> <span class=\"o\">=</span> <span class=\"n\">mo</span><span class=\"o\">.</span><span class=\"n\">lastgroup</span>\n        <span class=\"k\">if</span> <span class=\"n\">typ</span> <span class=\"o\">==</span> <span class=\"s\">'NEWLINE'</span><span class=\"p\">:</span>\n            <span class=\"n\">line_start</span> <span class=\"o\">=</span> <span class=\"n\">pos</span>\n            <span class=\"n\">line</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">elif</span> <span class=\"n\">typ</span> <span class=\"o\">!=</span> <span class=\"s\">'SKIP'</span><span class=\"p\">:</span>\n            <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">mo</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"n\">typ</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">typ</span> <span class=\"o\">==</span> <span class=\"s\">'ID'</span> <span class=\"ow\">and</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"n\">keywords</span><span class=\"p\">:</span>\n                <span class=\"n\">typ</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n            <span class=\"k\">yield</span> <span class=\"n\">Token</span><span class=\"p\">(</span><span class=\"n\">typ</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"n\">line</span><span class=\"p\">,</span> <span class=\"n\">mo</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span><span class=\"o\">-</span><span class=\"n\">line_start</span><span class=\"p\">)</span>\n        <span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">mo</span><span class=\"o\">.</span><span class=\"n\">end</span><span class=\"p\">()</span>\n        <span class=\"n\">mo</span> <span class=\"o\">=</span> <span class=\"n\">get_token</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">pos</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">pos</span> <span class=\"o\">!=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span><span class=\"s\">'Unexpected character %r on line %d'</span> <span class=\"o\">%</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">pos</span><span class=\"p\">],</span> <span class=\"n\">line</span><span class=\"p\">))</span>\n\n<span class=\"n\">statements</span> <span class=\"o\">=</span> <span class=\"s\">'''</span>\n<span class=\"s\">    IF quantity THEN</span>\n<span class=\"s\">        total := total + price * quantity;</span>\n<span class=\"s\">        tax := price * 0.05;</span>\n<span class=\"s\">    ENDIF;</span>\n<span class=\"s\">'''</span>\n\n<span class=\"k\">for</span> <span class=\"n\">token</span> <span class=\"ow\">in</span> <span class=\"n\">tokenize</span><span class=\"p\">(</span><span class=\"n\">statements</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">)</span>\n",
      "path": "div > div > div > div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#writing-a-tokenizer.section:nth-of-type(9) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        "import",
        "collections",
        "import",
        "re",
        "Token",
        "=",
        "collections",
        ".",
        "namedtuple",
        "(",
        "'Token'",
        ",",
        "[",
        "'typ'",
        ",",
        "'value'",
        ",",
        "'line'",
        ",",
        "'column'",
        "])",
        "def",
        "tokenize",
        "(",
        "s",
        "):",
        "keywords",
        "=",
        "{",
        "'IF'",
        ",",
        "'THEN'",
        ",",
        "'ENDIF'",
        ",",
        "'FOR'",
        ",",
        "'NEXT'",
        ",",
        "'GOSUB'",
        ",",
        "'RETURN'",
        "}",
        "token_specification",
        "=",
        "[",
        "(",
        "'NUMBER'",
        ",",
        "r'\\d+(\\.\\d*)?'",
        "),",
        "# Integer or decimal number",
        "(",
        "'ASSIGN'",
        ",",
        "r':='",
        "),",
        "# Assignment operator",
        "(",
        "'END'",
        ",",
        "r';'",
        "),",
        "# Statement terminator",
        "(",
        "'ID'",
        ",",
        "r'[A-Za-z]+'",
        "),",
        "# Identifiers",
        "(",
        "'OP'",
        ",",
        "r'[+*\\/\\-]'",
        "),",
        "# Arithmetic operators",
        "(",
        "'NEWLINE'",
        ",",
        "r'\\n'",
        "),",
        "# Line endings",
        "(",
        "'SKIP'",
        ",",
        "r'[ \\t]'",
        "),",
        "# Skip over spaces and tabs",
        "]",
        "tok_regex",
        "=",
        "'|'",
        ".",
        "join",
        "(",
        "'(?P<%s>%s)'",
        "%",
        "pair",
        "for",
        "pair",
        "in",
        "token_specification",
        ")",
        "get_token",
        "=",
        "re",
        ".",
        "compile",
        "(",
        "tok_regex",
        ")",
        ".",
        "match",
        "line",
        "=",
        "1",
        "pos",
        "=",
        "line_start",
        "=",
        "0",
        "mo",
        "=",
        "get_token",
        "(",
        "s",
        ")",
        "while",
        "mo",
        "is",
        "not",
        "None",
        ":",
        "typ",
        "=",
        "mo",
        ".",
        "lastgroup",
        "if",
        "typ",
        "==",
        "'NEWLINE'",
        ":",
        "line_start",
        "=",
        "pos",
        "line",
        "+=",
        "1",
        "elif",
        "typ",
        "!=",
        "'SKIP'",
        ":",
        "val",
        "=",
        "mo",
        ".",
        "group",
        "(",
        "typ",
        ")",
        "if",
        "typ",
        "==",
        "'ID'",
        "and",
        "val",
        "in",
        "keywords",
        ":",
        "typ",
        "=",
        "val",
        "yield",
        "Token",
        "(",
        "typ",
        ",",
        "val",
        ",",
        "line",
        ",",
        "mo",
        ".",
        "start",
        "()",
        "-",
        "line_start",
        ")",
        "pos",
        "=",
        "mo",
        ".",
        "end",
        "()",
        "mo",
        "=",
        "get_token",
        "(",
        "s",
        ",",
        "pos",
        ")",
        "if",
        "pos",
        "!=",
        "len",
        "(",
        "s",
        "):",
        "raise",
        "RuntimeError",
        "(",
        "'Unexpected character %r on line %d'",
        "%",
        "(",
        "s",
        "[",
        "pos",
        "],",
        "line",
        "))",
        "statements",
        "=",
        "'''",
        "    IF quantity THEN",
        "        total := total + price * quantity;",
        "        tax := price * 0.05;",
        "    ENDIF;",
        "'''",
        "for",
        "token",
        "in",
        "tokenize",
        "(",
        "statements",
        "):",
        "print",
        "(",
        "token",
        ")"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 17637,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(3)",
      "html": "The tokenizer produces the following output:",
      "path": "div > div > div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#writing-a-tokenizer.section:nth-of-type(9) > p:nth-of-type(3)",
      "text": [
        "The tokenizer produces the following output:"
      ]
    },
    {
      "bound": {
        "height": 354,
        "left": 265,
        "top": 17675,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"n\">Token</span><span class=\"p\">(</span><span class=\"n\">typ</span><span class=\"o\">=</span><span class=\"s\">'IF'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s\">'IF'</span><span class=\"p\">,</span> <span class=\"n\">line</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">column</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">Token</span><span class=\"p\">(</span><span class=\"n\">typ</span><span class=\"o\">=</span><span class=\"s\">'ID'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s\">'quantity'</span><span class=\"p\">,</span> <span class=\"n\">line</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">column</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n<span class=\"n\">Token</span><span class=\"p\">(</span><span class=\"n\">typ</span><span class=\"o\">=</span><span class=\"s\">'THEN'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s\">'THEN'</span><span class=\"p\">,</span> <span class=\"n\">line</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">column</span><span class=\"o\">=</span><span class=\"mi\">17</span><span class=\"p\">)</span>\n<span class=\"n\">Token</span><span class=\"p\">(</span><span class=\"n\">typ</span><span class=\"o\">=</span><span class=\"s\">'ID'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s\">'total'</span><span class=\"p\">,</span> <span class=\"n\">line</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">column</span><span class=\"o\">=</span><span class=\"mi\">9</span><span class=\"p\">)</span>\n<span class=\"n\">Token</span><span class=\"p\">(</span><span class=\"n\">typ</span><span class=\"o\">=</span><span class=\"s\">'ASSIGN'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s\">':='</span><span class=\"p\">,</span> <span class=\"n\">line</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">column</span><span class=\"o\">=</span><span class=\"mi\">15</span><span class=\"p\">)</span>\n<span class=\"n\">Token</span><span class=\"p\">(</span><span class=\"n\">typ</span><span class=\"o\">=</span><span class=\"s\">'ID'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s\">'total'</span><span class=\"p\">,</span> <span class=\"n\">line</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">column</span><span class=\"o\">=</span><span class=\"mi\">18</span><span class=\"p\">)</span>\n<span class=\"n\">Token</span><span class=\"p\">(</span><span class=\"n\">typ</span><span class=\"o\">=</span><span class=\"s\">'OP'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s\">'+'</span><span class=\"p\">,</span> <span class=\"n\">line</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">column</span><span class=\"o\">=</span><span class=\"mi\">24</span><span class=\"p\">)</span>\n<span class=\"n\">Token</span><span class=\"p\">(</span><span class=\"n\">typ</span><span class=\"o\">=</span><span class=\"s\">'ID'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s\">'price'</span><span class=\"p\">,</span> <span class=\"n\">line</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">column</span><span class=\"o\">=</span><span class=\"mi\">26</span><span class=\"p\">)</span>\n<span class=\"n\">Token</span><span class=\"p\">(</span><span class=\"n\">typ</span><span class=\"o\">=</span><span class=\"s\">'OP'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s\">'*'</span><span class=\"p\">,</span> <span class=\"n\">line</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">column</span><span class=\"o\">=</span><span class=\"mi\">32</span><span class=\"p\">)</span>\n<span class=\"n\">Token</span><span class=\"p\">(</span><span class=\"n\">typ</span><span class=\"o\">=</span><span class=\"s\">'ID'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s\">'quantity'</span><span class=\"p\">,</span> <span class=\"n\">line</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">column</span><span class=\"o\">=</span><span class=\"mi\">34</span><span class=\"p\">)</span>\n<span class=\"n\">Token</span><span class=\"p\">(</span><span class=\"n\">typ</span><span class=\"o\">=</span><span class=\"s\">'END'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s\">';'</span><span class=\"p\">,</span> <span class=\"n\">line</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">column</span><span class=\"o\">=</span><span class=\"mi\">42</span><span class=\"p\">)</span>\n<span class=\"n\">Token</span><span class=\"p\">(</span><span class=\"n\">typ</span><span class=\"o\">=</span><span class=\"s\">'ID'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s\">'tax'</span><span class=\"p\">,</span> <span class=\"n\">line</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">column</span><span class=\"o\">=</span><span class=\"mi\">9</span><span class=\"p\">)</span>\n<span class=\"n\">Token</span><span class=\"p\">(</span><span class=\"n\">typ</span><span class=\"o\">=</span><span class=\"s\">'ASSIGN'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s\">':='</span><span class=\"p\">,</span> <span class=\"n\">line</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">column</span><span class=\"o\">=</span><span class=\"mi\">13</span><span class=\"p\">)</span>\n<span class=\"n\">Token</span><span class=\"p\">(</span><span class=\"n\">typ</span><span class=\"o\">=</span><span class=\"s\">'ID'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s\">'price'</span><span class=\"p\">,</span> <span class=\"n\">line</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">column</span><span class=\"o\">=</span><span class=\"mi\">16</span><span class=\"p\">)</span>\n<span class=\"n\">Token</span><span class=\"p\">(</span><span class=\"n\">typ</span><span class=\"o\">=</span><span class=\"s\">'OP'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s\">'*'</span><span class=\"p\">,</span> <span class=\"n\">line</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">column</span><span class=\"o\">=</span><span class=\"mi\">22</span><span class=\"p\">)</span>\n<span class=\"n\">Token</span><span class=\"p\">(</span><span class=\"n\">typ</span><span class=\"o\">=</span><span class=\"s\">'NUMBER'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s\">'0.05'</span><span class=\"p\">,</span> <span class=\"n\">line</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">column</span><span class=\"o\">=</span><span class=\"mi\">24</span><span class=\"p\">)</span>\n<span class=\"n\">Token</span><span class=\"p\">(</span><span class=\"n\">typ</span><span class=\"o\">=</span><span class=\"s\">'END'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s\">';'</span><span class=\"p\">,</span> <span class=\"n\">line</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">column</span><span class=\"o\">=</span><span class=\"mi\">28</span><span class=\"p\">)</span>\n<span class=\"n\">Token</span><span class=\"p\">(</span><span class=\"n\">typ</span><span class=\"o\">=</span><span class=\"s\">'ENDIF'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s\">'ENDIF'</span><span class=\"p\">,</span> <span class=\"n\">line</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">column</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">Token</span><span class=\"p\">(</span><span class=\"n\">typ</span><span class=\"o\">=</span><span class=\"s\">'END'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s\">';'</span><span class=\"p\">,</span> <span class=\"n\">line</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">column</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n",
      "path": "div > div > div > div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-re.section:nth-of-type(1) > div#regular-expression-examples.section:nth-of-type(6) > div#writing-a-tokenizer.section:nth-of-type(9) > div.highlight-python3:nth-of-type(2) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        "Token",
        "(",
        "typ",
        "=",
        "'IF'",
        ",",
        "value",
        "=",
        "'IF'",
        ",",
        "line",
        "=",
        "2",
        ",",
        "column",
        "=",
        "5",
        ")",
        "Token",
        "(",
        "typ",
        "=",
        "'ID'",
        ",",
        "value",
        "=",
        "'quantity'",
        ",",
        "line",
        "=",
        "2",
        ",",
        "column",
        "=",
        "8",
        ")",
        "Token",
        "(",
        "typ",
        "=",
        "'THEN'",
        ",",
        "value",
        "=",
        "'THEN'",
        ",",
        "line",
        "=",
        "2",
        ",",
        "column",
        "=",
        "17",
        ")",
        "Token",
        "(",
        "typ",
        "=",
        "'ID'",
        ",",
        "value",
        "=",
        "'total'",
        ",",
        "line",
        "=",
        "3",
        ",",
        "column",
        "=",
        "9",
        ")",
        "Token",
        "(",
        "typ",
        "=",
        "'ASSIGN'",
        ",",
        "value",
        "=",
        "':='",
        ",",
        "line",
        "=",
        "3",
        ",",
        "column",
        "=",
        "15",
        ")",
        "Token",
        "(",
        "typ",
        "=",
        "'ID'",
        ",",
        "value",
        "=",
        "'total'",
        ",",
        "line",
        "=",
        "3",
        ",",
        "column",
        "=",
        "18",
        ")",
        "Token",
        "(",
        "typ",
        "=",
        "'OP'",
        ",",
        "value",
        "=",
        "'+'",
        ",",
        "line",
        "=",
        "3",
        ",",
        "column",
        "=",
        "24",
        ")",
        "Token",
        "(",
        "typ",
        "=",
        "'ID'",
        ",",
        "value",
        "=",
        "'price'",
        ",",
        "line",
        "=",
        "3",
        ",",
        "column",
        "=",
        "26",
        ")",
        "Token",
        "(",
        "typ",
        "=",
        "'OP'",
        ",",
        "value",
        "=",
        "'*'",
        ",",
        "line",
        "=",
        "3",
        ",",
        "column",
        "=",
        "32",
        ")",
        "Token",
        "(",
        "typ",
        "=",
        "'ID'",
        ",",
        "value",
        "=",
        "'quantity'",
        ",",
        "line",
        "=",
        "3",
        ",",
        "column",
        "=",
        "34",
        ")",
        "Token",
        "(",
        "typ",
        "=",
        "'END'",
        ",",
        "value",
        "=",
        "';'",
        ",",
        "line",
        "=",
        "3",
        ",",
        "column",
        "=",
        "42",
        ")",
        "Token",
        "(",
        "typ",
        "=",
        "'ID'",
        ",",
        "value",
        "=",
        "'tax'",
        ",",
        "line",
        "=",
        "4",
        ",",
        "column",
        "=",
        "9",
        ")",
        "Token",
        "(",
        "typ",
        "=",
        "'ASSIGN'",
        ",",
        "value",
        "=",
        "':='",
        ",",
        "line",
        "=",
        "4",
        ",",
        "column",
        "=",
        "13",
        ")",
        "Token",
        "(",
        "typ",
        "=",
        "'ID'",
        ",",
        "value",
        "=",
        "'price'",
        ",",
        "line",
        "=",
        "4",
        ",",
        "column",
        "=",
        "16",
        ")",
        "Token",
        "(",
        "typ",
        "=",
        "'OP'",
        ",",
        "value",
        "=",
        "'*'",
        ",",
        "line",
        "=",
        "4",
        ",",
        "column",
        "=",
        "22",
        ")",
        "Token",
        "(",
        "typ",
        "=",
        "'NUMBER'",
        ",",
        "value",
        "=",
        "'0.05'",
        ",",
        "line",
        "=",
        "4",
        ",",
        "column",
        "=",
        "24",
        ")",
        "Token",
        "(",
        "typ",
        "=",
        "'END'",
        ",",
        "value",
        "=",
        "';'",
        ",",
        "line",
        "=",
        "4",
        ",",
        "column",
        "=",
        "28",
        ")",
        "Token",
        "(",
        "typ",
        "=",
        "'ENDIF'",
        ",",
        "value",
        "=",
        "'ENDIF'",
        ",",
        "line",
        "=",
        "5",
        ",",
        "column",
        "=",
        "5",
        ")",
        "Token",
        "(",
        "typ",
        "=",
        "'END'",
        ",",
        "value",
        "=",
        "';'",
        ",",
        "line",
        "=",
        "5",
        ",",
        "column",
        "=",
        "10",
        ")"
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 26,
        "top": 82,
        "width": 202
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "font-size": "19px",
        "line-height": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "3px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "h3:nth-of-type(1)",
      "html": "<a href=\"../contents.html\">Table Of Contents</a>",
      "path": "div > div > div > h3",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > h3:nth-of-type(1)",
      "text": [
        "Table Of Contents"
      ]
    },
    {
      "bound": {
        "height": 484,
        "left": 36,
        "top": 108,
        "width": 182
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(1)",
      "html": "<a class=\"reference internal\" href=\"#\">6.2. <tt class=\"docutils literal\"><span class=\"pre\">re</span></tt> — Regular expression operations</a><ul>\n<li><a class=\"reference internal\" href=\"#regular-expression-syntax\">6.2.1. Regular Expression Syntax</a></li>\n<li><a class=\"reference internal\" href=\"#module-contents\">6.2.2. Module Contents</a></li>\n<li><a class=\"reference internal\" href=\"#regular-expression-objects\">6.2.3. Regular Expression Objects</a></li>\n<li><a class=\"reference internal\" href=\"#match-objects\">6.2.4. Match Objects</a></li>\n<li><a class=\"reference internal\" href=\"#regular-expression-examples\">6.2.5. Regular Expression Examples</a><ul>\n<li><a class=\"reference internal\" href=\"#checking-for-a-pair\">6.2.5.1. Checking for a Pair</a></li>\n<li><a class=\"reference internal\" href=\"#simulating-scanf\">6.2.5.2. Simulating scanf()</a></li>\n<li><a class=\"reference internal\" href=\"#search-vs-match\">6.2.5.3. search() vs. match()</a></li>\n<li><a class=\"reference internal\" href=\"#making-a-phonebook\">6.2.5.4. Making a Phonebook</a></li>\n<li><a class=\"reference internal\" href=\"#text-munging\">6.2.5.5. Text Munging</a></li>\n<li><a class=\"reference internal\" href=\"#finding-all-adverbs\">6.2.5.6. Finding all Adverbs</a></li>\n<li><a class=\"reference internal\" href=\"#finding-all-adverbs-and-their-positions\">6.2.5.7. Finding all Adverbs and their Positions</a></li>\n<li><a class=\"reference internal\" href=\"#raw-string-notation\">6.2.5.8. Raw String Notation</a></li>\n<li><a class=\"reference internal\" href=\"#writing-a-tokenizer\">6.2.5.9. Writing a Tokenizer</a></li>\n</ul>\n</li>\n</ul>\n",
      "path": "div > div > div > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1)",
      "text": [
        "6.2. ",
        "re",
        " — Regular expression operations"
      ]
    },
    {
      "bound": {
        "height": 32,
        "left": 56,
        "top": 140,
        "width": 152
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "square",
        "margin-bottom": "5px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(1)",
      "html": "<a class=\"reference internal\" href=\"#regular-expression-syntax\">6.2.1. Regular Expression Syntax</a>",
      "path": "div > div > div > ul > li > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1)",
      "text": [
        "6.2.1. Regular Expression Syntax"
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 56,
        "top": 177,
        "width": 152
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "square",
        "margin-bottom": "5px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(2)",
      "html": "<a class=\"reference internal\" href=\"#module-contents\">6.2.2. Module Contents</a>",
      "path": "div > div > div > ul > li > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(2)",
      "text": [
        "6.2.2. Module Contents"
      ]
    },
    {
      "bound": {
        "height": 32,
        "left": 56,
        "top": 198,
        "width": 152
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "square",
        "margin-bottom": "5px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(3)",
      "html": "<a class=\"reference internal\" href=\"#regular-expression-objects\">6.2.3. Regular Expression Objects</a>",
      "path": "div > div > div > ul > li > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(3)",
      "text": [
        "6.2.3. Regular Expression Objects"
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 56,
        "top": 235,
        "width": 152
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "square",
        "margin-bottom": "5px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(4)",
      "html": "<a class=\"reference internal\" href=\"#match-objects\">6.2.4. Match Objects</a>",
      "path": "div > div > div > ul > li > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(4)",
      "text": [
        "6.2.4. Match Objects"
      ]
    },
    {
      "bound": {
        "height": 336,
        "left": 56,
        "top": 256,
        "width": 152
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "square",
        "margin-bottom": "5px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(5)",
      "html": "<a class=\"reference internal\" href=\"#regular-expression-examples\">6.2.5. Regular Expression Examples</a><ul>\n<li><a class=\"reference internal\" href=\"#checking-for-a-pair\">6.2.5.1. Checking for a Pair</a></li>\n<li><a class=\"reference internal\" href=\"#simulating-scanf\">6.2.5.2. Simulating scanf()</a></li>\n<li><a class=\"reference internal\" href=\"#search-vs-match\">6.2.5.3. search() vs. match()</a></li>\n<li><a class=\"reference internal\" href=\"#making-a-phonebook\">6.2.5.4. Making a Phonebook</a></li>\n<li><a class=\"reference internal\" href=\"#text-munging\">6.2.5.5. Text Munging</a></li>\n<li><a class=\"reference internal\" href=\"#finding-all-adverbs\">6.2.5.6. Finding all Adverbs</a></li>\n<li><a class=\"reference internal\" href=\"#finding-all-adverbs-and-their-positions\">6.2.5.7. Finding all Adverbs and their Positions</a></li>\n<li><a class=\"reference internal\" href=\"#raw-string-notation\">6.2.5.8. Raw String Notation</a></li>\n<li><a class=\"reference internal\" href=\"#writing-a-tokenizer\">6.2.5.9. Writing a Tokenizer</a></li>\n</ul>\n",
      "path": "div > div > div > ul > li > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(5)",
      "text": [
        "6.2.5. Regular Expression Examples"
      ]
    },
    {
      "bound": {
        "height": 32,
        "left": 76,
        "top": 288,
        "width": 122
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "square",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(1)",
      "html": "<a class=\"reference internal\" href=\"#checking-for-a-pair\">6.2.5.1. Checking for a Pair</a>",
      "path": "div > div > div > ul > li > ul > li > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(5) > ul:nth-of-type(1) > li:nth-of-type(1)",
      "text": [
        "6.2.5.1. Checking for a Pair"
      ]
    },
    {
      "bound": {
        "height": 32,
        "left": 76,
        "top": 320,
        "width": 122
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "square",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(2)",
      "html": "<a class=\"reference internal\" href=\"#simulating-scanf\">6.2.5.2. Simulating scanf()</a>",
      "path": "div > div > div > ul > li > ul > li > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(5) > ul:nth-of-type(1) > li:nth-of-type(2)",
      "text": [
        "6.2.5.2. Simulating scanf()"
      ]
    },
    {
      "bound": {
        "height": 32,
        "left": 76,
        "top": 352,
        "width": 122
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "square",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(3)",
      "html": "<a class=\"reference internal\" href=\"#search-vs-match\">6.2.5.3. search() vs. match()</a>",
      "path": "div > div > div > ul > li > ul > li > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(5) > ul:nth-of-type(1) > li:nth-of-type(3)",
      "text": [
        "6.2.5.3. search() vs. match()"
      ]
    },
    {
      "bound": {
        "height": 32,
        "left": 76,
        "top": 384,
        "width": 122
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "square",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(4)",
      "html": "<a class=\"reference internal\" href=\"#making-a-phonebook\">6.2.5.4. Making a Phonebook</a>",
      "path": "div > div > div > ul > li > ul > li > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(5) > ul:nth-of-type(1) > li:nth-of-type(4)",
      "text": [
        "6.2.5.4. Making a Phonebook"
      ]
    },
    {
      "bound": {
        "height": 32,
        "left": 76,
        "top": 416,
        "width": 122
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "square",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(5)",
      "html": "<a class=\"reference internal\" href=\"#text-munging\">6.2.5.5. Text Munging</a>",
      "path": "div > div > div > ul > li > ul > li > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(5) > ul:nth-of-type(1) > li:nth-of-type(5)",
      "text": [
        "6.2.5.5. Text Munging"
      ]
    },
    {
      "bound": {
        "height": 32,
        "left": 76,
        "top": 448,
        "width": 122
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "square",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(6)",
      "html": "<a class=\"reference internal\" href=\"#finding-all-adverbs\">6.2.5.6. Finding all Adverbs</a>",
      "path": "div > div > div > ul > li > ul > li > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(5) > ul:nth-of-type(1) > li:nth-of-type(6)",
      "text": [
        "6.2.5.6. Finding all Adverbs"
      ]
    },
    {
      "bound": {
        "height": 48,
        "left": 76,
        "top": 480,
        "width": 122
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "square",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(7)",
      "html": "<a class=\"reference internal\" href=\"#finding-all-adverbs-and-their-positions\">6.2.5.7. Finding all Adverbs and their Positions</a>",
      "path": "div > div > div > ul > li > ul > li > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(5) > ul:nth-of-type(1) > li:nth-of-type(7)",
      "text": [
        "6.2.5.7. Finding all Adverbs and their Positions"
      ]
    },
    {
      "bound": {
        "height": 32,
        "left": 76,
        "top": 528,
        "width": 122
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "square",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(8)",
      "html": "<a class=\"reference internal\" href=\"#raw-string-notation\">6.2.5.8. Raw String Notation</a>",
      "path": "div > div > div > ul > li > ul > li > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(5) > ul:nth-of-type(1) > li:nth-of-type(8)",
      "text": [
        "6.2.5.8. Raw String Notation"
      ]
    },
    {
      "bound": {
        "height": 32,
        "left": 76,
        "top": 560,
        "width": 122
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "square",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(9)",
      "html": "<a class=\"reference internal\" href=\"#writing-a-tokenizer\">6.2.5.9. Writing a Tokenizer</a>",
      "path": "div > div > div > ul > li > ul > li > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(5) > ul:nth-of-type(1) > li:nth-of-type(9)",
      "text": [
        "6.2.5.9. Writing a Tokenizer"
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 26,
        "top": 618,
        "width": 202
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "font-size": "17px",
        "line-height": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "26px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "h4:nth-of-type(1)",
      "html": "Previous topic",
      "path": "div > div > div > h4",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > h4:nth-of-type(1)",
      "text": [
        "Previous topic"
      ]
    },
    {
      "bound": {
        "height": 32,
        "left": 36,
        "top": 639,
        "width": 182
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "font-size": "13px",
        "line-height": "16px",
        "margin-bottom": "10px",
        "margin-left": "10px",
        "margin-right": "10px",
        "margin-top": "5px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "p.topless:nth-of-type(1)",
      "html": "<a href=\"string.html\" title=\"previous chapter\">6.1. <tt class=\"docutils literal\"><span class=\"pre\">string</span></tt> — Common string operations</a>",
      "path": "div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > p.topless:nth-of-type(1)",
      "text": [
        "6.1. ",
        "string",
        " — Common string operations"
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 26,
        "top": 697,
        "width": 202
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "font-size": "17px",
        "line-height": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "26px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "h4:nth-of-type(2)",
      "html": "Next topic",
      "path": "div > div > div > h4",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > h4:nth-of-type(2)",
      "text": [
        "Next topic"
      ]
    },
    {
      "bound": {
        "height": 32,
        "left": 36,
        "top": 718,
        "width": 182
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "font-size": "13px",
        "line-height": "16px",
        "margin-bottom": "10px",
        "margin-left": "10px",
        "margin-right": "10px",
        "margin-top": "5px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "p.topless:nth-of-type(2)",
      "html": "<a href=\"difflib.html\" title=\"next chapter\">6.3. <tt class=\"docutils literal docutils literal\"><span class=\"pre\">difflib</span></tt> — Helpers for computing deltas</a>",
      "path": "div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > p.topless:nth-of-type(2)",
      "text": [
        "6.3. ",
        "difflib",
        " — Helpers for computing deltas"
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 26,
        "top": 778,
        "width": 202
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "font-size": "19px",
        "line-height": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "28px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "h3:nth-of-type(2)",
      "html": "This Page",
      "path": "div > div > div > h3",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > h3:nth-of-type(2)",
      "text": [
        "This Page"
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 36,
        "top": 804,
        "width": 182
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(1)",
      "html": "<a href=\"../bugs.html\">Report a Bug</a>",
      "path": "div > div > div > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul.this-page-menu:nth-of-type(2) > li:nth-of-type(1)",
      "text": [
        "Report a Bug"
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 36,
        "top": 820,
        "width": 182
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(2)",
      "html": "<a href=\"../_sources/library/re.txt\" rel=\"nofollow\">Show Source</a>",
      "path": "div > div > div > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul.this-page-menu:nth-of-type(2) > li:nth-of-type(2)",
      "text": [
        "Show Source"
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 26,
        "top": 864,
        "width": 202
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "font-size": "19px",
        "line-height": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "28px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "h3:nth-of-type(1)",
      "html": "Quick search",
      "path": "div > div > div > div > h3",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > div#searchbox:nth-of-type(1) > h3:nth-of-type(1)",
      "text": [
        "Quick search"
      ]
    },
    {
      "bound": {
        "height": 32,
        "left": 26,
        "top": 927,
        "width": 202
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "font-size": "12px",
        "line-height": "16px",
        "margin-bottom": "12px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "12px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "p.searchtip:nth-of-type(1)",
      "html": "\n    Enter search terms or a module, class or function name.\n    ",
      "path": "div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > div#searchbox:nth-of-type(1) > p.searchtip:nth-of-type(1)",
      "text": [
        "\n    Enter search terms or a module, class or function name.\n    "
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 235,
        "top": 1990,
        "width": 9
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "cursor": "pointer",
        "line-height": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "position": "fixed"
      },
      "element": "span:nth-of-type(1)",
      "html": "«",
      "path": "div > div > div > span",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div#sidebarbutton:nth-of-type(2) > span:nth-of-type(1)",
      "text": [
        "«"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 1540,
        "top": 18059,
        "width": 34
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "float": "right",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "10px",
        "outline-color": "rgb(102, 102, 102)"
      },
      "element": "li.right:nth-of-type(1)",
      "html": "\n          <a href=\"../genindex.html\" title=\"General Index\">index</a>",
      "path": "div > ul > li",
      "selector": "div.related:nth-of-type(3) > ul:nth-of-type(1) > li.right:nth-of-type(1)",
      "text": [
        "index"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 1473,
        "top": 18059,
        "width": 62
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "float": "right",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "5px",
        "outline-color": "rgb(102, 102, 102)"
      },
      "element": "li.right:nth-of-type(2)",
      "html": "\n          <a href=\"../py-modindex.html\" title=\"Python Module Index\">modules</a> |",
      "path": "div > ul > li",
      "selector": "div.related:nth-of-type(3) > ul:nth-of-type(1) > li.right:nth-of-type(2)",
      "text": [
        "modules",
        " |"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 1430,
        "top": 18059,
        "width": 38
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "float": "right",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "5px",
        "outline-color": "rgb(102, 102, 102)"
      },
      "element": "li.right:nth-of-type(3)",
      "html": "\n          <a href=\"difflib.html\" title=\"6.3. difflib — Helpers for computing deltas\">next</a> |",
      "path": "div > ul > li",
      "selector": "div.related:nth-of-type(3) > ul:nth-of-type(1) > li.right:nth-of-type(3)",
      "text": [
        "next",
        " |"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 1362,
        "top": 18059,
        "width": 63
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "float": "right",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "5px",
        "outline-color": "rgb(102, 102, 102)"
      },
      "element": "li.right:nth-of-type(4)",
      "html": "\n          <a href=\"string.html\" title=\"6.1. string — Common string operations\">previous</a> |",
      "path": "div > ul > li",
      "selector": "div.related:nth-of-type(3) > ul:nth-of-type(1) > li.right:nth-of-type(4)",
      "text": [
        "previous",
        " |"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 16,
        "top": 18059,
        "width": 1568
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(102, 102, 102)",
        "padding-left": "10px"
      },
      "element": "ul:nth-of-type(1)",
      "html": "\n        <li class=\"right\" style=\"margin-right: 10px\">\n          <a href=\"../genindex.html\" title=\"General Index\">index</a></li>\n        <li class=\"right\">\n          <a href=\"../py-modindex.html\" title=\"Python Module Index\">modules</a> |</li>\n        <li class=\"right\">\n          <a href=\"difflib.html\" title=\"6.3. difflib — Helpers for computing deltas\">next</a> |</li>\n        <li class=\"right\">\n          <a href=\"string.html\" title=\"6.1. string — Common string operations\">previous</a> |</li>\n        <li><img src=\"../_static/py.png\" alt=\"\" style=\"vertical-align: middle; margin-top: -1px\"></li>\n        <li><a href=\"http://www.python.org/\">Python</a> »</li>\n        <li>\n          <span class=\"version_switcher_placeholder\"><select><option value=\"3.4\">dev (3.4)</option><option value=\"3.3\" selected=\"selected\">3.3.2</option><option value=\"3.2\">3.2</option><option value=\"2.7\">2.7</option><option value=\"2.6\">2.6</option></select></span>\n          <a href=\"../index.html\">Documentation</a> »\n        </li>\n\n          <li><a href=\"index.html\">The Python Standard Library</a> »</li>\n          <li><a href=\"text.html\">6. Text Processing Services</a> »</li> \n      ",
      "path": "div > ul",
      "selector": "div.related:nth-of-type(3) > ul:nth-of-type(1)",
      "text": [
        "Python",
        " »",
        "Documentation",
        " »\n        ",
        "The Python Standard Library",
        " »",
        "6. Text Processing Services",
        " »"
      ]
    },
    {
      "bound": {
        "height": 90,
        "left": 16,
        "top": 18089,
        "width": 1558
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(85, 85, 85)",
        "border-left-color": "rgb(85, 85, 85)",
        "border-right-color": "rgb(85, 85, 85)",
        "border-top-color": "rgb(85, 85, 85)",
        "color": "rgb(85, 85, 85)",
        "font-size": "12px",
        "line-height": "18px",
        "margin-left": "0px",
        "margin-right": "10px",
        "margin-top": "-24px",
        "outline-color": "rgb(85, 85, 85)",
        "padding-bottom": "9px",
        "padding-top": "9px",
        "text-align": "right"
      },
      "element": "div.footer:nth-of-type(4)",
      "html": "\n    © <a href=\"../copyright.html\">Copyright</a> 1990-2013, Python Software Foundation.\n    <br>\n    The Python Software Foundation is a non-profit corporation.\n    <a href=\"http://www.python.org/psf/donations/\">Please donate.</a>\n    <br>\n    Last updated on Aug 14, 2013.\n    <a href=\"../bugs.html\">Found a bug</a>?\n    <br>\n    Created using <a href=\"http://sphinx.pocoo.org/\">Sphinx</a> 1.0.7.\n    ",
      "path": "div",
      "selector": "div.footer:nth-of-type(4)",
      "text": [
        "\n    © ",
        "Copyright",
        " 1990-2013, Python Software Foundation.\n    ",
        "\n    The Python Software Foundation is a non-profit corporation.\n    ",
        "Please donate.",
        "\n    Last updated on Aug 14, 2013.\n    ",
        "Found a bug",
        "?\n    ",
        "\n    Created using ",
        "Sphinx",
        " 1.0.7.\n    "
      ]
    }
  ],
  "images": [
    {
      "bound": {
        "height": 16,
        "left": 26,
        "top": 21,
        "width": 16
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "display": "inline",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "-1px",
        "outline-color": "rgb(102, 102, 102)",
        "vertical-align": "middle"
      },
      "element": "img:nth-of-type(1)",
      "path": "div > ul > li > img",
      "selector": "div.related:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(5) > img:nth-of-type(1)",
      "src": "http://docs.python.org/3.3/_static/py.png"
    },
    {
      "bound": {
        "height": 16,
        "left": 26,
        "top": 18066,
        "width": 16
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "display": "inline",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "-1px",
        "outline-color": "rgb(102, 102, 102)",
        "vertical-align": "middle"
      },
      "element": "img:nth-of-type(1)",
      "path": "div > ul > li > img",
      "selector": "div.related:nth-of-type(3) > ul:nth-of-type(1) > li:nth-of-type(5) > img:nth-of-type(1)",
      "src": "http://docs.python.org/3.3/_static/py.png"
    }
  ]
}