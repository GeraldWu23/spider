{
  "body": {
    "bound": {
      "height": 3327,
      "left": 16,
      "top": 7,
      "width": 1568
    },
    "computed": {
      "alignment-baseline": "auto",
      "background-attachment": "scroll",
      "background-clip": "border-box",
      "background-color": "rgb(255, 255, 255)",
      "background-image": "none",
      "background-origin": "padding-box",
      "background-position": "0% 0%",
      "background-repeat": "repeat",
      "background-size": "auto auto",
      "baseline-shift": "baseline",
      "border-bottom-color": "rgb(0, 0, 0)",
      "border-bottom-left-radius": "0px",
      "border-bottom-right-radius": "0px",
      "border-bottom-style": "none",
      "border-bottom-width": "0px",
      "border-collapse": "separate",
      "border-left-color": "rgb(0, 0, 0)",
      "border-left-style": "none",
      "border-left-width": "0px",
      "border-right-color": "rgb(0, 0, 0)",
      "border-right-style": "none",
      "border-right-width": "0px",
      "border-top-color": "rgb(0, 0, 0)",
      "border-top-left-radius": "0px",
      "border-top-right-radius": "0px",
      "border-top-style": "none",
      "border-top-width": "0px",
      "bottom": "auto",
      "box-shadow": "none",
      "box-sizing": "content-box",
      "caption-side": "top",
      "clear": "none",
      "clip": "auto",
      "clip-path": "none",
      "clip-rule": "nonzero",
      "color": "rgb(0, 0, 0)",
      "color-interpolation": "srgb",
      "color-interpolation-filters": "linearrgb",
      "color-rendering": "auto",
      "cursor": "auto",
      "direction": "ltr",
      "display": "block",
      "dominant-baseline": "auto",
      "empty-cells": "show",
      "fill": "#000000",
      "fill-opacity": "1",
      "fill-rule": "nonzero",
      "filter": "none",
      "float": "none",
      "flood-color": "rgb(0, 0, 0)",
      "flood-opacity": "1",
      "font-family": "'Lucida Grande', Arial, sans-serif",
      "font-size": "16px",
      "font-style": "normal",
      "font-variant": "normal",
      "font-weight": "normal",
      "glyph-orientation-horizontal": "0deg",
      "glyph-orientation-vertical": "auto",
      "height": "3327px",
      "image-rendering": "auto",
      "kerning": "0",
      "left": "auto",
      "letter-spacing": "normal",
      "lighting-color": "rgb(255, 255, 255)",
      "line-height": "normal",
      "list-style-image": "none",
      "list-style-position": "outside",
      "list-style-type": "disc",
      "margin-bottom": "0px",
      "margin-left": "16px",
      "margin-right": "16px",
      "margin-top": "0px",
      "marker-end": "none",
      "marker-mid": "none",
      "marker-start": "none",
      "mask": "none",
      "max-height": "none",
      "max-width": "none",
      "min-height": "0px",
      "min-width": "0px",
      "opacity": "1",
      "orphans": "2",
      "outline-color": "rgb(0, 0, 0)",
      "outline-style": "none",
      "outline-width": "0px",
      "overflow-x": "visible",
      "overflow-y": "visible",
      "padding-bottom": "0px",
      "padding-left": "0px",
      "padding-right": "0px",
      "padding-top": "0px",
      "page-break-after": "auto",
      "page-break-before": "auto",
      "page-break-inside": "auto",
      "pointer-events": "auto",
      "position": "static",
      "resize": "none",
      "right": "auto",
      "shape-rendering": "auto",
      "speak": "normal",
      "stop-color": "rgb(0, 0, 0)",
      "stop-opacity": "1",
      "stroke": "none",
      "stroke-dasharray": "none",
      "stroke-dashoffset": "0",
      "stroke-linecap": "butt",
      "stroke-linejoin": "miter",
      "stroke-miterlimit": "4",
      "stroke-opacity": "1",
      "stroke-width": "1",
      "table-layout": "auto",
      "text-align": "-webkit-auto",
      "text-anchor": "start",
      "text-decoration": "none",
      "text-indent": "0px",
      "text-overflow": "clip",
      "text-rendering": "auto",
      "text-shadow": "none",
      "text-transform": "none",
      "top": "auto",
      "unicode-bidi": "normal",
      "vector-effect": "none",
      "vertical-align": "baseline",
      "visibility": "visible",
      "white-space": "normal",
      "widows": "2",
      "width": "1568px",
      "word-break": "normal",
      "word-spacing": "0px",
      "word-wrap": "normal",
      "writing-mode": "lr-tb",
      "z-index": "auto",
      "zoom": "1"
    },
    "scroll": {
      "left": 0,
      "top": 0
    }
  },
  "descriptions": [],
  "titles": [
    "6.4. textwrap — Text wrapping and filling — Python v3.3.2 documentation"
  ],
  "url": "http://docs.python.org/3.3/library/textwrap.html",
  "links": [
    "http://docs.python.org/3.3/genindex.html",
    "http://docs.python.org/3.3/py-modindex.html",
    "http://docs.python.org/3.3/library/unicodedata.html",
    "http://docs.python.org/3.3/library/difflib.html",
    "http://www.python.org/",
    "http://docs.python.org/3.3/index.html",
    "http://docs.python.org/3.3/library/index.html",
    "http://docs.python.org/3.3/library/text.html",
    "http://docs.python.org/3.3/library/textwrap.html#module-textwrap",
    "http://docs.python.org/3.3/library/textwrap.html#module-textwrap",
    "http://hg.python.org/cpython/file/3.3/Lib/textwrap.py",
    "http://docs.python.org/3.3/library/textwrap.html#module-textwrap",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.wrap",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.fill",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.TextWrapper",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.dedent",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.indent",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.TextWrapper",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.wrap",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.TextWrapper",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.TextWrapper.wrap",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.wrap",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.fill",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.fill",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.fill",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.wrap",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.wrap",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.fill",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.TextWrapper",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.TextWrapper",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.TextWrapper.break_long_words",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.dedent",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.indent",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.dedent",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.indent",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.TextWrapper",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.TextWrapper",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.TextWrapper",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.TextWrapper",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.TextWrapper.width",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.TextWrapper.width",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.TextWrapper",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.TextWrapper.width",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.TextWrapper.expand_tabs",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.TextWrapper.tabsize",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.TextWrapper.expand_tabs",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.TextWrapper.replace_whitespace",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.wrap",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.TextWrapper.expand_tabs",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.TextWrapper.replace_whitespace",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.TextWrapper.replace_whitespace",
    "http://docs.python.org/3.3/library/stdtypes.html#str.splitlines",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.TextWrapper.drop_whitespace",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.TextWrapper.initial_indent",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.TextWrapper.subsequent_indent",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.TextWrapper.fix_sentence_endings",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.TextWrapper",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.TextWrapper.fix_sentence_endings",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.TextWrapper.break_long_words",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.TextWrapper.width",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.TextWrapper.width",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.TextWrapper.width",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.TextWrapper.width",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.TextWrapper.break_on_hyphens",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.TextWrapper.break_long_words",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.TextWrapper",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.TextWrapper.wrap",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.TextWrapper.width",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.TextWrapper",
    "http://docs.python.org/3.3/library/textwrap.html#textwrap.TextWrapper.fill",
    "http://docs.python.org/3.3/library/difflib.html",
    "http://docs.python.org/3.3/library/unicodedata.html",
    "http://docs.python.org/3.3/bugs.html",
    "http://docs.python.org/3.3/_sources/library/textwrap.txt",
    "http://docs.python.org/3.3/genindex.html",
    "http://docs.python.org/3.3/py-modindex.html",
    "http://docs.python.org/3.3/library/unicodedata.html",
    "http://docs.python.org/3.3/library/difflib.html",
    "http://www.python.org/",
    "http://docs.python.org/3.3/index.html",
    "http://docs.python.org/3.3/library/index.html",
    "http://docs.python.org/3.3/library/text.html",
    "http://docs.python.org/3.3/copyright.html",
    "http://www.python.org/psf/donations/",
    "http://docs.python.org/3.3/bugs.html",
    "http://sphinx.pocoo.org/"
  ],
  "texts": [
    {
      "bound": {
        "height": 30,
        "left": 1540,
        "top": 14,
        "width": 34
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "float": "right",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "10px",
        "outline-color": "rgb(102, 102, 102)"
      },
      "element": "li.right:nth-of-type(1)",
      "html": "\n          <a href=\"../genindex.html\" title=\"General Index\" accesskey=\"I\">index</a>",
      "path": "div > ul > li",
      "selector": "div.related:nth-of-type(1) > ul:nth-of-type(1) > li.right:nth-of-type(1)",
      "text": [
        "index"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 1473,
        "top": 14,
        "width": 62
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "float": "right",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "5px",
        "outline-color": "rgb(102, 102, 102)"
      },
      "element": "li.right:nth-of-type(2)",
      "html": "\n          <a href=\"../py-modindex.html\" title=\"Python Module Index\">modules</a> |",
      "path": "div > ul > li",
      "selector": "div.related:nth-of-type(1) > ul:nth-of-type(1) > li.right:nth-of-type(2)",
      "text": [
        "modules",
        " |"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 1430,
        "top": 14,
        "width": 38
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "float": "right",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "5px",
        "outline-color": "rgb(102, 102, 102)"
      },
      "element": "li.right:nth-of-type(3)",
      "html": "\n          <a href=\"unicodedata.html\" title=\"6.5. unicodedata — Unicode Database\" accesskey=\"N\">next</a> |",
      "path": "div > ul > li",
      "selector": "div.related:nth-of-type(1) > ul:nth-of-type(1) > li.right:nth-of-type(3)",
      "text": [
        "next",
        " |"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 1362,
        "top": 14,
        "width": 63
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "float": "right",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "5px",
        "outline-color": "rgb(102, 102, 102)"
      },
      "element": "li.right:nth-of-type(4)",
      "html": "\n          <a href=\"difflib.html\" title=\"6.3. difflib — Helpers for computing deltas\" accesskey=\"P\">previous</a> |",
      "path": "div > ul > li",
      "selector": "div.related:nth-of-type(1) > ul:nth-of-type(1) > li.right:nth-of-type(4)",
      "text": [
        "previous",
        " |"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 16,
        "top": 14,
        "width": 1568
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(102, 102, 102)",
        "padding-left": "10px"
      },
      "element": "ul:nth-of-type(1)",
      "html": "\n        <li class=\"right\" style=\"margin-right: 10px\">\n          <a href=\"../genindex.html\" title=\"General Index\" accesskey=\"I\">index</a></li>\n        <li class=\"right\">\n          <a href=\"../py-modindex.html\" title=\"Python Module Index\">modules</a> |</li>\n        <li class=\"right\">\n          <a href=\"unicodedata.html\" title=\"6.5. unicodedata — Unicode Database\" accesskey=\"N\">next</a> |</li>\n        <li class=\"right\">\n          <a href=\"difflib.html\" title=\"6.3. difflib — Helpers for computing deltas\" accesskey=\"P\">previous</a> |</li>\n        <li><img src=\"../_static/py.png\" alt=\"\" style=\"vertical-align: middle; margin-top: -1px\"></li>\n        <li><a href=\"http://www.python.org/\">Python</a> »</li>\n        <li>\n          <span class=\"version_switcher_placeholder\"><select><option value=\"3.4\">dev (3.4)</option><option value=\"3.3\" selected=\"selected\">3.3.2</option><option value=\"3.2\">3.2</option><option value=\"2.7\">2.7</option><option value=\"2.6\">2.6</option></select></span>\n          <a href=\"../index.html\">Documentation</a> »\n        </li>\n\n          <li><a href=\"index.html\">The Python Standard Library</a> »</li>\n          <li><a href=\"text.html\" accesskey=\"U\">6. Text Processing Services</a> »</li> \n      ",
      "path": "div > ul",
      "selector": "div.related:nth-of-type(1) > ul:nth-of-type(1)",
      "text": [
        "Python",
        " »",
        "Documentation",
        " »\n        ",
        "The Python Standard Library",
        " »",
        "6. Text Processing Services",
        " »"
      ]
    },
    {
      "bound": {
        "height": 57,
        "left": 265,
        "top": 69,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "32px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "9px",
        "padding-top": "9px"
      },
      "element": "h1:nth-of-type(1)",
      "html": "6.4. <a class=\"reference internal\" href=\"#module-textwrap\" title=\"textwrap: Text wrapping and filling\"><tt class=\"xref py py-mod docutils literal\"><span class=\"pre\">textwrap</span></tt></a> — Text wrapping and filling<a class=\"headerlink\" href=\"#module-textwrap\" title=\"Permalink to this headline\">¶</a>",
      "path": "div > div > div > div > div > h1",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > h1:nth-of-type(1)",
      "text": [
        "6.4. ",
        "textwrap",
        " — Text wrapping and filling",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 142,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "<strong>Source code:</strong> <a class=\"reference external\" href=\"http://hg.python.org/cpython/file/3.3/Lib/textwrap.py\">Lib/textwrap.py</a>",
      "path": "div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "Source code:",
        "Lib/textwrap.py"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 197,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "The <a class=\"reference internal\" href=\"#module-textwrap\" title=\"textwrap: Text wrapping and filling\"><tt class=\"xref py py-mod docutils literal\"><span class=\"pre\">textwrap</span></tt></a> module provides two convenience functions, <a class=\"reference internal\" href=\"#textwrap.wrap\" title=\"textwrap.wrap\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">wrap()</span></tt></a> and\n<a class=\"reference internal\" href=\"#textwrap.fill\" title=\"textwrap.fill\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">fill()</span></tt></a>, as well as <a class=\"reference internal\" href=\"#textwrap.TextWrapper\" title=\"textwrap.TextWrapper\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">TextWrapper</span></tt></a>, the class that does all the work,\nand two utility functions, <a class=\"reference internal\" href=\"#textwrap.dedent\" title=\"textwrap.dedent\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">dedent()</span></tt></a> and <a class=\"reference internal\" href=\"#textwrap.indent\" title=\"textwrap.indent\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">indent()</span></tt></a>.  If you’re just wrapping or filling one\nor two  text strings, the convenience functions should be good enough;\notherwise,  you should use an instance of <a class=\"reference internal\" href=\"#textwrap.TextWrapper\" title=\"textwrap.TextWrapper\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">TextWrapper</span></tt></a> for efficiency.",
      "path": "div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > p:nth-of-type(2)",
      "text": [
        "The ",
        "textwrap",
        " module provides two convenience functions, ",
        "wrap()",
        " and\n",
        "fill()",
        ", as well as ",
        "TextWrapper",
        ", the class that does all the work,\nand two utility functions, ",
        "dedent()",
        " and ",
        "indent()",
        ".  If you’re just wrapping or filling one\nor two  text strings, the convenience functions should be good enough;\notherwise,  you should use an instance of ",
        "TextWrapper",
        " for efficiency."
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 257,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#textwrap.wrap:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">textwrap.</tt><tt class=\"descname\">wrap</tt><big>(</big><em>text</em>, <em>width=70</em>, <em>**kwargs</em><big>)</big><a class=\"headerlink\" href=\"#textwrap.wrap\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.function:nth-of-type(1) > dt#textwrap.wrap:nth-of-type(1)",
      "text": [
        "textwrap.",
        "wrap",
        "(",
        "text",
        ", ",
        "width=70",
        ", ",
        "**kwargs",
        ")",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 285,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "Wraps the single paragraph in <em>text</em> (a string) so every line is at most\n<em>width</em> characters long.  Returns a list of output lines, without final\nnewlines.",
      "path": "div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.function:nth-of-type(1) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "Wraps the single paragraph in ",
        "text",
        " (a string) so every line is at most\n",
        "width",
        " characters long.  Returns a list of output lines, without final\nnewlines."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 323,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "Optional keyword arguments correspond to the instance attributes of\n<a class=\"reference internal\" href=\"#textwrap.TextWrapper\" title=\"textwrap.TextWrapper\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">TextWrapper</span></tt></a>, documented below.  <em>width</em> defaults to <tt class=\"docutils literal\"><span class=\"pre\">70</span></tt>.",
      "path": "div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.function:nth-of-type(1) > dd:nth-of-type(1) > p:nth-of-type(2)",
      "text": [
        "Optional keyword arguments correspond to the instance attributes of\n",
        "TextWrapper",
        ", documented below.  ",
        "width",
        " defaults to ",
        "70",
        "."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 361,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(3)",
      "html": "See the <a class=\"reference internal\" href=\"#textwrap.TextWrapper.wrap\" title=\"textwrap.TextWrapper.wrap\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">TextWrapper.wrap()</span></tt></a> method for additional details on how\n<a class=\"reference internal\" href=\"#textwrap.wrap\" title=\"textwrap.wrap\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">wrap()</span></tt></a> behaves.",
      "path": "div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.function:nth-of-type(1) > dd:nth-of-type(1) > p:nth-of-type(3)",
      "text": [
        "See the ",
        "TextWrapper.wrap()",
        " method for additional details on how\n",
        "wrap()",
        " behaves."
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 399,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#textwrap.fill:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">textwrap.</tt><tt class=\"descname\">fill</tt><big>(</big><em>text</em>, <em>width=70</em>, <em>**kwargs</em><big>)</big><a class=\"headerlink\" href=\"#textwrap.fill\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.function:nth-of-type(2) > dt#textwrap.fill:nth-of-type(1)",
      "text": [
        "textwrap.",
        "fill",
        "(",
        "text",
        ", ",
        "width=70",
        ", ",
        "**kwargs",
        ")",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 427,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "Wraps the single paragraph in <em>text</em>, and returns a single string containing the\nwrapped paragraph.  <a class=\"reference internal\" href=\"#textwrap.fill\" title=\"textwrap.fill\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">fill()</span></tt></a> is shorthand for",
      "path": "div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.function:nth-of-type(2) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "Wraps the single paragraph in ",
        "text",
        ", and returns a single string containing the\nwrapped paragraph.  ",
        "fill()",
        " is shorthand for"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 295,
        "top": 465,
        "width": 1289
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "text-align": "justify",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">wrap</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">))</span>\n",
      "path": "div > div > div > div > div > dl > dd > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.function:nth-of-type(2) > dd:nth-of-type(1) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        "\"",
        "\\n",
        "\"",
        ".",
        "join",
        "(",
        "wrap",
        "(",
        "text",
        ",",
        "...",
        "))"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 510,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "In particular, <a class=\"reference internal\" href=\"#textwrap.fill\" title=\"textwrap.fill\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">fill()</span></tt></a> accepts exactly the same keyword arguments as\n<a class=\"reference internal\" href=\"#textwrap.wrap\" title=\"textwrap.wrap\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">wrap()</span></tt></a>.",
      "path": "div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.function:nth-of-type(2) > dd:nth-of-type(1) > p:nth-of-type(2)",
      "text": [
        "In particular, ",
        "fill()",
        " accepts exactly the same keyword arguments as\n",
        "wrap()",
        "."
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 548,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(3)",
      "html": "Both <a class=\"reference internal\" href=\"#textwrap.wrap\" title=\"textwrap.wrap\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">wrap()</span></tt></a> and <a class=\"reference internal\" href=\"#textwrap.fill\" title=\"textwrap.fill\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">fill()</span></tt></a> work by creating a <a class=\"reference internal\" href=\"#textwrap.TextWrapper\" title=\"textwrap.TextWrapper\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">TextWrapper</span></tt></a>\ninstance and calling a single method on it.  That instance is not reused, so for\napplications that wrap/fill many text strings, it will be more efficient for you\nto create your own <a class=\"reference internal\" href=\"#textwrap.TextWrapper\" title=\"textwrap.TextWrapper\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">TextWrapper</span></tt></a> object.",
      "path": "div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > p:nth-of-type(3)",
      "text": [
        "Both ",
        "wrap()",
        " and ",
        "fill()",
        " work by creating a ",
        "TextWrapper",
        "\ninstance and calling a single method on it.  That instance is not reused, so for\napplications that wrap/fill many text strings, it will be more efficient for you\nto create your own ",
        "TextWrapper",
        " object."
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 608,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(4)",
      "html": "Text is preferably wrapped on whitespaces and right after the hyphens in\nhyphenated words; only then will long words be broken if necessary, unless\n<a class=\"reference internal\" href=\"#textwrap.TextWrapper.break_long_words\" title=\"textwrap.TextWrapper.break_long_words\"><tt class=\"xref py py-attr docutils literal\"><span class=\"pre\">TextWrapper.break_long_words</span></tt></a> is set to false.",
      "path": "div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > p:nth-of-type(4)",
      "text": [
        "Text is preferably wrapped on whitespaces and right after the hyphens in\nhyphenated words; only then will long words be broken if necessary, unless\n",
        "TextWrapper.break_long_words",
        " is set to false."
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 265,
        "top": 668,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(5)",
      "html": "Two additional utility function, <a class=\"reference internal\" href=\"#textwrap.dedent\" title=\"textwrap.dedent\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">dedent()</span></tt></a> and <a class=\"reference internal\" href=\"#textwrap.indent\" title=\"textwrap.indent\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">indent()</span></tt></a>, are\nprovided to remove indentation from strings that have unwanted whitespace\nto the left of the text and to add an arbitrary prefix to selected lines\nin a block of text.",
      "path": "div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > p:nth-of-type(5)",
      "text": [
        "Two additional utility function, ",
        "dedent()",
        " and ",
        "indent()",
        ", are\nprovided to remove indentation from strings that have unwanted whitespace\nto the left of the text and to add an arbitrary prefix to selected lines\nin a block of text."
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 728,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#textwrap.dedent:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">textwrap.</tt><tt class=\"descname\">dedent</tt><big>(</big><em>text</em><big>)</big><a class=\"headerlink\" href=\"#textwrap.dedent\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.function:nth-of-type(3) > dt#textwrap.dedent:nth-of-type(1)",
      "text": [
        "textwrap.",
        "dedent",
        "(",
        "text",
        ")",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 756,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "Remove any common leading whitespace from every line in <em>text</em>.",
      "path": "div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.function:nth-of-type(3) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "Remove any common leading whitespace from every line in ",
        "text",
        "."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 794,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "This can be used to make triple-quoted strings line up with the left edge of the\ndisplay, while still presenting them in the source code in indented form.",
      "path": "div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.function:nth-of-type(3) > dd:nth-of-type(1) > p:nth-of-type(2)",
      "text": [
        "This can be used to make triple-quoted strings line up with the left edge of the\ndisplay, while still presenting them in the source code in indented form."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 832,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(3)",
      "html": "Note that tabs and spaces are both treated as whitespace, but they are not\nequal: the lines <tt class=\"docutils literal\"><span class=\"pre\">\"</span>&nbsp; <span class=\"pre\">hello\"</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">\"\\thello\"</span></tt> are considered to have no\ncommon leading whitespace.",
      "path": "div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.function:nth-of-type(3) > dd:nth-of-type(1) > p:nth-of-type(3)",
      "text": [
        "Note that tabs and spaces are both treated as whitespace, but they are not\nequal: the lines ",
        "\"",
        "hello\"",
        " and ",
        "\"\\thello\"",
        " are considered to have no\ncommon leading whitespace."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 870,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(4)",
      "html": "For example:",
      "path": "div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.function:nth-of-type(3) > dd:nth-of-type(1) > p:nth-of-type(4)",
      "text": [
        "For example:"
      ]
    },
    {
      "bound": {
        "height": 156,
        "left": 295,
        "top": 908,
        "width": 1289
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "text-align": "justify",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"k\">def</span> <span class=\"nf\">test</span><span class=\"p\">():</span>\n    <span class=\"c\"># end first line with \\ to avoid the empty line!</span>\n    <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s\">'''</span><span class=\"se\">\\</span>\n<span class=\"s\">    hello</span>\n<span class=\"s\">      world</span>\n<span class=\"s\">    '''</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">))</span>          <span class=\"c\"># prints '    hello\\n      world\\n    '</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">dedent</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)))</span>  <span class=\"c\"># prints 'hello\\n  world\\n'</span>\n",
      "path": "div > div > div > div > div > dl > dd > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.function:nth-of-type(3) > dd:nth-of-type(1) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        "def",
        "test",
        "():",
        "# end first line with \\ to avoid the empty line!",
        "s",
        "=",
        "'''",
        "\\",
        "    hello",
        "      world",
        "    '''",
        "print",
        "(",
        "repr",
        "(",
        "s",
        "))",
        "# prints '    hello\\n      world\\n    '",
        "print",
        "(",
        "repr",
        "(",
        "dedent",
        "(",
        "s",
        ")))",
        "# prints 'hello\\n  world\\n'"
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 1080,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#textwrap.indent:nth-of-type(1)",
      "html": "\n<tt class=\"descclassname\">textwrap.</tt><tt class=\"descname\">indent</tt><big>(</big><em>text</em>, <em>prefix</em>, <em>predicate=None</em><big>)</big><a class=\"headerlink\" href=\"#textwrap.indent\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.function:nth-of-type(4) > dt#textwrap.indent:nth-of-type(1)",
      "text": [
        "textwrap.",
        "indent",
        "(",
        "text",
        ", ",
        "prefix",
        ", ",
        "predicate=None",
        ")",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 1108,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "Add <em>prefix</em> to the beginning of selected lines in <em>text</em>.",
      "path": "div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.function:nth-of-type(4) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "Add ",
        "prefix",
        " to the beginning of selected lines in ",
        "text",
        "."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 1146,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "Lines are separated by calling <tt class=\"docutils literal\"><span class=\"pre\">text.splitlines(True)</span></tt>.",
      "path": "div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.function:nth-of-type(4) > dd:nth-of-type(1) > p:nth-of-type(2)",
      "text": [
        "Lines are separated by calling ",
        "text.splitlines(True)",
        "."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 1184,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(3)",
      "html": "By default, <em>prefix</em> is added to all lines that do not consist\nsolely of whitespace (including any line endings).",
      "path": "div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.function:nth-of-type(4) > dd:nth-of-type(1) > p:nth-of-type(3)",
      "text": [
        "By default, ",
        "prefix",
        " is added to all lines that do not consist\nsolely of whitespace (including any line endings)."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 1222,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(4)",
      "html": "For example:",
      "path": "div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.function:nth-of-type(4) > dd:nth-of-type(1) > p:nth-of-type(4)",
      "text": [
        "For example:"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 1554,
        "top": 1260,
        "width": 30
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(170, 204, 153)",
        "cursor": "pointer",
        "font-family": "monospace",
        "font-size": "13px",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(170, 204, 153)",
        "padding-left": "2px",
        "padding-right": "2px",
        "position": "absolute",
        "text-align": "justify"
      },
      "element": "span.copybutton:nth-of-type(1)",
      "html": "&gt;&gt;&gt;",
      "path": "div > div > div > div > div > dl > dd > div > div > span",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.function:nth-of-type(4) > dd:nth-of-type(1) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > span.copybutton:nth-of-type(1)",
      "text": [
        ">>>"
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 295,
        "top": 1260,
        "width": 1289
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "text-align": "justify",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s\">'hello</span><span class=\"se\">\\n\\n</span><span class=\"s\"> </span><span class=\"se\">\\n</span><span class=\"s\">world'</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">indent</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"s\">'  '</span><span class=\"p\">)</span>\n<span class=\"go\">'  hello\\n\\n \\n  world'</span>\n",
      "path": "div > div > div > div > div > dl > dd > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.function:nth-of-type(4) > dd:nth-of-type(1) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        ">>> ",
        "s",
        "=",
        "'hello",
        "\\n\\n",
        "\\n",
        "world'",
        ">>> ",
        "indent",
        "(",
        "s",
        ",",
        "'  '",
        ")",
        "'  hello\\n\\n \\n  world'"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 1341,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(5)",
      "html": "The optional <em>predicate</em> argument can be used to control which lines\nare indented. For example, it is easy to add <em>prefix</em> to even empty\nand whitespace-only lines:",
      "path": "div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.function:nth-of-type(4) > dd:nth-of-type(1) > p:nth-of-type(5)",
      "text": [
        "The optional ",
        "predicate",
        " argument can be used to control which lines\nare indented. For example, it is easy to add ",
        "prefix",
        " to even empty\nand whitespace-only lines:"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 1554,
        "top": 1379,
        "width": 30
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(170, 204, 153)",
        "cursor": "pointer",
        "font-family": "monospace",
        "font-size": "13px",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(170, 204, 153)",
        "padding-left": "2px",
        "padding-right": "2px",
        "position": "absolute",
        "text-align": "justify"
      },
      "element": "span.copybutton:nth-of-type(1)",
      "html": "&gt;&gt;&gt;",
      "path": "div > div > div > div > div > dl > dd > div > div > span",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.function:nth-of-type(4) > dd:nth-of-type(1) > div.highlight-python3:nth-of-type(2) > div.highlight:nth-of-type(1) > span.copybutton:nth-of-type(1)",
      "text": [
        ">>>"
      ]
    },
    {
      "bound": {
        "height": 102,
        "left": 295,
        "top": 1379,
        "width": 1289
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "text-align": "justify",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">indent</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"s\">'+ '</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">line</span><span class=\"p\">:</span> <span class=\"k\">True</span><span class=\"p\">))</span>\n<span class=\"go\">+ hello</span>\n<span class=\"go\">+</span>\n<span class=\"go\">+</span>\n<span class=\"go\">+ world</span>\n",
      "path": "div > div > div > div > div > dl > dd > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.function:nth-of-type(4) > dd:nth-of-type(1) > div.highlight-python3:nth-of-type(2) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        ">>> ",
        "print",
        "(",
        "indent",
        "(",
        "s",
        ",",
        "'+ '",
        ",",
        "lambda",
        "line",
        ":",
        "True",
        "))",
        "+ hello",
        "+",
        "+",
        "+ world"
      ]
    },
    {
      "bound": {
        "height": 25,
        "left": 265,
        "top": 1497,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)"
      },
      "element": "dt#textwrap.TextWrapper:nth-of-type(1)",
      "html": "\n<em class=\"property\">class </em><tt class=\"descclassname\">textwrap.</tt><tt class=\"descname\">TextWrapper</tt><big>(</big><em>**kwargs</em><big>)</big><a class=\"headerlink\" href=\"#textwrap.TextWrapper\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.class:nth-of-type(5) > dt#textwrap.TextWrapper:nth-of-type(1)",
      "text": [
        "class ",
        "textwrap.",
        "TextWrapper",
        "(",
        "**kwargs",
        ")",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 1525,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "The <a class=\"reference internal\" href=\"#textwrap.TextWrapper\" title=\"textwrap.TextWrapper\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">TextWrapper</span></tt></a> constructor accepts a number of optional keyword\narguments.  Each keyword argument corresponds to an instance attribute, so\nfor example",
      "path": "div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.class:nth-of-type(5) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "The ",
        "TextWrapper",
        " constructor accepts a number of optional keyword\narguments.  Each keyword argument corresponds to an instance attribute, so\nfor example"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 295,
        "top": 1563,
        "width": 1289
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "text-align": "justify",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"n\">wrapper</span> <span class=\"o\">=</span> <span class=\"n\">TextWrapper</span><span class=\"p\">(</span><span class=\"n\">initial_indent</span><span class=\"o\">=</span><span class=\"s\">\"* \"</span><span class=\"p\">)</span>\n",
      "path": "div > div > div > div > div > dl > dd > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.class:nth-of-type(5) > dd:nth-of-type(1) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        "wrapper",
        "=",
        "TextWrapper",
        "(",
        "initial_indent",
        "=",
        "\"* \"",
        ")"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 1608,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "is the same as",
      "path": "div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.class:nth-of-type(5) > dd:nth-of-type(1) > p:nth-of-type(2)",
      "text": [
        "is the same as"
      ]
    },
    {
      "bound": {
        "height": 48,
        "left": 295,
        "top": 1646,
        "width": 1289
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "text-align": "justify",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"n\">wrapper</span> <span class=\"o\">=</span> <span class=\"n\">TextWrapper</span><span class=\"p\">()</span>\n<span class=\"n\">wrapper</span><span class=\"o\">.</span><span class=\"n\">initial_indent</span> <span class=\"o\">=</span> <span class=\"s\">\"* \"</span>\n",
      "path": "div > div > div > div > div > dl > dd > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.class:nth-of-type(5) > dd:nth-of-type(1) > div.highlight-python3:nth-of-type(2) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        "wrapper",
        "=",
        "TextWrapper",
        "()",
        "wrapper",
        ".",
        "initial_indent",
        "=",
        "\"* \""
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 1709,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(3)",
      "html": "You can re-use the same <a class=\"reference internal\" href=\"#textwrap.TextWrapper\" title=\"textwrap.TextWrapper\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">TextWrapper</span></tt></a> object many times, and you can\nchange any of its options through direct assignment to instance attributes\nbetween uses.",
      "path": "div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.class:nth-of-type(5) > dd:nth-of-type(1) > p:nth-of-type(3)",
      "text": [
        "You can re-use the same ",
        "TextWrapper",
        " object many times, and you can\nchange any of its options through direct assignment to instance attributes\nbetween uses."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 1747,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(4)",
      "html": "The <a class=\"reference internal\" href=\"#textwrap.TextWrapper\" title=\"textwrap.TextWrapper\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">TextWrapper</span></tt></a> instance attributes (and keyword arguments to the\nconstructor) are as follows:",
      "path": "div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.class:nth-of-type(5) > dd:nth-of-type(1) > p:nth-of-type(4)",
      "text": [
        "The ",
        "TextWrapper",
        " instance attributes (and keyword arguments to the\nconstructor) are as follows:"
      ]
    },
    {
      "bound": {
        "height": 23,
        "left": 295,
        "top": 1785,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dt#textwrap.TextWrapper.width:nth-of-type(1)",
      "html": "\n<tt class=\"descname\">width</tt><a class=\"headerlink\" href=\"#textwrap.TextWrapper.width\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > dl > dd > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.class:nth-of-type(5) > dd:nth-of-type(1) > dl.attribute:nth-of-type(1) > dt#textwrap.TextWrapper.width:nth-of-type(1)",
      "text": [
        "width",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 325,
        "top": 1811,
        "width": 1259
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "(default: <tt class=\"docutils literal\"><span class=\"pre\">70</span></tt>) The maximum length of wrapped lines.  As long as there\nare no individual words in the input text longer than <a class=\"reference internal\" href=\"#textwrap.TextWrapper.width\" title=\"textwrap.TextWrapper.width\"><tt class=\"xref py py-attr docutils literal\"><span class=\"pre\">width</span></tt></a>,\n<a class=\"reference internal\" href=\"#textwrap.TextWrapper\" title=\"textwrap.TextWrapper\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">TextWrapper</span></tt></a> guarantees that no output line will be longer than\n<a class=\"reference internal\" href=\"#textwrap.TextWrapper.width\" title=\"textwrap.TextWrapper.width\"><tt class=\"xref py py-attr docutils literal\"><span class=\"pre\">width</span></tt></a> characters.",
      "path": "div > div > div > div > div > dl > dd > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.class:nth-of-type(5) > dd:nth-of-type(1) > dl.attribute:nth-of-type(1) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "(default: ",
        "70",
        ") The maximum length of wrapped lines.  As long as there\nare no individual words in the input text longer than ",
        "width",
        ",\n",
        "TextWrapper",
        " guarantees that no output line will be longer than\n",
        "width",
        " characters."
      ]
    },
    {
      "bound": {
        "height": 23,
        "left": 295,
        "top": 1871,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dt#textwrap.TextWrapper.expand_tabs:nth-of-type(1)",
      "html": "\n<tt class=\"descname\">expand_tabs</tt><a class=\"headerlink\" href=\"#textwrap.TextWrapper.expand_tabs\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > dl > dd > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.class:nth-of-type(5) > dd:nth-of-type(1) > dl.attribute:nth-of-type(2) > dt#textwrap.TextWrapper.expand_tabs:nth-of-type(1)",
      "text": [
        "expand_tabs",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 325,
        "top": 1897,
        "width": 1259
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "(default: <tt class=\"xref docutils literal\"><span class=\"pre\">True</span></tt>) If true, then all tab characters in <em>text</em> will be\nexpanded to spaces using the <tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">expandtabs()</span></tt> method of <em>text</em>.",
      "path": "div > div > div > div > div > dl > dd > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.class:nth-of-type(5) > dd:nth-of-type(1) > dl.attribute:nth-of-type(2) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "(default: ",
        "True",
        ") If true, then all tab characters in ",
        "text",
        " will be\nexpanded to spaces using the ",
        "expandtabs()",
        " method of ",
        "text",
        "."
      ]
    },
    {
      "bound": {
        "height": 23,
        "left": 295,
        "top": 1935,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dt#textwrap.TextWrapper.tabsize:nth-of-type(1)",
      "html": "\n<tt class=\"descname\">tabsize</tt><a class=\"headerlink\" href=\"#textwrap.TextWrapper.tabsize\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > dl > dd > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.class:nth-of-type(5) > dd:nth-of-type(1) > dl.attribute:nth-of-type(3) > dt#textwrap.TextWrapper.tabsize:nth-of-type(1)",
      "text": [
        "tabsize",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 325,
        "top": 1961,
        "width": 1259
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "(default: <tt class=\"docutils literal\"><span class=\"pre\">8</span></tt>) If <a class=\"reference internal\" href=\"#textwrap.TextWrapper.expand_tabs\" title=\"textwrap.TextWrapper.expand_tabs\"><tt class=\"xref py py-attr docutils literal\"><span class=\"pre\">expand_tabs</span></tt></a> is true, then all tab characters\nin <em>text</em> will be expanded to zero or more spaces, depending on the\ncurrent column and the given tab size.",
      "path": "div > div > div > div > div > dl > dd > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.class:nth-of-type(5) > dd:nth-of-type(1) > dl.attribute:nth-of-type(3) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "(default: ",
        "8",
        ") If ",
        "expand_tabs",
        " is true, then all tab characters\nin ",
        "text",
        " will be expanded to zero or more spaces, depending on the\ncurrent column and the given tab size."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 325,
        "top": 1999,
        "width": 1259
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p.versionadded:nth-of-type(2)",
      "html": "\n<span class=\"versionmodified\">New in version 3.3.</span> ",
      "path": "div > div > div > div > div > dl > dd > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.class:nth-of-type(5) > dd:nth-of-type(1) > dl.attribute:nth-of-type(3) > dd:nth-of-type(1) > p.versionadded:nth-of-type(2)",
      "text": [
        "New in version 3.3."
      ]
    },
    {
      "bound": {
        "height": 23,
        "left": 295,
        "top": 2037,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dt#textwrap.TextWrapper.replace_whitespace:nth-of-type(1)",
      "html": "\n<tt class=\"descname\">replace_whitespace</tt><a class=\"headerlink\" href=\"#textwrap.TextWrapper.replace_whitespace\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > dl > dd > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.class:nth-of-type(5) > dd:nth-of-type(1) > dl.attribute:nth-of-type(4) > dt#textwrap.TextWrapper.replace_whitespace:nth-of-type(1)",
      "text": [
        "replace_whitespace",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 325,
        "top": 2063,
        "width": 1259
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "(default: <tt class=\"xref docutils literal\"><span class=\"pre\">True</span></tt>) If true, after tab expansion but before wrapping,\nthe <a class=\"reference internal\" href=\"#textwrap.wrap\" title=\"textwrap.wrap\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">wrap()</span></tt></a> method will replace each whitespace character\nwith a single space.  The whitespace characters replaced are\nas follows: tab, newline, vertical tab, formfeed, and carriage\nreturn (<tt class=\"docutils literal\"><span class=\"pre\">'\\t\\n\\v\\f\\r'</span></tt>).",
      "path": "div > div > div > div > div > dl > dd > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.class:nth-of-type(5) > dd:nth-of-type(1) > dl.attribute:nth-of-type(4) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "(default: ",
        "True",
        ") If true, after tab expansion but before wrapping,\nthe ",
        "wrap()",
        " method will replace each whitespace character\nwith a single space.  The whitespace characters replaced are\nas follows: tab, newline, vertical tab, formfeed, and carriage\nreturn (",
        "'\\t\\n\\v\\f\\r'",
        ")."
      ]
    },
    {
      "bound": {
        "height": 38,
        "left": 325,
        "top": 2123,
        "width": 1259
      },
      "computed": {
        "background-color": "rgb(238, 238, 238)",
        "border-bottom-color": "rgb(204, 204, 204)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(204, 204, 204)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(204, 204, 204)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(204, 204, 204)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-bottom": "10px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "10px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "7px",
        "padding-left": "7px",
        "padding-right": "7px",
        "padding-top": "7px",
        "text-align": "justify"
      },
      "element": "div.admonition.note:nth-of-type(1)",
      "html": "\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">If <a class=\"reference internal\" href=\"#textwrap.TextWrapper.expand_tabs\" title=\"textwrap.TextWrapper.expand_tabs\"><tt class=\"xref py py-attr docutils literal\"><span class=\"pre\">expand_tabs</span></tt></a> is false and <a class=\"reference internal\" href=\"#textwrap.TextWrapper.replace_whitespace\" title=\"textwrap.TextWrapper.replace_whitespace\"><tt class=\"xref py py-attr docutils literal\"><span class=\"pre\">replace_whitespace</span></tt></a> is true,\neach tab character will be replaced by a single space, which is <em>not</em>\nthe same as tab expansion.</p>\n",
      "path": "div > div > div > div > div > dl > dd > dl > dd > div",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.class:nth-of-type(5) > dd:nth-of-type(1) > dl.attribute:nth-of-type(4) > dd:nth-of-type(1) > div.admonition.note:nth-of-type(1)",
      "text": [
        "Note",
        "If ",
        "expand_tabs",
        " is false and ",
        "replace_whitespace",
        " is true,\neach tab character will be replaced by a single space, which is ",
        "not",
        "\nthe same as tab expansion."
      ]
    },
    {
      "bound": {
        "height": 60,
        "left": 325,
        "top": 2171,
        "width": 1259
      },
      "computed": {
        "background-color": "rgb(238, 238, 238)",
        "border-bottom-color": "rgb(204, 204, 204)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(204, 204, 204)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(204, 204, 204)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(204, 204, 204)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-bottom": "10px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "10px",
        "outline-color": "rgb(34, 34, 34)",
        "padding-bottom": "7px",
        "padding-left": "7px",
        "padding-right": "7px",
        "padding-top": "7px",
        "text-align": "justify"
      },
      "element": "div.admonition.note:nth-of-type(2)",
      "html": "\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">If <a class=\"reference internal\" href=\"#textwrap.TextWrapper.replace_whitespace\" title=\"textwrap.TextWrapper.replace_whitespace\"><tt class=\"xref py py-attr docutils literal\"><span class=\"pre\">replace_whitespace</span></tt></a> is false, newlines may appear in the\nmiddle of a line and cause strange output. For this reason, text should\nbe split into paragraphs (using <a class=\"reference internal\" href=\"stdtypes.html#str.splitlines\" title=\"str.splitlines\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">str.splitlines()</span></tt></a> or similar)\nwhich are wrapped separately.</p>\n",
      "path": "div > div > div > div > div > dl > dd > dl > dd > div",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.class:nth-of-type(5) > dd:nth-of-type(1) > dl.attribute:nth-of-type(4) > dd:nth-of-type(1) > div.admonition.note:nth-of-type(2)",
      "text": [
        "Note",
        "If ",
        "replace_whitespace",
        " is false, newlines may appear in the\nmiddle of a line and cause strange output. For this reason, text should\nbe split into paragraphs (using ",
        "str.splitlines()",
        " or similar)\nwhich are wrapped separately."
      ]
    },
    {
      "bound": {
        "height": 23,
        "left": 295,
        "top": 2247,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dt#textwrap.TextWrapper.drop_whitespace:nth-of-type(1)",
      "html": "\n<tt class=\"descname\">drop_whitespace</tt><a class=\"headerlink\" href=\"#textwrap.TextWrapper.drop_whitespace\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > dl > dd > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.class:nth-of-type(5) > dd:nth-of-type(1) > dl.attribute:nth-of-type(5) > dt#textwrap.TextWrapper.drop_whitespace:nth-of-type(1)",
      "text": [
        "drop_whitespace",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 325,
        "top": 2273,
        "width": 1259
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "(default: <tt class=\"xref docutils literal\"><span class=\"pre\">True</span></tt>) If true, whitespace at the beginning and ending of\nevery line (after wrapping but before indenting) is dropped.\nWhitespace at the beginning of the paragraph, however, is not dropped\nif non-whitespace follows it.  If whitespace being dropped takes up an\nentire line, the whole line is dropped.",
      "path": "div > div > div > div > div > dl > dd > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.class:nth-of-type(5) > dd:nth-of-type(1) > dl.attribute:nth-of-type(5) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "(default: ",
        "True",
        ") If true, whitespace at the beginning and ending of\nevery line (after wrapping but before indenting) is dropped.\nWhitespace at the beginning of the paragraph, however, is not dropped\nif non-whitespace follows it.  If whitespace being dropped takes up an\nentire line, the whole line is dropped."
      ]
    },
    {
      "bound": {
        "height": 23,
        "left": 295,
        "top": 2333,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dt#textwrap.TextWrapper.initial_indent:nth-of-type(1)",
      "html": "\n<tt class=\"descname\">initial_indent</tt><a class=\"headerlink\" href=\"#textwrap.TextWrapper.initial_indent\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > dl > dd > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.class:nth-of-type(5) > dd:nth-of-type(1) > dl.attribute:nth-of-type(6) > dt#textwrap.TextWrapper.initial_indent:nth-of-type(1)",
      "text": [
        "initial_indent",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 325,
        "top": 2359,
        "width": 1259
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "(default: <tt class=\"docutils literal\"><span class=\"pre\">''</span></tt>) String that will be prepended to the first line of\nwrapped output.  Counts towards the length of the first line.  The empty\nstring is not indented.",
      "path": "div > div > div > div > div > dl > dd > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.class:nth-of-type(5) > dd:nth-of-type(1) > dl.attribute:nth-of-type(6) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "(default: ",
        "''",
        ") String that will be prepended to the first line of\nwrapped output.  Counts towards the length of the first line.  The empty\nstring is not indented."
      ]
    },
    {
      "bound": {
        "height": 23,
        "left": 295,
        "top": 2397,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dt#textwrap.TextWrapper.subsequent_indent:nth-of-type(1)",
      "html": "\n<tt class=\"descname\">subsequent_indent</tt><a class=\"headerlink\" href=\"#textwrap.TextWrapper.subsequent_indent\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > dl > dd > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.class:nth-of-type(5) > dd:nth-of-type(1) > dl.attribute:nth-of-type(7) > dt#textwrap.TextWrapper.subsequent_indent:nth-of-type(1)",
      "text": [
        "subsequent_indent",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 325,
        "top": 2423,
        "width": 1259
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "(default: <tt class=\"docutils literal\"><span class=\"pre\">''</span></tt>) String that will be prepended to all lines of wrapped\noutput except the first.  Counts towards the length of each line except\nthe first.",
      "path": "div > div > div > div > div > dl > dd > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.class:nth-of-type(5) > dd:nth-of-type(1) > dl.attribute:nth-of-type(7) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "(default: ",
        "''",
        ") String that will be prepended to all lines of wrapped\noutput except the first.  Counts towards the length of each line except\nthe first."
      ]
    },
    {
      "bound": {
        "height": 23,
        "left": 295,
        "top": 2461,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dt#textwrap.TextWrapper.fix_sentence_endings:nth-of-type(1)",
      "html": "\n<tt class=\"descname\">fix_sentence_endings</tt><a class=\"headerlink\" href=\"#textwrap.TextWrapper.fix_sentence_endings\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > dl > dd > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.class:nth-of-type(5) > dd:nth-of-type(1) > dl.attribute:nth-of-type(8) > dt#textwrap.TextWrapper.fix_sentence_endings:nth-of-type(1)",
      "text": [
        "fix_sentence_endings",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 88,
        "left": 325,
        "top": 2487,
        "width": 1259
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "(default: <tt class=\"xref docutils literal\"><span class=\"pre\">False</span></tt>) If true, <a class=\"reference internal\" href=\"#textwrap.TextWrapper\" title=\"textwrap.TextWrapper\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">TextWrapper</span></tt></a> attempts to detect\nsentence endings and ensure that sentences are always separated by exactly\ntwo spaces.  This is generally desired for text in a monospaced font.\nHowever, the sentence detection algorithm is imperfect: it assumes that a\nsentence ending consists of a lowercase letter followed by one of <tt class=\"docutils literal\"><span class=\"pre\">'.'</span></tt>,\n<tt class=\"docutils literal\"><span class=\"pre\">'!'</span></tt>, or <tt class=\"docutils literal\"><span class=\"pre\">'?'</span></tt>, possibly followed by one of <tt class=\"docutils literal\"><span class=\"pre\">'\"'</span></tt> or <tt class=\"docutils literal\"><span class=\"pre\">\"'\"</span></tt>,\nfollowed by a space.  One problem with this is algorithm is that it is\nunable to detect the difference between “Dr.” in",
      "path": "div > div > div > div > div > dl > dd > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.class:nth-of-type(5) > dd:nth-of-type(1) > dl.attribute:nth-of-type(8) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "(default: ",
        "False",
        ") If true, ",
        "TextWrapper",
        " attempts to detect\nsentence endings and ensure that sentences are always separated by exactly\ntwo spaces.  This is generally desired for text in a monospaced font.\nHowever, the sentence detection algorithm is imperfect: it assumes that a\nsentence ending consists of a lowercase letter followed by one of ",
        "'.'",
        ",\n",
        "'!'",
        ", or ",
        "'?'",
        ", possibly followed by one of ",
        "'\"'",
        " or ",
        "\"'\"",
        ",\nfollowed by a space.  One problem with this is algorithm is that it is\nunable to detect the difference between “Dr.” in"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 325,
        "top": 2591,
        "width": 1259
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "text-align": "justify",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span> <span class=\"n\">Dr</span><span class=\"o\">.</span> <span class=\"n\">Frankenstein</span><span class=\"s\">'s monster [...]</span>\n",
      "path": "div > div > div > div > div > dl > dd > dl > dd > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.class:nth-of-type(5) > dd:nth-of-type(1) > dl.attribute:nth-of-type(8) > dd:nth-of-type(1) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        "[",
        "...",
        "]",
        "Dr",
        ".",
        "Frankenstein",
        "'s monster [...]"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 325,
        "top": 2636,
        "width": 1259
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(2)",
      "html": "and “Spot.” in",
      "path": "div > div > div > div > div > dl > dd > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.class:nth-of-type(5) > dd:nth-of-type(1) > dl.attribute:nth-of-type(8) > dd:nth-of-type(1) > p:nth-of-type(2)",
      "text": [
        "and “Spot.” in"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 325,
        "top": 2674,
        "width": 1259
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "text-align": "justify",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span> <span class=\"n\">See</span> <span class=\"n\">Spot</span><span class=\"o\">.</span> <span class=\"n\">See</span> <span class=\"n\">Spot</span> <span class=\"n\">run</span> <span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n",
      "path": "div > div > div > div > div > dl > dd > dl > dd > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.class:nth-of-type(5) > dd:nth-of-type(1) > dl.attribute:nth-of-type(8) > dd:nth-of-type(1) > div.highlight-python3:nth-of-type(2) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        "[",
        "...",
        "]",
        "See",
        "Spot",
        ".",
        "See",
        "Spot",
        "run",
        "[",
        "...",
        "]"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 325,
        "top": 2719,
        "width": 1259
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(3)",
      "html": "<a class=\"reference internal\" href=\"#textwrap.TextWrapper.fix_sentence_endings\" title=\"textwrap.TextWrapper.fix_sentence_endings\"><tt class=\"xref py py-attr docutils literal\"><span class=\"pre\">fix_sentence_endings</span></tt></a> is false by default.",
      "path": "div > div > div > div > div > dl > dd > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.class:nth-of-type(5) > dd:nth-of-type(1) > dl.attribute:nth-of-type(8) > dd:nth-of-type(1) > p:nth-of-type(3)",
      "text": [
        "fix_sentence_endings",
        " is false by default."
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 325,
        "top": 2757,
        "width": 1259
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(4)",
      "html": "Since the sentence detection algorithm relies on <tt class=\"docutils literal\"><span class=\"pre\">string.lowercase</span></tt> for\nthe definition of “lowercase letter,” and a convention of using two spaces\nafter a period to separate sentences on the same line, it is specific to\nEnglish-language texts.",
      "path": "div > div > div > div > div > dl > dd > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.class:nth-of-type(5) > dd:nth-of-type(1) > dl.attribute:nth-of-type(8) > dd:nth-of-type(1) > p:nth-of-type(4)",
      "text": [
        "Since the sentence detection algorithm relies on ",
        "string.lowercase",
        " for\nthe definition of “lowercase letter,” and a convention of using two spaces\nafter a period to separate sentences on the same line, it is specific to\nEnglish-language texts."
      ]
    },
    {
      "bound": {
        "height": 23,
        "left": 295,
        "top": 2817,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dt#textwrap.TextWrapper.break_long_words:nth-of-type(1)",
      "html": "\n<tt class=\"descname\">break_long_words</tt><a class=\"headerlink\" href=\"#textwrap.TextWrapper.break_long_words\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > dl > dd > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.class:nth-of-type(5) > dd:nth-of-type(1) > dl.attribute:nth-of-type(9) > dt#textwrap.TextWrapper.break_long_words:nth-of-type(1)",
      "text": [
        "break_long_words",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 325,
        "top": 2843,
        "width": 1259
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "(default: <tt class=\"xref docutils literal\"><span class=\"pre\">True</span></tt>) If true, then words longer than <a class=\"reference internal\" href=\"#textwrap.TextWrapper.width\" title=\"textwrap.TextWrapper.width\"><tt class=\"xref py py-attr docutils literal\"><span class=\"pre\">width</span></tt></a> will be\nbroken in order to ensure that no lines are longer than <a class=\"reference internal\" href=\"#textwrap.TextWrapper.width\" title=\"textwrap.TextWrapper.width\"><tt class=\"xref py py-attr docutils literal\"><span class=\"pre\">width</span></tt></a>.  If\nit is false, long words will not be broken, and some lines may be longer\nthan <a class=\"reference internal\" href=\"#textwrap.TextWrapper.width\" title=\"textwrap.TextWrapper.width\"><tt class=\"xref py py-attr docutils literal\"><span class=\"pre\">width</span></tt></a>.  (Long words will be put on a line by themselves, in\norder to minimize the amount by which <a class=\"reference internal\" href=\"#textwrap.TextWrapper.width\" title=\"textwrap.TextWrapper.width\"><tt class=\"xref py py-attr docutils literal\"><span class=\"pre\">width</span></tt></a> is exceeded.)",
      "path": "div > div > div > div > div > dl > dd > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.class:nth-of-type(5) > dd:nth-of-type(1) > dl.attribute:nth-of-type(9) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "(default: ",
        "True",
        ") If true, then words longer than ",
        "width",
        " will be\nbroken in order to ensure that no lines are longer than ",
        "width",
        ".  If\nit is false, long words will not be broken, and some lines may be longer\nthan ",
        "width",
        ".  (Long words will be put on a line by themselves, in\norder to minimize the amount by which ",
        "width",
        " is exceeded.)"
      ]
    },
    {
      "bound": {
        "height": 23,
        "left": 295,
        "top": 2903,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dt#textwrap.TextWrapper.break_on_hyphens:nth-of-type(1)",
      "html": "\n<tt class=\"descname\">break_on_hyphens</tt><a class=\"headerlink\" href=\"#textwrap.TextWrapper.break_on_hyphens\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > dl > dd > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.class:nth-of-type(5) > dd:nth-of-type(1) > dl.attribute:nth-of-type(10) > dt#textwrap.TextWrapper.break_on_hyphens:nth-of-type(1)",
      "text": [
        "break_on_hyphens",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 66,
        "left": 325,
        "top": 2929,
        "width": 1259
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "(default: <tt class=\"xref docutils literal\"><span class=\"pre\">True</span></tt>) If true, wrapping will occur preferably on whitespaces\nand right after hyphens in compound words, as it is customary in English.\nIf false, only whitespaces will be considered as potentially good places\nfor line breaks, but you need to set <a class=\"reference internal\" href=\"#textwrap.TextWrapper.break_long_words\" title=\"textwrap.TextWrapper.break_long_words\"><tt class=\"xref py py-attr docutils literal\"><span class=\"pre\">break_long_words</span></tt></a> to false if\nyou want truly insecable words.  Default behaviour in previous versions\nwas to always allow breaking hyphenated words.",
      "path": "div > div > div > div > div > dl > dd > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.class:nth-of-type(5) > dd:nth-of-type(1) > dl.attribute:nth-of-type(10) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "(default: ",
        "True",
        ") If true, wrapping will occur preferably on whitespaces\nand right after hyphens in compound words, as it is customary in English.\nIf false, only whitespaces will be considered as potentially good places\nfor line breaks, but you need to set ",
        "break_long_words",
        " to false if\nyou want truly insecable words.  Default behaviour in previous versions\nwas to always allow breaking hyphenated words."
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 295,
        "top": 3011,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(5)",
      "html": "<a class=\"reference internal\" href=\"#textwrap.TextWrapper\" title=\"textwrap.TextWrapper\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">TextWrapper</span></tt></a> also provides two public methods, analogous to the\nmodule-level convenience functions:",
      "path": "div > div > div > div > div > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.class:nth-of-type(5) > dd:nth-of-type(1) > p:nth-of-type(5)",
      "text": [
        "TextWrapper",
        " also provides two public methods, analogous to the\nmodule-level convenience functions:"
      ]
    },
    {
      "bound": {
        "height": 23,
        "left": 295,
        "top": 3049,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dt#textwrap.TextWrapper.wrap:nth-of-type(1)",
      "html": "\n<tt class=\"descname\">wrap</tt><big>(</big><em>text</em><big>)</big><a class=\"headerlink\" href=\"#textwrap.TextWrapper.wrap\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > dl > dd > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.class:nth-of-type(5) > dd:nth-of-type(1) > dl.method:nth-of-type(11) > dt#textwrap.TextWrapper.wrap:nth-of-type(1)",
      "text": [
        "wrap",
        "(",
        "text",
        ")",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 44,
        "left": 325,
        "top": 3075,
        "width": 1259
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "Wraps the single paragraph in <em>text</em> (a string) so every line is at most\n<a class=\"reference internal\" href=\"#textwrap.TextWrapper.width\" title=\"textwrap.TextWrapper.width\"><tt class=\"xref py py-attr docutils literal\"><span class=\"pre\">width</span></tt></a> characters long.  All wrapping options are taken from\ninstance attributes of the <a class=\"reference internal\" href=\"#textwrap.TextWrapper\" title=\"textwrap.TextWrapper\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">TextWrapper</span></tt></a> instance.  Returns a list\nof output lines, without final newlines.  If the wrapped output has no\ncontent, the returned list is empty.",
      "path": "div > div > div > div > div > dl > dd > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.class:nth-of-type(5) > dd:nth-of-type(1) > dl.method:nth-of-type(11) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "Wraps the single paragraph in ",
        "text",
        " (a string) so every line is at most\n",
        "width",
        " characters long.  All wrapping options are taken from\ninstance attributes of the ",
        "TextWrapper",
        " instance.  Returns a list\nof output lines, without final newlines.  If the wrapped output has no\ncontent, the returned list is empty."
      ]
    },
    {
      "bound": {
        "height": 23,
        "left": 295,
        "top": 3135,
        "width": 1289
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "20px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "dt#textwrap.TextWrapper.fill:nth-of-type(1)",
      "html": "\n<tt class=\"descname\">fill</tt><big>(</big><em>text</em><big>)</big><a class=\"headerlink\" href=\"#textwrap.TextWrapper.fill\" title=\"Permalink to this definition\">¶</a>",
      "path": "div > div > div > div > div > dl > dd > dl > dt",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.class:nth-of-type(5) > dd:nth-of-type(1) > dl.method:nth-of-type(12) > dt#textwrap.TextWrapper.fill:nth-of-type(1)",
      "text": [
        "fill",
        "(",
        "text",
        ")",
        "¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 325,
        "top": 3161,
        "width": 1259
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "Wraps the single paragraph in <em>text</em>, and returns a single string\ncontaining the wrapped paragraph.",
      "path": "div > div > div > div > div > dl > dd > dl > dd > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#module-textwrap.section:nth-of-type(1) > dl.class:nth-of-type(5) > dd:nth-of-type(1) > dl.method:nth-of-type(12) > dd:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "Wraps the single paragraph in ",
        "text",
        ", and returns a single string\ncontaining the wrapped paragraph."
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 26,
        "top": 105,
        "width": 202
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "font-size": "17px",
        "line-height": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "26px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "h4:nth-of-type(1)",
      "html": "Previous topic",
      "path": "div > div > div > h4",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > h4:nth-of-type(1)",
      "text": [
        "Previous topic"
      ]
    },
    {
      "bound": {
        "height": 32,
        "left": 36,
        "top": 126,
        "width": 182
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "font-size": "13px",
        "line-height": "16px",
        "margin-bottom": "10px",
        "margin-left": "10px",
        "margin-right": "10px",
        "margin-top": "5px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "p.topless:nth-of-type(1)",
      "html": "<a href=\"difflib.html\" title=\"previous chapter\">6.3. <tt class=\"docutils literal docutils literal docutils literal\"><span class=\"pre\">difflib</span></tt> — Helpers for computing deltas</a>",
      "path": "div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > p.topless:nth-of-type(1)",
      "text": [
        "6.3. ",
        "difflib",
        " — Helpers for computing deltas"
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 26,
        "top": 184,
        "width": 202
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "font-size": "17px",
        "line-height": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "26px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "h4:nth-of-type(2)",
      "html": "Next topic",
      "path": "div > div > div > h4",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > h4:nth-of-type(2)",
      "text": [
        "Next topic"
      ]
    },
    {
      "bound": {
        "height": 32,
        "left": 36,
        "top": 205,
        "width": 182
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "font-size": "13px",
        "line-height": "16px",
        "margin-bottom": "10px",
        "margin-left": "10px",
        "margin-right": "10px",
        "margin-top": "5px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "p.topless:nth-of-type(2)",
      "html": "<a href=\"unicodedata.html\" title=\"next chapter\">6.5. <tt class=\"docutils literal docutils literal\"><span class=\"pre\">unicodedata</span></tt> — Unicode Database</a>",
      "path": "div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > p.topless:nth-of-type(2)",
      "text": [
        "6.5. ",
        "unicodedata",
        " — Unicode Database"
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 26,
        "top": 265,
        "width": 202
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "font-size": "19px",
        "line-height": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "28px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "h3:nth-of-type(1)",
      "html": "This Page",
      "path": "div > div > div > h3",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > h3:nth-of-type(1)",
      "text": [
        "This Page"
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 36,
        "top": 291,
        "width": 182
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(1)",
      "html": "<a href=\"../bugs.html\">Report a Bug</a>",
      "path": "div > div > div > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul.this-page-menu:nth-of-type(1) > li:nth-of-type(1)",
      "text": [
        "Report a Bug"
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 36,
        "top": 307,
        "width": 182
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(2)",
      "html": "<a href=\"../_sources/library/textwrap.txt\" rel=\"nofollow\">Show Source</a>",
      "path": "div > div > div > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul.this-page-menu:nth-of-type(1) > li:nth-of-type(2)",
      "text": [
        "Show Source"
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 26,
        "top": 351,
        "width": 202
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "font-size": "19px",
        "line-height": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "28px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "h3:nth-of-type(1)",
      "html": "Quick search",
      "path": "div > div > div > div > h3",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > div#searchbox:nth-of-type(1) > h3:nth-of-type(1)",
      "text": [
        "Quick search"
      ]
    },
    {
      "bound": {
        "height": 32,
        "left": 26,
        "top": 414,
        "width": 202
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "font-size": "12px",
        "line-height": "16px",
        "margin-bottom": "12px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "12px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "p.searchtip:nth-of-type(1)",
      "html": "\n    Enter search terms or a module, class or function name.\n    ",
      "path": "div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > div#searchbox:nth-of-type(1) > p.searchtip:nth-of-type(1)",
      "text": [
        "\n    Enter search terms or a module, class or function name.\n    "
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 235,
        "top": 1616,
        "width": 9
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "cursor": "pointer",
        "line-height": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "position": "fixed"
      },
      "element": "span:nth-of-type(1)",
      "html": "«",
      "path": "div > div > div > span",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div#sidebarbutton:nth-of-type(2) > span:nth-of-type(1)",
      "text": [
        "«"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 1540,
        "top": 3214,
        "width": 34
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "float": "right",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "10px",
        "outline-color": "rgb(102, 102, 102)"
      },
      "element": "li.right:nth-of-type(1)",
      "html": "\n          <a href=\"../genindex.html\" title=\"General Index\">index</a>",
      "path": "div > ul > li",
      "selector": "div.related:nth-of-type(3) > ul:nth-of-type(1) > li.right:nth-of-type(1)",
      "text": [
        "index"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 1473,
        "top": 3214,
        "width": 62
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "float": "right",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "5px",
        "outline-color": "rgb(102, 102, 102)"
      },
      "element": "li.right:nth-of-type(2)",
      "html": "\n          <a href=\"../py-modindex.html\" title=\"Python Module Index\">modules</a> |",
      "path": "div > ul > li",
      "selector": "div.related:nth-of-type(3) > ul:nth-of-type(1) > li.right:nth-of-type(2)",
      "text": [
        "modules",
        " |"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 1430,
        "top": 3214,
        "width": 38
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "float": "right",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "5px",
        "outline-color": "rgb(102, 102, 102)"
      },
      "element": "li.right:nth-of-type(3)",
      "html": "\n          <a href=\"unicodedata.html\" title=\"6.5. unicodedata — Unicode Database\">next</a> |",
      "path": "div > ul > li",
      "selector": "div.related:nth-of-type(3) > ul:nth-of-type(1) > li.right:nth-of-type(3)",
      "text": [
        "next",
        " |"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 1362,
        "top": 3214,
        "width": 63
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "float": "right",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "5px",
        "outline-color": "rgb(102, 102, 102)"
      },
      "element": "li.right:nth-of-type(4)",
      "html": "\n          <a href=\"difflib.html\" title=\"6.3. difflib — Helpers for computing deltas\">previous</a> |",
      "path": "div > ul > li",
      "selector": "div.related:nth-of-type(3) > ul:nth-of-type(1) > li.right:nth-of-type(4)",
      "text": [
        "previous",
        " |"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 16,
        "top": 3214,
        "width": 1568
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(102, 102, 102)",
        "padding-left": "10px"
      },
      "element": "ul:nth-of-type(1)",
      "html": "\n        <li class=\"right\" style=\"margin-right: 10px\">\n          <a href=\"../genindex.html\" title=\"General Index\">index</a></li>\n        <li class=\"right\">\n          <a href=\"../py-modindex.html\" title=\"Python Module Index\">modules</a> |</li>\n        <li class=\"right\">\n          <a href=\"unicodedata.html\" title=\"6.5. unicodedata — Unicode Database\">next</a> |</li>\n        <li class=\"right\">\n          <a href=\"difflib.html\" title=\"6.3. difflib — Helpers for computing deltas\">previous</a> |</li>\n        <li><img src=\"../_static/py.png\" alt=\"\" style=\"vertical-align: middle; margin-top: -1px\"></li>\n        <li><a href=\"http://www.python.org/\">Python</a> »</li>\n        <li>\n          <span class=\"version_switcher_placeholder\"><select><option value=\"3.4\">dev (3.4)</option><option value=\"3.3\" selected=\"selected\">3.3.2</option><option value=\"3.2\">3.2</option><option value=\"2.7\">2.7</option><option value=\"2.6\">2.6</option></select></span>\n          <a href=\"../index.html\">Documentation</a> »\n        </li>\n\n          <li><a href=\"index.html\">The Python Standard Library</a> »</li>\n          <li><a href=\"text.html\">6. Text Processing Services</a> »</li> \n      ",
      "path": "div > ul",
      "selector": "div.related:nth-of-type(3) > ul:nth-of-type(1)",
      "text": [
        "Python",
        " »",
        "Documentation",
        " »\n        ",
        "The Python Standard Library",
        " »",
        "6. Text Processing Services",
        " »"
      ]
    },
    {
      "bound": {
        "height": 90,
        "left": 16,
        "top": 3244,
        "width": 1558
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(85, 85, 85)",
        "border-left-color": "rgb(85, 85, 85)",
        "border-right-color": "rgb(85, 85, 85)",
        "border-top-color": "rgb(85, 85, 85)",
        "color": "rgb(85, 85, 85)",
        "font-size": "12px",
        "line-height": "18px",
        "margin-left": "0px",
        "margin-right": "10px",
        "margin-top": "-24px",
        "outline-color": "rgb(85, 85, 85)",
        "padding-bottom": "9px",
        "padding-top": "9px",
        "text-align": "right"
      },
      "element": "div.footer:nth-of-type(4)",
      "html": "\n    © <a href=\"../copyright.html\">Copyright</a> 1990-2013, Python Software Foundation.\n    <br>\n    The Python Software Foundation is a non-profit corporation.\n    <a href=\"http://www.python.org/psf/donations/\">Please donate.</a>\n    <br>\n    Last updated on Aug 14, 2013.\n    <a href=\"../bugs.html\">Found a bug</a>?\n    <br>\n    Created using <a href=\"http://sphinx.pocoo.org/\">Sphinx</a> 1.0.7.\n    ",
      "path": "div",
      "selector": "div.footer:nth-of-type(4)",
      "text": [
        "\n    © ",
        "Copyright",
        " 1990-2013, Python Software Foundation.\n    ",
        "\n    The Python Software Foundation is a non-profit corporation.\n    ",
        "Please donate.",
        "\n    Last updated on Aug 14, 2013.\n    ",
        "Found a bug",
        "?\n    ",
        "\n    Created using ",
        "Sphinx",
        " 1.0.7.\n    "
      ]
    }
  ],
  "images": [
    {
      "bound": {
        "height": 16,
        "left": 26,
        "top": 21,
        "width": 16
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "display": "inline",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "-1px",
        "outline-color": "rgb(102, 102, 102)",
        "vertical-align": "middle"
      },
      "element": "img:nth-of-type(1)",
      "path": "div > ul > li > img",
      "selector": "div.related:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(5) > img:nth-of-type(1)",
      "src": "http://docs.python.org/3.3/_static/py.png"
    },
    {
      "bound": {
        "height": 16,
        "left": 26,
        "top": 3221,
        "width": 16
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "display": "inline",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "-1px",
        "outline-color": "rgb(102, 102, 102)",
        "vertical-align": "middle"
      },
      "element": "img:nth-of-type(1)",
      "path": "div > ul > li > img",
      "selector": "div.related:nth-of-type(3) > ul:nth-of-type(1) > li:nth-of-type(5) > img:nth-of-type(1)",
      "src": "http://docs.python.org/3.3/_static/py.png"
    }
  ]
}