{
  "body": {
    "bound": {
      "height": 2728,
      "left": 16,
      "top": 7,
      "width": 1568
    },
    "computed": {
      "alignment-baseline": "auto",
      "background-attachment": "scroll",
      "background-clip": "border-box",
      "background-color": "rgb(255, 255, 255)",
      "background-image": "none",
      "background-origin": "padding-box",
      "background-position": "0% 0%",
      "background-repeat": "repeat",
      "background-size": "auto auto",
      "baseline-shift": "baseline",
      "border-bottom-color": "rgb(0, 0, 0)",
      "border-bottom-left-radius": "0px",
      "border-bottom-right-radius": "0px",
      "border-bottom-style": "none",
      "border-bottom-width": "0px",
      "border-collapse": "separate",
      "border-left-color": "rgb(0, 0, 0)",
      "border-left-style": "none",
      "border-left-width": "0px",
      "border-right-color": "rgb(0, 0, 0)",
      "border-right-style": "none",
      "border-right-width": "0px",
      "border-top-color": "rgb(0, 0, 0)",
      "border-top-left-radius": "0px",
      "border-top-right-radius": "0px",
      "border-top-style": "none",
      "border-top-width": "0px",
      "bottom": "auto",
      "box-shadow": "none",
      "box-sizing": "content-box",
      "caption-side": "top",
      "clear": "none",
      "clip": "auto",
      "clip-path": "none",
      "clip-rule": "nonzero",
      "color": "rgb(0, 0, 0)",
      "color-interpolation": "srgb",
      "color-interpolation-filters": "linearrgb",
      "color-rendering": "auto",
      "cursor": "auto",
      "direction": "ltr",
      "display": "block",
      "dominant-baseline": "auto",
      "empty-cells": "show",
      "fill": "#000000",
      "fill-opacity": "1",
      "fill-rule": "nonzero",
      "filter": "none",
      "float": "none",
      "flood-color": "rgb(0, 0, 0)",
      "flood-opacity": "1",
      "font-family": "'Lucida Grande', Arial, sans-serif",
      "font-size": "16px",
      "font-style": "normal",
      "font-variant": "normal",
      "font-weight": "normal",
      "glyph-orientation-horizontal": "0deg",
      "glyph-orientation-vertical": "auto",
      "height": "2728px",
      "image-rendering": "auto",
      "kerning": "0",
      "left": "auto",
      "letter-spacing": "normal",
      "lighting-color": "rgb(255, 255, 255)",
      "line-height": "normal",
      "list-style-image": "none",
      "list-style-position": "outside",
      "list-style-type": "disc",
      "margin-bottom": "0px",
      "margin-left": "16px",
      "margin-right": "16px",
      "margin-top": "0px",
      "marker-end": "none",
      "marker-mid": "none",
      "marker-start": "none",
      "mask": "none",
      "max-height": "none",
      "max-width": "none",
      "min-height": "0px",
      "min-width": "0px",
      "opacity": "1",
      "orphans": "2",
      "outline-color": "rgb(0, 0, 0)",
      "outline-style": "none",
      "outline-width": "0px",
      "overflow-x": "visible",
      "overflow-y": "visible",
      "padding-bottom": "0px",
      "padding-left": "0px",
      "padding-right": "0px",
      "padding-top": "0px",
      "page-break-after": "auto",
      "page-break-before": "auto",
      "page-break-inside": "auto",
      "pointer-events": "auto",
      "position": "static",
      "resize": "none",
      "right": "auto",
      "shape-rendering": "auto",
      "speak": "normal",
      "stop-color": "rgb(0, 0, 0)",
      "stop-opacity": "1",
      "stroke": "none",
      "stroke-dasharray": "none",
      "stroke-dashoffset": "0",
      "stroke-linecap": "butt",
      "stroke-linejoin": "miter",
      "stroke-miterlimit": "4",
      "stroke-opacity": "1",
      "stroke-width": "1",
      "table-layout": "auto",
      "text-align": "-webkit-auto",
      "text-anchor": "start",
      "text-decoration": "none",
      "text-indent": "0px",
      "text-overflow": "clip",
      "text-rendering": "auto",
      "text-shadow": "none",
      "text-transform": "none",
      "top": "auto",
      "unicode-bidi": "normal",
      "vector-effect": "none",
      "vertical-align": "baseline",
      "visibility": "visible",
      "white-space": "normal",
      "widows": "2",
      "width": "1568px",
      "word-break": "normal",
      "word-spacing": "0px",
      "word-wrap": "normal",
      "writing-mode": "lr-tb",
      "z-index": "auto",
      "zoom": "1"
    },
    "scroll": {
      "left": 0,
      "top": 0
    }
  },
  "descriptions": [],
  "titles": [
    "10. Full Grammar specification â€” Python v3.3.2 documentation"
  ],
  "url": "http://docs.python.org/3.3/reference/grammar.html",
  "links": [
    "http://docs.python.org/3.3/genindex.html",
    "http://docs.python.org/3.3/py-modindex.html",
    "http://docs.python.org/3.3/library/index.html",
    "http://docs.python.org/3.3/reference/toplevel_components.html",
    "http://www.python.org/",
    "http://docs.python.org/3.3/index.html",
    "http://docs.python.org/3.3/reference/index.html",
    "http://docs.python.org/3.3/reference/grammar.html#full-grammar-specification",
    "http://docs.python.org/3.3/reference/toplevel_components.html",
    "http://docs.python.org/3.3/library/index.html",
    "http://docs.python.org/3.3/bugs.html",
    "http://docs.python.org/3.3/_sources/reference/grammar.txt",
    "http://docs.python.org/3.3/genindex.html",
    "http://docs.python.org/3.3/py-modindex.html",
    "http://docs.python.org/3.3/library/index.html",
    "http://docs.python.org/3.3/reference/toplevel_components.html",
    "http://www.python.org/",
    "http://docs.python.org/3.3/index.html",
    "http://docs.python.org/3.3/reference/index.html",
    "http://docs.python.org/3.3/copyright.html",
    "http://www.python.org/psf/donations/",
    "http://docs.python.org/3.3/bugs.html",
    "http://sphinx.pocoo.org/"
  ],
  "texts": [
    {
      "bound": {
        "height": 30,
        "left": 1540,
        "top": 14,
        "width": 34
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "float": "right",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "10px",
        "outline-color": "rgb(102, 102, 102)"
      },
      "element": "li.right:nth-of-type(1)",
      "html": "\n          <a href=\"../genindex.html\" title=\"General Index\" accesskey=\"I\">index</a>",
      "path": "div > ul > li",
      "selector": "div.related:nth-of-type(1) > ul:nth-of-type(1) > li.right:nth-of-type(1)",
      "text": [
        "index"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 1473,
        "top": 14,
        "width": 62
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "float": "right",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "5px",
        "outline-color": "rgb(102, 102, 102)"
      },
      "element": "li.right:nth-of-type(2)",
      "html": "\n          <a href=\"../py-modindex.html\" title=\"Python Module Index\">modules</a> |",
      "path": "div > ul > li",
      "selector": "div.related:nth-of-type(1) > ul:nth-of-type(1) > li.right:nth-of-type(2)",
      "text": [
        "modules",
        " |"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 1430,
        "top": 14,
        "width": 38
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "float": "right",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "5px",
        "outline-color": "rgb(102, 102, 102)"
      },
      "element": "li.right:nth-of-type(3)",
      "html": "\n          <a href=\"../library/index.html\" title=\"The Python Standard Library\" accesskey=\"N\">next</a> |",
      "path": "div > ul > li",
      "selector": "div.related:nth-of-type(1) > ul:nth-of-type(1) > li.right:nth-of-type(3)",
      "text": [
        "next",
        " |"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 1362,
        "top": 14,
        "width": 63
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "float": "right",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "5px",
        "outline-color": "rgb(102, 102, 102)"
      },
      "element": "li.right:nth-of-type(4)",
      "html": "\n          <a href=\"toplevel_components.html\" title=\"9. Top-level components\" accesskey=\"P\">previous</a> |",
      "path": "div > ul > li",
      "selector": "div.related:nth-of-type(1) > ul:nth-of-type(1) > li.right:nth-of-type(4)",
      "text": [
        "previous",
        " |"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 16,
        "top": 14,
        "width": 1568
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(102, 102, 102)",
        "padding-left": "10px"
      },
      "element": "ul:nth-of-type(1)",
      "html": "\n        <li class=\"right\" style=\"margin-right: 10px\">\n          <a href=\"../genindex.html\" title=\"General Index\" accesskey=\"I\">index</a></li>\n        <li class=\"right\">\n          <a href=\"../py-modindex.html\" title=\"Python Module Index\">modules</a> |</li>\n        <li class=\"right\">\n          <a href=\"../library/index.html\" title=\"The Python Standard Library\" accesskey=\"N\">next</a> |</li>\n        <li class=\"right\">\n          <a href=\"toplevel_components.html\" title=\"9. Top-level components\" accesskey=\"P\">previous</a> |</li>\n        <li><img src=\"../_static/py.png\" alt=\"\" style=\"vertical-align: middle; margin-top: -1px\"></li>\n        <li><a href=\"http://www.python.org/\">Python</a> Â»</li>\n        <li>\n          <span class=\"version_switcher_placeholder\"><select><option value=\"3.4\">dev (3.4)</option><option value=\"3.3\" selected=\"selected\">3.3.2</option><option value=\"3.2\">3.2</option><option value=\"2.7\">2.7</option><option value=\"2.6\">2.6</option></select></span>\n          <a href=\"../index.html\">Documentation</a> Â»\n        </li>\n\n          <li><a href=\"index.html\" accesskey=\"U\">The Python Language Reference</a> Â»</li> \n      ",
      "path": "div > ul",
      "selector": "div.related:nth-of-type(1) > ul:nth-of-type(1)",
      "text": [
        "Python",
        " Â»",
        "Documentation",
        " Â»\n        ",
        "The Python Language Reference",
        " Â»"
      ]
    },
    {
      "bound": {
        "height": 56,
        "left": 265,
        "top": 69,
        "width": 1319
      },
      "computed": {
        "border-bottom-color": "rgb(26, 26, 26)",
        "border-left-color": "rgb(26, 26, 26)",
        "border-right-color": "rgb(26, 26, 26)",
        "border-top-color": "rgb(26, 26, 26)",
        "color": "rgb(26, 26, 26)",
        "font-size": "32px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(26, 26, 26)",
        "padding-bottom": "9px",
        "padding-top": "9px"
      },
      "element": "h1:nth-of-type(1)",
      "html": "10. Full Grammar specification<a class=\"headerlink\" href=\"#full-grammar-specification\" title=\"Permalink to this headline\">Â¶</a>",
      "path": "div > div > div > div > div > h1",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#full-grammar-specification.section:nth-of-type(1) > h1:nth-of-type(1)",
      "text": [
        "10. Full Grammar specification",
        "Â¶"
      ]
    },
    {
      "bound": {
        "height": 22,
        "left": 265,
        "top": 141,
        "width": 1319
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(34, 34, 34)",
        "border-left-color": "rgb(34, 34, 34)",
        "border-right-color": "rgb(34, 34, 34)",
        "border-top-color": "rgb(34, 34, 34)",
        "color": "rgb(34, 34, 34)",
        "line-height": "22px",
        "margin-bottom": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "16px",
        "outline-color": "rgb(34, 34, 34)",
        "text-align": "justify"
      },
      "element": "p:nth-of-type(1)",
      "html": "This is the full Python grammar, as it is read by the parser generator and used\nto parse Python source files:",
      "path": "div > div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#full-grammar-specification.section:nth-of-type(1) > p:nth-of-type(1)",
      "text": [
        "This is the full Python grammar, as it is read by the parser generator and used\nto parse Python source files:"
      ]
    },
    {
      "bound": {
        "height": 2406,
        "left": 265,
        "top": 179,
        "width": 1319
      },
      "computed": {
        "background-color": "rgb(238, 255, 204)",
        "border-bottom-color": "rgb(170, 204, 153)",
        "border-bottom-left-radius": "3px",
        "border-bottom-right-radius": "3px",
        "border-bottom-style": "solid",
        "border-bottom-width": "1px",
        "border-left-color": "rgb(170, 204, 153)",
        "border-left-style": "solid",
        "border-left-width": "1px",
        "border-right-color": "rgb(170, 204, 153)",
        "border-right-style": "solid",
        "border-right-width": "1px",
        "border-top-color": "rgb(170, 204, 153)",
        "border-top-left-radius": "3px",
        "border-top-right-radius": "3px",
        "border-top-style": "solid",
        "border-top-width": "1px",
        "color": "rgb(51, 51, 51)",
        "font-family": "monospace, sans-serif",
        "font-size": "15px",
        "line-height": "18px",
        "margin-bottom": "15px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "15px",
        "outline-color": "rgb(51, 51, 51)",
        "overflow-x": "auto",
        "overflow-y": "hidden",
        "padding-bottom": "5px",
        "padding-left": "5px",
        "padding-right": "5px",
        "padding-top": "5px",
        "white-space": "pre"
      },
      "element": "pre:nth-of-type(1)",
      "html": "<span class=\"c\"># Grammar for Python</span>\n\n<span class=\"c\"># Note:  Changing the grammar specified in this file will most likely</span>\n<span class=\"c\">#        require corresponding changes in the parser module</span>\n<span class=\"c\">#        (../Modules/parsermodule.c).  If you can't make the changes to</span>\n<span class=\"c\">#        that module yourself, please co-ordinate the required changes</span>\n<span class=\"c\">#        with someone who can; ask around on python-dev for help.  Fred</span>\n<span class=\"c\">#        Drake &lt;fdrake@acm.org&gt; will probably be listening there.</span>\n\n<span class=\"c\"># NOTE WELL: You should also follow all the steps listed in PEP 306,</span>\n<span class=\"c\"># \"How to Change Python's Grammar\"</span>\n\n<span class=\"c\"># Start symbols for the grammar:</span>\n<span class=\"c\">#       single_input is a single interactive statement;</span>\n<span class=\"c\">#       file_input is a module or sequence of commands read from an input file;</span>\n<span class=\"c\">#       eval_input is the input for the eval() functions.</span>\n<span class=\"c\"># NB: compound_stmt in single_input is followed by extra NEWLINE!</span>\n<span class=\"n\">single_input</span><span class=\"p\">:</span> <span class=\"n\">NEWLINE</span> <span class=\"o\">|</span> <span class=\"n\">simple_stmt</span> <span class=\"o\">|</span> <span class=\"n\">compound_stmt</span> <span class=\"n\">NEWLINE</span>\n<span class=\"n\">file_input</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">NEWLINE</span> <span class=\"o\">|</span> <span class=\"n\">stmt</span><span class=\"p\">)</span><span class=\"o\">*</span> <span class=\"n\">ENDMARKER</span>\n<span class=\"n\">eval_input</span><span class=\"p\">:</span> <span class=\"n\">testlist</span> <span class=\"n\">NEWLINE</span><span class=\"o\">*</span> <span class=\"n\">ENDMARKER</span>\n\n<span class=\"n\">decorator</span><span class=\"p\">:</span> <span class=\"s\">'@'</span> <span class=\"n\">dotted_name</span> <span class=\"p\">[</span> <span class=\"s\">'('</span> <span class=\"p\">[</span><span class=\"n\">arglist</span><span class=\"p\">]</span> <span class=\"s\">')'</span> <span class=\"p\">]</span> <span class=\"n\">NEWLINE</span>\n<span class=\"n\">decorators</span><span class=\"p\">:</span> <span class=\"n\">decorator</span><span class=\"o\">+</span>\n<span class=\"n\">decorated</span><span class=\"p\">:</span> <span class=\"n\">decorators</span> <span class=\"p\">(</span><span class=\"n\">classdef</span> <span class=\"o\">|</span> <span class=\"n\">funcdef</span><span class=\"p\">)</span>\n<span class=\"n\">funcdef</span><span class=\"p\">:</span> <span class=\"s\">'def'</span> <span class=\"n\">NAME</span> <span class=\"n\">parameters</span> <span class=\"p\">[</span><span class=\"s\">'-&gt;'</span> <span class=\"n\">test</span><span class=\"p\">]</span> <span class=\"s\">':'</span> <span class=\"n\">suite</span>\n<span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"s\">'('</span> <span class=\"p\">[</span><span class=\"n\">typedargslist</span><span class=\"p\">]</span> <span class=\"s\">')'</span>\n<span class=\"n\">typedargslist</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">tfpdef</span> <span class=\"p\">[</span><span class=\"s\">'='</span> <span class=\"n\">test</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"s\">','</span> <span class=\"n\">tfpdef</span> <span class=\"p\">[</span><span class=\"s\">'='</span> <span class=\"n\">test</span><span class=\"p\">])</span><span class=\"o\">*</span> <span class=\"p\">[</span><span class=\"s\">','</span>\n       <span class=\"p\">[</span><span class=\"s\">'*'</span> <span class=\"p\">[</span><span class=\"n\">tfpdef</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"s\">','</span> <span class=\"n\">tfpdef</span> <span class=\"p\">[</span><span class=\"s\">'='</span> <span class=\"n\">test</span><span class=\"p\">])</span><span class=\"o\">*</span> <span class=\"p\">[</span><span class=\"s\">','</span> <span class=\"s\">'**'</span> <span class=\"n\">tfpdef</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"s\">'**'</span> <span class=\"n\">tfpdef</span><span class=\"p\">]]</span>\n     <span class=\"o\">|</span>  <span class=\"s\">'*'</span> <span class=\"p\">[</span><span class=\"n\">tfpdef</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"s\">','</span> <span class=\"n\">tfpdef</span> <span class=\"p\">[</span><span class=\"s\">'='</span> <span class=\"n\">test</span><span class=\"p\">])</span><span class=\"o\">*</span> <span class=\"p\">[</span><span class=\"s\">','</span> <span class=\"s\">'**'</span> <span class=\"n\">tfpdef</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"s\">'**'</span> <span class=\"n\">tfpdef</span><span class=\"p\">)</span>\n<span class=\"n\">tfpdef</span><span class=\"p\">:</span> <span class=\"n\">NAME</span> <span class=\"p\">[</span><span class=\"s\">':'</span> <span class=\"n\">test</span><span class=\"p\">]</span>\n<span class=\"n\">varargslist</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">vfpdef</span> <span class=\"p\">[</span><span class=\"s\">'='</span> <span class=\"n\">test</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"s\">','</span> <span class=\"n\">vfpdef</span> <span class=\"p\">[</span><span class=\"s\">'='</span> <span class=\"n\">test</span><span class=\"p\">])</span><span class=\"o\">*</span> <span class=\"p\">[</span><span class=\"s\">','</span>\n       <span class=\"p\">[</span><span class=\"s\">'*'</span> <span class=\"p\">[</span><span class=\"n\">vfpdef</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"s\">','</span> <span class=\"n\">vfpdef</span> <span class=\"p\">[</span><span class=\"s\">'='</span> <span class=\"n\">test</span><span class=\"p\">])</span><span class=\"o\">*</span> <span class=\"p\">[</span><span class=\"s\">','</span> <span class=\"s\">'**'</span> <span class=\"n\">vfpdef</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"s\">'**'</span> <span class=\"n\">vfpdef</span><span class=\"p\">]]</span>\n     <span class=\"o\">|</span>  <span class=\"s\">'*'</span> <span class=\"p\">[</span><span class=\"n\">vfpdef</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"s\">','</span> <span class=\"n\">vfpdef</span> <span class=\"p\">[</span><span class=\"s\">'='</span> <span class=\"n\">test</span><span class=\"p\">])</span><span class=\"o\">*</span> <span class=\"p\">[</span><span class=\"s\">','</span> <span class=\"s\">'**'</span> <span class=\"n\">vfpdef</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"s\">'**'</span> <span class=\"n\">vfpdef</span><span class=\"p\">)</span>\n<span class=\"n\">vfpdef</span><span class=\"p\">:</span> <span class=\"n\">NAME</span>\n\n<span class=\"n\">stmt</span><span class=\"p\">:</span> <span class=\"n\">simple_stmt</span> <span class=\"o\">|</span> <span class=\"n\">compound_stmt</span>\n<span class=\"n\">simple_stmt</span><span class=\"p\">:</span> <span class=\"n\">small_stmt</span> <span class=\"p\">(</span><span class=\"s\">';'</span> <span class=\"n\">small_stmt</span><span class=\"p\">)</span><span class=\"o\">*</span> <span class=\"p\">[</span><span class=\"s\">';'</span><span class=\"p\">]</span> <span class=\"n\">NEWLINE</span>\n<span class=\"n\">small_stmt</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">expr_stmt</span> <span class=\"o\">|</span> <span class=\"n\">del_stmt</span> <span class=\"o\">|</span> <span class=\"n\">pass_stmt</span> <span class=\"o\">|</span> <span class=\"n\">flow_stmt</span> <span class=\"o\">|</span>\n             <span class=\"n\">import_stmt</span> <span class=\"o\">|</span> <span class=\"n\">global_stmt</span> <span class=\"o\">|</span> <span class=\"n\">nonlocal_stmt</span> <span class=\"o\">|</span> <span class=\"n\">assert_stmt</span><span class=\"p\">)</span>\n<span class=\"n\">expr_stmt</span><span class=\"p\">:</span> <span class=\"n\">testlist_star_expr</span> <span class=\"p\">(</span><span class=\"n\">augassign</span> <span class=\"p\">(</span><span class=\"n\">yield_expr</span><span class=\"o\">|</span><span class=\"n\">testlist</span><span class=\"p\">)</span> <span class=\"o\">|</span>\n                     <span class=\"p\">(</span><span class=\"s\">'='</span> <span class=\"p\">(</span><span class=\"n\">yield_expr</span><span class=\"o\">|</span><span class=\"n\">testlist_star_expr</span><span class=\"p\">))</span><span class=\"o\">*</span><span class=\"p\">)</span>\n<span class=\"n\">testlist_star_expr</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">test</span><span class=\"o\">|</span><span class=\"n\">star_expr</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"s\">','</span> <span class=\"p\">(</span><span class=\"n\">test</span><span class=\"o\">|</span><span class=\"n\">star_expr</span><span class=\"p\">))</span><span class=\"o\">*</span> <span class=\"p\">[</span><span class=\"s\">','</span><span class=\"p\">]</span>\n<span class=\"n\">augassign</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s\">'+='</span> <span class=\"o\">|</span> <span class=\"s\">'-='</span> <span class=\"o\">|</span> <span class=\"s\">'*='</span> <span class=\"o\">|</span> <span class=\"s\">'/='</span> <span class=\"o\">|</span> <span class=\"s\">'%='</span> <span class=\"o\">|</span> <span class=\"s\">'&amp;='</span> <span class=\"o\">|</span> <span class=\"s\">'|='</span> <span class=\"o\">|</span> <span class=\"s\">'^='</span> <span class=\"o\">|</span>\n            <span class=\"s\">'&lt;&lt;='</span> <span class=\"o\">|</span> <span class=\"s\">'&gt;&gt;='</span> <span class=\"o\">|</span> <span class=\"s\">'**='</span> <span class=\"o\">|</span> <span class=\"s\">'//='</span><span class=\"p\">)</span>\n<span class=\"c\"># For normal assignments, additional restrictions enforced by the interpreter</span>\n<span class=\"n\">del_stmt</span><span class=\"p\">:</span> <span class=\"s\">'del'</span> <span class=\"n\">exprlist</span>\n<span class=\"n\">pass_stmt</span><span class=\"p\">:</span> <span class=\"s\">'pass'</span>\n<span class=\"n\">flow_stmt</span><span class=\"p\">:</span> <span class=\"n\">break_stmt</span> <span class=\"o\">|</span> <span class=\"n\">continue_stmt</span> <span class=\"o\">|</span> <span class=\"n\">return_stmt</span> <span class=\"o\">|</span> <span class=\"n\">raise_stmt</span> <span class=\"o\">|</span> <span class=\"n\">yield_stmt</span>\n<span class=\"n\">break_stmt</span><span class=\"p\">:</span> <span class=\"s\">'break'</span>\n<span class=\"n\">continue_stmt</span><span class=\"p\">:</span> <span class=\"s\">'continue'</span>\n<span class=\"n\">return_stmt</span><span class=\"p\">:</span> <span class=\"s\">'return'</span> <span class=\"p\">[</span><span class=\"n\">testlist</span><span class=\"p\">]</span>\n<span class=\"n\">yield_stmt</span><span class=\"p\">:</span> <span class=\"n\">yield_expr</span>\n<span class=\"n\">raise_stmt</span><span class=\"p\">:</span> <span class=\"s\">'raise'</span> <span class=\"p\">[</span><span class=\"n\">test</span> <span class=\"p\">[</span><span class=\"s\">'from'</span> <span class=\"n\">test</span><span class=\"p\">]]</span>\n<span class=\"n\">import_stmt</span><span class=\"p\">:</span> <span class=\"n\">import_name</span> <span class=\"o\">|</span> <span class=\"n\">import_from</span>\n<span class=\"n\">import_name</span><span class=\"p\">:</span> <span class=\"s\">'import'</span> <span class=\"n\">dotted_as_names</span>\n<span class=\"c\"># note below: the ('.' | '...') is necessary because '...' is tokenized as ELLIPSIS</span>\n<span class=\"n\">import_from</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s\">'from'</span> <span class=\"p\">((</span><span class=\"s\">'.'</span> <span class=\"o\">|</span> <span class=\"s\">'...'</span><span class=\"p\">)</span><span class=\"o\">*</span> <span class=\"n\">dotted_name</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"s\">'.'</span> <span class=\"o\">|</span> <span class=\"s\">'...'</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"p\">)</span>\n              <span class=\"s\">'import'</span> <span class=\"p\">(</span><span class=\"s\">'*'</span> <span class=\"o\">|</span> <span class=\"s\">'('</span> <span class=\"n\">import_as_names</span> <span class=\"s\">')'</span> <span class=\"o\">|</span> <span class=\"n\">import_as_names</span><span class=\"p\">))</span>\n<span class=\"n\">import_as_name</span><span class=\"p\">:</span> <span class=\"n\">NAME</span> <span class=\"p\">[</span><span class=\"s\">'as'</span> <span class=\"n\">NAME</span><span class=\"p\">]</span>\n<span class=\"n\">dotted_as_name</span><span class=\"p\">:</span> <span class=\"n\">dotted_name</span> <span class=\"p\">[</span><span class=\"s\">'as'</span> <span class=\"n\">NAME</span><span class=\"p\">]</span>\n<span class=\"n\">import_as_names</span><span class=\"p\">:</span> <span class=\"n\">import_as_name</span> <span class=\"p\">(</span><span class=\"s\">','</span> <span class=\"n\">import_as_name</span><span class=\"p\">)</span><span class=\"o\">*</span> <span class=\"p\">[</span><span class=\"s\">','</span><span class=\"p\">]</span>\n<span class=\"n\">dotted_as_names</span><span class=\"p\">:</span> <span class=\"n\">dotted_as_name</span> <span class=\"p\">(</span><span class=\"s\">','</span> <span class=\"n\">dotted_as_name</span><span class=\"p\">)</span><span class=\"o\">*</span>\n<span class=\"n\">dotted_name</span><span class=\"p\">:</span> <span class=\"n\">NAME</span> <span class=\"p\">(</span><span class=\"s\">'.'</span> <span class=\"n\">NAME</span><span class=\"p\">)</span><span class=\"o\">*</span>\n<span class=\"n\">global_stmt</span><span class=\"p\">:</span> <span class=\"s\">'global'</span> <span class=\"n\">NAME</span> <span class=\"p\">(</span><span class=\"s\">','</span> <span class=\"n\">NAME</span><span class=\"p\">)</span><span class=\"o\">*</span>\n<span class=\"n\">nonlocal_stmt</span><span class=\"p\">:</span> <span class=\"s\">'nonlocal'</span> <span class=\"n\">NAME</span> <span class=\"p\">(</span><span class=\"s\">','</span> <span class=\"n\">NAME</span><span class=\"p\">)</span><span class=\"o\">*</span>\n<span class=\"n\">assert_stmt</span><span class=\"p\">:</span> <span class=\"s\">'assert'</span> <span class=\"n\">test</span> <span class=\"p\">[</span><span class=\"s\">','</span> <span class=\"n\">test</span><span class=\"p\">]</span>\n\n<span class=\"n\">compound_stmt</span><span class=\"p\">:</span> <span class=\"n\">if_stmt</span> <span class=\"o\">|</span> <span class=\"n\">while_stmt</span> <span class=\"o\">|</span> <span class=\"n\">for_stmt</span> <span class=\"o\">|</span> <span class=\"n\">try_stmt</span> <span class=\"o\">|</span> <span class=\"n\">with_stmt</span> <span class=\"o\">|</span> <span class=\"n\">funcdef</span> <span class=\"o\">|</span> <span class=\"n\">classdef</span> <span class=\"o\">|</span> <span class=\"n\">decorated</span>\n<span class=\"n\">if_stmt</span><span class=\"p\">:</span> <span class=\"s\">'if'</span> <span class=\"n\">test</span> <span class=\"s\">':'</span> <span class=\"n\">suite</span> <span class=\"p\">(</span><span class=\"s\">'elif'</span> <span class=\"n\">test</span> <span class=\"s\">':'</span> <span class=\"n\">suite</span><span class=\"p\">)</span><span class=\"o\">*</span> <span class=\"p\">[</span><span class=\"s\">'else'</span> <span class=\"s\">':'</span> <span class=\"n\">suite</span><span class=\"p\">]</span>\n<span class=\"n\">while_stmt</span><span class=\"p\">:</span> <span class=\"s\">'while'</span> <span class=\"n\">test</span> <span class=\"s\">':'</span> <span class=\"n\">suite</span> <span class=\"p\">[</span><span class=\"s\">'else'</span> <span class=\"s\">':'</span> <span class=\"n\">suite</span><span class=\"p\">]</span>\n<span class=\"n\">for_stmt</span><span class=\"p\">:</span> <span class=\"s\">'for'</span> <span class=\"n\">exprlist</span> <span class=\"s\">'in'</span> <span class=\"n\">testlist</span> <span class=\"s\">':'</span> <span class=\"n\">suite</span> <span class=\"p\">[</span><span class=\"s\">'else'</span> <span class=\"s\">':'</span> <span class=\"n\">suite</span><span class=\"p\">]</span>\n<span class=\"n\">try_stmt</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s\">'try'</span> <span class=\"s\">':'</span> <span class=\"n\">suite</span>\n           <span class=\"p\">((</span><span class=\"n\">except_clause</span> <span class=\"s\">':'</span> <span class=\"n\">suite</span><span class=\"p\">)</span><span class=\"o\">+</span>\n            <span class=\"p\">[</span><span class=\"s\">'else'</span> <span class=\"s\">':'</span> <span class=\"n\">suite</span><span class=\"p\">]</span>\n            <span class=\"p\">[</span><span class=\"s\">'finally'</span> <span class=\"s\">':'</span> <span class=\"n\">suite</span><span class=\"p\">]</span> <span class=\"o\">|</span>\n           <span class=\"s\">'finally'</span> <span class=\"s\">':'</span> <span class=\"n\">suite</span><span class=\"p\">))</span>\n<span class=\"n\">with_stmt</span><span class=\"p\">:</span> <span class=\"s\">'with'</span> <span class=\"n\">with_item</span> <span class=\"p\">(</span><span class=\"s\">','</span> <span class=\"n\">with_item</span><span class=\"p\">)</span><span class=\"o\">*</span>  <span class=\"s\">':'</span> <span class=\"n\">suite</span>\n<span class=\"n\">with_item</span><span class=\"p\">:</span> <span class=\"n\">test</span> <span class=\"p\">[</span><span class=\"s\">'as'</span> <span class=\"n\">expr</span><span class=\"p\">]</span>\n<span class=\"c\"># NB compile.c makes sure that the default except clause is last</span>\n<span class=\"n\">except_clause</span><span class=\"p\">:</span> <span class=\"s\">'except'</span> <span class=\"p\">[</span><span class=\"n\">test</span> <span class=\"p\">[</span><span class=\"s\">'as'</span> <span class=\"n\">NAME</span><span class=\"p\">]]</span>\n<span class=\"n\">suite</span><span class=\"p\">:</span> <span class=\"n\">simple_stmt</span> <span class=\"o\">|</span> <span class=\"n\">NEWLINE</span> <span class=\"n\">INDENT</span> <span class=\"n\">stmt</span><span class=\"o\">+</span> <span class=\"n\">DEDENT</span>\n\n<span class=\"n\">test</span><span class=\"p\">:</span> <span class=\"n\">or_test</span> <span class=\"p\">[</span><span class=\"s\">'if'</span> <span class=\"n\">or_test</span> <span class=\"s\">'else'</span> <span class=\"n\">test</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"n\">lambdef</span>\n<span class=\"n\">test_nocond</span><span class=\"p\">:</span> <span class=\"n\">or_test</span> <span class=\"o\">|</span> <span class=\"n\">lambdef_nocond</span>\n<span class=\"n\">lambdef</span><span class=\"p\">:</span> <span class=\"s\">'lambda'</span> <span class=\"p\">[</span><span class=\"n\">varargslist</span><span class=\"p\">]</span> <span class=\"s\">':'</span> <span class=\"n\">test</span>\n<span class=\"n\">lambdef_nocond</span><span class=\"p\">:</span> <span class=\"s\">'lambda'</span> <span class=\"p\">[</span><span class=\"n\">varargslist</span><span class=\"p\">]</span> <span class=\"s\">':'</span> <span class=\"n\">test_nocond</span>\n<span class=\"n\">or_test</span><span class=\"p\">:</span> <span class=\"n\">and_test</span> <span class=\"p\">(</span><span class=\"s\">'or'</span> <span class=\"n\">and_test</span><span class=\"p\">)</span><span class=\"o\">*</span>\n<span class=\"n\">and_test</span><span class=\"p\">:</span> <span class=\"n\">not_test</span> <span class=\"p\">(</span><span class=\"s\">'and'</span> <span class=\"n\">not_test</span><span class=\"p\">)</span><span class=\"o\">*</span>\n<span class=\"n\">not_test</span><span class=\"p\">:</span> <span class=\"s\">'not'</span> <span class=\"n\">not_test</span> <span class=\"o\">|</span> <span class=\"n\">comparison</span>\n<span class=\"n\">comparison</span><span class=\"p\">:</span> <span class=\"n\">expr</span> <span class=\"p\">(</span><span class=\"n\">comp_op</span> <span class=\"n\">expr</span><span class=\"p\">)</span><span class=\"o\">*</span>\n<span class=\"c\"># &lt;&gt; isn't actually a valid comparison operator in Python. It's here for the</span>\n<span class=\"c\"># sake of a __future__ import described in PEP 401</span>\n<span class=\"n\">comp_op</span><span class=\"p\">:</span> <span class=\"s\">'&lt;'</span><span class=\"o\">|</span><span class=\"s\">'&gt;'</span><span class=\"o\">|</span><span class=\"s\">'=='</span><span class=\"o\">|</span><span class=\"s\">'&gt;='</span><span class=\"o\">|</span><span class=\"s\">'&lt;='</span><span class=\"o\">|</span><span class=\"s\">'&lt;&gt;'</span><span class=\"o\">|</span><span class=\"s\">'!='</span><span class=\"o\">|</span><span class=\"s\">'in'</span><span class=\"o\">|</span><span class=\"s\">'not'</span> <span class=\"s\">'in'</span><span class=\"o\">|</span><span class=\"s\">'is'</span><span class=\"o\">|</span><span class=\"s\">'is'</span> <span class=\"s\">'not'</span>\n<span class=\"n\">star_expr</span><span class=\"p\">:</span> <span class=\"s\">'*'</span> <span class=\"n\">expr</span>\n<span class=\"n\">expr</span><span class=\"p\">:</span> <span class=\"n\">xor_expr</span> <span class=\"p\">(</span><span class=\"s\">'|'</span> <span class=\"n\">xor_expr</span><span class=\"p\">)</span><span class=\"o\">*</span>\n<span class=\"n\">xor_expr</span><span class=\"p\">:</span> <span class=\"n\">and_expr</span> <span class=\"p\">(</span><span class=\"s\">'^'</span> <span class=\"n\">and_expr</span><span class=\"p\">)</span><span class=\"o\">*</span>\n<span class=\"n\">and_expr</span><span class=\"p\">:</span> <span class=\"n\">shift_expr</span> <span class=\"p\">(</span><span class=\"s\">'&amp;'</span> <span class=\"n\">shift_expr</span><span class=\"p\">)</span><span class=\"o\">*</span>\n<span class=\"n\">shift_expr</span><span class=\"p\">:</span> <span class=\"n\">arith_expr</span> <span class=\"p\">((</span><span class=\"s\">'&lt;&lt;'</span><span class=\"o\">|</span><span class=\"s\">'&gt;&gt;'</span><span class=\"p\">)</span> <span class=\"n\">arith_expr</span><span class=\"p\">)</span><span class=\"o\">*</span>\n<span class=\"n\">arith_expr</span><span class=\"p\">:</span> <span class=\"n\">term</span> <span class=\"p\">((</span><span class=\"s\">'+'</span><span class=\"o\">|</span><span class=\"s\">'-'</span><span class=\"p\">)</span> <span class=\"n\">term</span><span class=\"p\">)</span><span class=\"o\">*</span>\n<span class=\"n\">term</span><span class=\"p\">:</span> <span class=\"n\">factor</span> <span class=\"p\">((</span><span class=\"s\">'*'</span><span class=\"o\">|</span><span class=\"s\">'/'</span><span class=\"o\">|</span><span class=\"s\">'%'</span><span class=\"o\">|</span><span class=\"s\">'//'</span><span class=\"p\">)</span> <span class=\"n\">factor</span><span class=\"p\">)</span><span class=\"o\">*</span>\n<span class=\"n\">factor</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s\">'+'</span><span class=\"o\">|</span><span class=\"s\">'-'</span><span class=\"o\">|</span><span class=\"s\">'~'</span><span class=\"p\">)</span> <span class=\"n\">factor</span> <span class=\"o\">|</span> <span class=\"n\">power</span>\n<span class=\"n\">power</span><span class=\"p\">:</span> <span class=\"n\">atom</span> <span class=\"n\">trailer</span><span class=\"o\">*</span> <span class=\"p\">[</span><span class=\"s\">'**'</span> <span class=\"n\">factor</span><span class=\"p\">]</span>\n<span class=\"n\">atom</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s\">'('</span> <span class=\"p\">[</span><span class=\"n\">yield_expr</span><span class=\"o\">|</span><span class=\"n\">testlist_comp</span><span class=\"p\">]</span> <span class=\"s\">')'</span> <span class=\"o\">|</span>\n       <span class=\"s\">'['</span> <span class=\"p\">[</span><span class=\"n\">testlist_comp</span><span class=\"p\">]</span> <span class=\"s\">']'</span> <span class=\"o\">|</span>\n       <span class=\"s\">'{'</span> <span class=\"p\">[</span><span class=\"n\">dictorsetmaker</span><span class=\"p\">]</span> <span class=\"s\">'}'</span> <span class=\"o\">|</span>\n       <span class=\"n\">NAME</span> <span class=\"o\">|</span> <span class=\"n\">NUMBER</span> <span class=\"o\">|</span> <span class=\"n\">STRING</span><span class=\"o\">+</span> <span class=\"o\">|</span> <span class=\"s\">'...'</span> <span class=\"o\">|</span> <span class=\"s\">'None'</span> <span class=\"o\">|</span> <span class=\"s\">'True'</span> <span class=\"o\">|</span> <span class=\"s\">'False'</span><span class=\"p\">)</span>\n<span class=\"n\">testlist_comp</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">test</span><span class=\"o\">|</span><span class=\"n\">star_expr</span><span class=\"p\">)</span> <span class=\"p\">(</span> <span class=\"n\">comp_for</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"s\">','</span> <span class=\"p\">(</span><span class=\"n\">test</span><span class=\"o\">|</span><span class=\"n\">star_expr</span><span class=\"p\">))</span><span class=\"o\">*</span> <span class=\"p\">[</span><span class=\"s\">','</span><span class=\"p\">]</span> <span class=\"p\">)</span>\n<span class=\"n\">trailer</span><span class=\"p\">:</span> <span class=\"s\">'('</span> <span class=\"p\">[</span><span class=\"n\">arglist</span><span class=\"p\">]</span> <span class=\"s\">')'</span> <span class=\"o\">|</span> <span class=\"s\">'['</span> <span class=\"n\">subscriptlist</span> <span class=\"s\">']'</span> <span class=\"o\">|</span> <span class=\"s\">'.'</span> <span class=\"n\">NAME</span>\n<span class=\"n\">subscriptlist</span><span class=\"p\">:</span> <span class=\"n\">subscript</span> <span class=\"p\">(</span><span class=\"s\">','</span> <span class=\"n\">subscript</span><span class=\"p\">)</span><span class=\"o\">*</span> <span class=\"p\">[</span><span class=\"s\">','</span><span class=\"p\">]</span>\n<span class=\"n\">subscript</span><span class=\"p\">:</span> <span class=\"n\">test</span> <span class=\"o\">|</span> <span class=\"p\">[</span><span class=\"n\">test</span><span class=\"p\">]</span> <span class=\"s\">':'</span> <span class=\"p\">[</span><span class=\"n\">test</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">sliceop</span><span class=\"p\">]</span>\n<span class=\"n\">sliceop</span><span class=\"p\">:</span> <span class=\"s\">':'</span> <span class=\"p\">[</span><span class=\"n\">test</span><span class=\"p\">]</span>\n<span class=\"n\">exprlist</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"o\">|</span><span class=\"n\">star_expr</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"s\">','</span> <span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"o\">|</span><span class=\"n\">star_expr</span><span class=\"p\">))</span><span class=\"o\">*</span> <span class=\"p\">[</span><span class=\"s\">','</span><span class=\"p\">]</span>\n<span class=\"n\">testlist</span><span class=\"p\">:</span> <span class=\"n\">test</span> <span class=\"p\">(</span><span class=\"s\">','</span> <span class=\"n\">test</span><span class=\"p\">)</span><span class=\"o\">*</span> <span class=\"p\">[</span><span class=\"s\">','</span><span class=\"p\">]</span>\n<span class=\"n\">dictorsetmaker</span><span class=\"p\">:</span> <span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"n\">test</span> <span class=\"s\">':'</span> <span class=\"n\">test</span> <span class=\"p\">(</span><span class=\"n\">comp_for</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"s\">','</span> <span class=\"n\">test</span> <span class=\"s\">':'</span> <span class=\"n\">test</span><span class=\"p\">)</span><span class=\"o\">*</span> <span class=\"p\">[</span><span class=\"s\">','</span><span class=\"p\">]))</span> <span class=\"o\">|</span>\n                  <span class=\"p\">(</span><span class=\"n\">test</span> <span class=\"p\">(</span><span class=\"n\">comp_for</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"s\">','</span> <span class=\"n\">test</span><span class=\"p\">)</span><span class=\"o\">*</span> <span class=\"p\">[</span><span class=\"s\">','</span><span class=\"p\">]))</span> <span class=\"p\">)</span>\n\n<span class=\"n\">classdef</span><span class=\"p\">:</span> <span class=\"s\">'class'</span> <span class=\"n\">NAME</span> <span class=\"p\">[</span><span class=\"s\">'('</span> <span class=\"p\">[</span><span class=\"n\">arglist</span><span class=\"p\">]</span> <span class=\"s\">')'</span><span class=\"p\">]</span> <span class=\"s\">':'</span> <span class=\"n\">suite</span>\n\n<span class=\"n\">arglist</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">argument</span> <span class=\"s\">','</span><span class=\"p\">)</span><span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">argument</span> <span class=\"p\">[</span><span class=\"s\">','</span><span class=\"p\">]</span>\n                         <span class=\"o\">|</span><span class=\"s\">'*'</span> <span class=\"n\">test</span> <span class=\"p\">(</span><span class=\"s\">','</span> <span class=\"n\">argument</span><span class=\"p\">)</span><span class=\"o\">*</span> <span class=\"p\">[</span><span class=\"s\">','</span> <span class=\"s\">'**'</span> <span class=\"n\">test</span><span class=\"p\">]</span> \n                         <span class=\"o\">|</span><span class=\"s\">'**'</span> <span class=\"n\">test</span><span class=\"p\">)</span>\n<span class=\"c\"># The reason that keywords are test nodes instead of NAME is that using NAME</span>\n<span class=\"c\"># results in an ambiguity. ast.c makes sure it's a NAME.</span>\n<span class=\"n\">argument</span><span class=\"p\">:</span> <span class=\"n\">test</span> <span class=\"p\">[</span><span class=\"n\">comp_for</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"n\">test</span> <span class=\"s\">'='</span> <span class=\"n\">test</span>  <span class=\"c\"># Really [keyword '='] test</span>\n<span class=\"n\">comp_iter</span><span class=\"p\">:</span> <span class=\"n\">comp_for</span> <span class=\"o\">|</span> <span class=\"n\">comp_if</span>\n<span class=\"n\">comp_for</span><span class=\"p\">:</span> <span class=\"s\">'for'</span> <span class=\"n\">exprlist</span> <span class=\"s\">'in'</span> <span class=\"n\">or_test</span> <span class=\"p\">[</span><span class=\"n\">comp_iter</span><span class=\"p\">]</span>\n<span class=\"n\">comp_if</span><span class=\"p\">:</span> <span class=\"s\">'if'</span> <span class=\"n\">test_nocond</span> <span class=\"p\">[</span><span class=\"n\">comp_iter</span><span class=\"p\">]</span>\n\n<span class=\"c\"># not used in grammar, but may appear in \"node\" passed from Parser to Compiler</span>\n<span class=\"n\">encoding_decl</span><span class=\"p\">:</span> <span class=\"n\">NAME</span>\n\n<span class=\"n\">yield_expr</span><span class=\"p\">:</span> <span class=\"s\">'yield'</span> <span class=\"p\">[</span><span class=\"n\">yield_arg</span><span class=\"p\">]</span>\n<span class=\"n\">yield_arg</span><span class=\"p\">:</span> <span class=\"s\">'from'</span> <span class=\"n\">test</span> <span class=\"o\">|</span> <span class=\"n\">testlist</span>\n",
      "path": "div > div > div > div > div > div > div > pre",
      "selector": "div.document:nth-of-type(2) > div.documentwrapper:nth-of-type(1) > div.bodywrapper:nth-of-type(1) > div.body:nth-of-type(1) > div#full-grammar-specification.section:nth-of-type(1) > div.highlight-python3:nth-of-type(1) > div.highlight:nth-of-type(1) > pre:nth-of-type(1)",
      "text": [
        "# Grammar for Python",
        "# Note:  Changing the grammar specified in this file will most likely",
        "#        require corresponding changes in the parser module",
        "#        (../Modules/parsermodule.c).  If you can't make the changes to",
        "#        that module yourself, please co-ordinate the required changes",
        "#        with someone who can; ask around on python-dev for help.  Fred",
        "#        Drake <fdrake@acm.org> will probably be listening there.",
        "# NOTE WELL: You should also follow all the steps listed in PEP 306,",
        "# \"How to Change Python's Grammar\"",
        "# Start symbols for the grammar:",
        "#       single_input is a single interactive statement;",
        "#       file_input is a module or sequence of commands read from an input file;",
        "#       eval_input is the input for the eval() functions.",
        "# NB: compound_stmt in single_input is followed by extra NEWLINE!",
        "single_input",
        ":",
        "NEWLINE",
        "|",
        "simple_stmt",
        "|",
        "compound_stmt",
        "NEWLINE",
        "file_input",
        ":",
        "(",
        "NEWLINE",
        "|",
        "stmt",
        ")",
        "*",
        "ENDMARKER",
        "eval_input",
        ":",
        "testlist",
        "NEWLINE",
        "*",
        "ENDMARKER",
        "decorator",
        ":",
        "'@'",
        "dotted_name",
        "[",
        "'('",
        "[",
        "arglist",
        "]",
        "')'",
        "]",
        "NEWLINE",
        "decorators",
        ":",
        "decorator",
        "+",
        "decorated",
        ":",
        "decorators",
        "(",
        "classdef",
        "|",
        "funcdef",
        ")",
        "funcdef",
        ":",
        "'def'",
        "NAME",
        "parameters",
        "[",
        "'->'",
        "test",
        "]",
        "':'",
        "suite",
        "parameters",
        ":",
        "'('",
        "[",
        "typedargslist",
        "]",
        "')'",
        "typedargslist",
        ":",
        "(",
        "tfpdef",
        "[",
        "'='",
        "test",
        "]",
        "(",
        "','",
        "tfpdef",
        "[",
        "'='",
        "test",
        "])",
        "*",
        "[",
        "','",
        "[",
        "'*'",
        "[",
        "tfpdef",
        "]",
        "(",
        "','",
        "tfpdef",
        "[",
        "'='",
        "test",
        "])",
        "*",
        "[",
        "','",
        "'**'",
        "tfpdef",
        "]",
        "|",
        "'**'",
        "tfpdef",
        "]]",
        "|",
        "'*'",
        "[",
        "tfpdef",
        "]",
        "(",
        "','",
        "tfpdef",
        "[",
        "'='",
        "test",
        "])",
        "*",
        "[",
        "','",
        "'**'",
        "tfpdef",
        "]",
        "|",
        "'**'",
        "tfpdef",
        ")",
        "tfpdef",
        ":",
        "NAME",
        "[",
        "':'",
        "test",
        "]",
        "varargslist",
        ":",
        "(",
        "vfpdef",
        "[",
        "'='",
        "test",
        "]",
        "(",
        "','",
        "vfpdef",
        "[",
        "'='",
        "test",
        "])",
        "*",
        "[",
        "','",
        "[",
        "'*'",
        "[",
        "vfpdef",
        "]",
        "(",
        "','",
        "vfpdef",
        "[",
        "'='",
        "test",
        "])",
        "*",
        "[",
        "','",
        "'**'",
        "vfpdef",
        "]",
        "|",
        "'**'",
        "vfpdef",
        "]]",
        "|",
        "'*'",
        "[",
        "vfpdef",
        "]",
        "(",
        "','",
        "vfpdef",
        "[",
        "'='",
        "test",
        "])",
        "*",
        "[",
        "','",
        "'**'",
        "vfpdef",
        "]",
        "|",
        "'**'",
        "vfpdef",
        ")",
        "vfpdef",
        ":",
        "NAME",
        "stmt",
        ":",
        "simple_stmt",
        "|",
        "compound_stmt",
        "simple_stmt",
        ":",
        "small_stmt",
        "(",
        "';'",
        "small_stmt",
        ")",
        "*",
        "[",
        "';'",
        "]",
        "NEWLINE",
        "small_stmt",
        ":",
        "(",
        "expr_stmt",
        "|",
        "del_stmt",
        "|",
        "pass_stmt",
        "|",
        "flow_stmt",
        "|",
        "import_stmt",
        "|",
        "global_stmt",
        "|",
        "nonlocal_stmt",
        "|",
        "assert_stmt",
        ")",
        "expr_stmt",
        ":",
        "testlist_star_expr",
        "(",
        "augassign",
        "(",
        "yield_expr",
        "|",
        "testlist",
        ")",
        "|",
        "(",
        "'='",
        "(",
        "yield_expr",
        "|",
        "testlist_star_expr",
        "))",
        "*",
        ")",
        "testlist_star_expr",
        ":",
        "(",
        "test",
        "|",
        "star_expr",
        ")",
        "(",
        "','",
        "(",
        "test",
        "|",
        "star_expr",
        "))",
        "*",
        "[",
        "','",
        "]",
        "augassign",
        ":",
        "(",
        "'+='",
        "|",
        "'-='",
        "|",
        "'*='",
        "|",
        "'/='",
        "|",
        "'%='",
        "|",
        "'&='",
        "|",
        "'|='",
        "|",
        "'^='",
        "|",
        "'<<='",
        "|",
        "'>>='",
        "|",
        "'**='",
        "|",
        "'//='",
        ")",
        "# For normal assignments, additional restrictions enforced by the interpreter",
        "del_stmt",
        ":",
        "'del'",
        "exprlist",
        "pass_stmt",
        ":",
        "'pass'",
        "flow_stmt",
        ":",
        "break_stmt",
        "|",
        "continue_stmt",
        "|",
        "return_stmt",
        "|",
        "raise_stmt",
        "|",
        "yield_stmt",
        "break_stmt",
        ":",
        "'break'",
        "continue_stmt",
        ":",
        "'continue'",
        "return_stmt",
        ":",
        "'return'",
        "[",
        "testlist",
        "]",
        "yield_stmt",
        ":",
        "yield_expr",
        "raise_stmt",
        ":",
        "'raise'",
        "[",
        "test",
        "[",
        "'from'",
        "test",
        "]]",
        "import_stmt",
        ":",
        "import_name",
        "|",
        "import_from",
        "import_name",
        ":",
        "'import'",
        "dotted_as_names",
        "# note below: the ('.' | '...') is necessary because '...' is tokenized as ELLIPSIS",
        "import_from",
        ":",
        "(",
        "'from'",
        "((",
        "'.'",
        "|",
        "'...'",
        ")",
        "*",
        "dotted_name",
        "|",
        "(",
        "'.'",
        "|",
        "'...'",
        ")",
        "+",
        ")",
        "'import'",
        "(",
        "'*'",
        "|",
        "'('",
        "import_as_names",
        "')'",
        "|",
        "import_as_names",
        "))",
        "import_as_name",
        ":",
        "NAME",
        "[",
        "'as'",
        "NAME",
        "]",
        "dotted_as_name",
        ":",
        "dotted_name",
        "[",
        "'as'",
        "NAME",
        "]",
        "import_as_names",
        ":",
        "import_as_name",
        "(",
        "','",
        "import_as_name",
        ")",
        "*",
        "[",
        "','",
        "]",
        "dotted_as_names",
        ":",
        "dotted_as_name",
        "(",
        "','",
        "dotted_as_name",
        ")",
        "*",
        "dotted_name",
        ":",
        "NAME",
        "(",
        "'.'",
        "NAME",
        ")",
        "*",
        "global_stmt",
        ":",
        "'global'",
        "NAME",
        "(",
        "','",
        "NAME",
        ")",
        "*",
        "nonlocal_stmt",
        ":",
        "'nonlocal'",
        "NAME",
        "(",
        "','",
        "NAME",
        ")",
        "*",
        "assert_stmt",
        ":",
        "'assert'",
        "test",
        "[",
        "','",
        "test",
        "]",
        "compound_stmt",
        ":",
        "if_stmt",
        "|",
        "while_stmt",
        "|",
        "for_stmt",
        "|",
        "try_stmt",
        "|",
        "with_stmt",
        "|",
        "funcdef",
        "|",
        "classdef",
        "|",
        "decorated",
        "if_stmt",
        ":",
        "'if'",
        "test",
        "':'",
        "suite",
        "(",
        "'elif'",
        "test",
        "':'",
        "suite",
        ")",
        "*",
        "[",
        "'else'",
        "':'",
        "suite",
        "]",
        "while_stmt",
        ":",
        "'while'",
        "test",
        "':'",
        "suite",
        "[",
        "'else'",
        "':'",
        "suite",
        "]",
        "for_stmt",
        ":",
        "'for'",
        "exprlist",
        "'in'",
        "testlist",
        "':'",
        "suite",
        "[",
        "'else'",
        "':'",
        "suite",
        "]",
        "try_stmt",
        ":",
        "(",
        "'try'",
        "':'",
        "suite",
        "((",
        "except_clause",
        "':'",
        "suite",
        ")",
        "+",
        "[",
        "'else'",
        "':'",
        "suite",
        "]",
        "[",
        "'finally'",
        "':'",
        "suite",
        "]",
        "|",
        "'finally'",
        "':'",
        "suite",
        "))",
        "with_stmt",
        ":",
        "'with'",
        "with_item",
        "(",
        "','",
        "with_item",
        ")",
        "*",
        "':'",
        "suite",
        "with_item",
        ":",
        "test",
        "[",
        "'as'",
        "expr",
        "]",
        "# NB compile.c makes sure that the default except clause is last",
        "except_clause",
        ":",
        "'except'",
        "[",
        "test",
        "[",
        "'as'",
        "NAME",
        "]]",
        "suite",
        ":",
        "simple_stmt",
        "|",
        "NEWLINE",
        "INDENT",
        "stmt",
        "+",
        "DEDENT",
        "test",
        ":",
        "or_test",
        "[",
        "'if'",
        "or_test",
        "'else'",
        "test",
        "]",
        "|",
        "lambdef",
        "test_nocond",
        ":",
        "or_test",
        "|",
        "lambdef_nocond",
        "lambdef",
        ":",
        "'lambda'",
        "[",
        "varargslist",
        "]",
        "':'",
        "test",
        "lambdef_nocond",
        ":",
        "'lambda'",
        "[",
        "varargslist",
        "]",
        "':'",
        "test_nocond",
        "or_test",
        ":",
        "and_test",
        "(",
        "'or'",
        "and_test",
        ")",
        "*",
        "and_test",
        ":",
        "not_test",
        "(",
        "'and'",
        "not_test",
        ")",
        "*",
        "not_test",
        ":",
        "'not'",
        "not_test",
        "|",
        "comparison",
        "comparison",
        ":",
        "expr",
        "(",
        "comp_op",
        "expr",
        ")",
        "*",
        "# <> isn't actually a valid comparison operator in Python. It's here for the",
        "# sake of a __future__ import described in PEP 401",
        "comp_op",
        ":",
        "'<'",
        "|",
        "'>'",
        "|",
        "'=='",
        "|",
        "'>='",
        "|",
        "'<='",
        "|",
        "'<>'",
        "|",
        "'!='",
        "|",
        "'in'",
        "|",
        "'not'",
        "'in'",
        "|",
        "'is'",
        "|",
        "'is'",
        "'not'",
        "star_expr",
        ":",
        "'*'",
        "expr",
        "expr",
        ":",
        "xor_expr",
        "(",
        "'|'",
        "xor_expr",
        ")",
        "*",
        "xor_expr",
        ":",
        "and_expr",
        "(",
        "'^'",
        "and_expr",
        ")",
        "*",
        "and_expr",
        ":",
        "shift_expr",
        "(",
        "'&'",
        "shift_expr",
        ")",
        "*",
        "shift_expr",
        ":",
        "arith_expr",
        "((",
        "'<<'",
        "|",
        "'>>'",
        ")",
        "arith_expr",
        ")",
        "*",
        "arith_expr",
        ":",
        "term",
        "((",
        "'+'",
        "|",
        "'-'",
        ")",
        "term",
        ")",
        "*",
        "term",
        ":",
        "factor",
        "((",
        "'*'",
        "|",
        "'/'",
        "|",
        "'%'",
        "|",
        "'//'",
        ")",
        "factor",
        ")",
        "*",
        "factor",
        ":",
        "(",
        "'+'",
        "|",
        "'-'",
        "|",
        "'~'",
        ")",
        "factor",
        "|",
        "power",
        "power",
        ":",
        "atom",
        "trailer",
        "*",
        "[",
        "'**'",
        "factor",
        "]",
        "atom",
        ":",
        "(",
        "'('",
        "[",
        "yield_expr",
        "|",
        "testlist_comp",
        "]",
        "')'",
        "|",
        "'['",
        "[",
        "testlist_comp",
        "]",
        "']'",
        "|",
        "'{'",
        "[",
        "dictorsetmaker",
        "]",
        "'}'",
        "|",
        "NAME",
        "|",
        "NUMBER",
        "|",
        "STRING",
        "+",
        "|",
        "'...'",
        "|",
        "'None'",
        "|",
        "'True'",
        "|",
        "'False'",
        ")",
        "testlist_comp",
        ":",
        "(",
        "test",
        "|",
        "star_expr",
        ")",
        "(",
        "comp_for",
        "|",
        "(",
        "','",
        "(",
        "test",
        "|",
        "star_expr",
        "))",
        "*",
        "[",
        "','",
        "]",
        ")",
        "trailer",
        ":",
        "'('",
        "[",
        "arglist",
        "]",
        "')'",
        "|",
        "'['",
        "subscriptlist",
        "']'",
        "|",
        "'.'",
        "NAME",
        "subscriptlist",
        ":",
        "subscript",
        "(",
        "','",
        "subscript",
        ")",
        "*",
        "[",
        "','",
        "]",
        "subscript",
        ":",
        "test",
        "|",
        "[",
        "test",
        "]",
        "':'",
        "[",
        "test",
        "]",
        "[",
        "sliceop",
        "]",
        "sliceop",
        ":",
        "':'",
        "[",
        "test",
        "]",
        "exprlist",
        ":",
        "(",
        "expr",
        "|",
        "star_expr",
        ")",
        "(",
        "','",
        "(",
        "expr",
        "|",
        "star_expr",
        "))",
        "*",
        "[",
        "','",
        "]",
        "testlist",
        ":",
        "test",
        "(",
        "','",
        "test",
        ")",
        "*",
        "[",
        "','",
        "]",
        "dictorsetmaker",
        ":",
        "(",
        "(",
        "test",
        "':'",
        "test",
        "(",
        "comp_for",
        "|",
        "(",
        "','",
        "test",
        "':'",
        "test",
        ")",
        "*",
        "[",
        "','",
        "]))",
        "|",
        "(",
        "test",
        "(",
        "comp_for",
        "|",
        "(",
        "','",
        "test",
        ")",
        "*",
        "[",
        "','",
        "]))",
        ")",
        "classdef",
        ":",
        "'class'",
        "NAME",
        "[",
        "'('",
        "[",
        "arglist",
        "]",
        "')'",
        "]",
        "':'",
        "suite",
        "arglist",
        ":",
        "(",
        "argument",
        "','",
        ")",
        "*",
        "(",
        "argument",
        "[",
        "','",
        "]",
        "|",
        "'*'",
        "test",
        "(",
        "','",
        "argument",
        ")",
        "*",
        "[",
        "','",
        "'**'",
        "test",
        "]",
        "|",
        "'**'",
        "test",
        ")",
        "# The reason that keywords are test nodes instead of NAME is that using NAME",
        "# results in an ambiguity. ast.c makes sure it's a NAME.",
        "argument",
        ":",
        "test",
        "[",
        "comp_for",
        "]",
        "|",
        "test",
        "'='",
        "test",
        "# Really [keyword '='] test",
        "comp_iter",
        ":",
        "comp_for",
        "|",
        "comp_if",
        "comp_for",
        ":",
        "'for'",
        "exprlist",
        "'in'",
        "or_test",
        "[",
        "comp_iter",
        "]",
        "comp_if",
        ":",
        "'if'",
        "test_nocond",
        "[",
        "comp_iter",
        "]",
        "# not used in grammar, but may appear in \"node\" passed from Parser to Compiler",
        "encoding_decl",
        ":",
        "NAME",
        "yield_expr",
        ":",
        "'yield'",
        "[",
        "yield_arg",
        "]",
        "yield_arg",
        ":",
        "'from'",
        "test",
        "|",
        "testlist"
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 26,
        "top": 105,
        "width": 202
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "font-size": "17px",
        "line-height": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "26px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "h4:nth-of-type(1)",
      "html": "Previous topic",
      "path": "div > div > div > h4",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > h4:nth-of-type(1)",
      "text": [
        "Previous topic"
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 36,
        "top": 126,
        "width": 182
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "font-size": "13px",
        "line-height": "16px",
        "margin-bottom": "10px",
        "margin-left": "10px",
        "margin-right": "10px",
        "margin-top": "5px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "p.topless:nth-of-type(1)",
      "html": "<a href=\"toplevel_components.html\" title=\"previous chapter\">9. Top-level components</a>",
      "path": "div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > p.topless:nth-of-type(1)",
      "text": [
        "9. Top-level components"
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 26,
        "top": 168,
        "width": 202
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "font-size": "17px",
        "line-height": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "26px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "h4:nth-of-type(2)",
      "html": "Next topic",
      "path": "div > div > div > h4",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > h4:nth-of-type(2)",
      "text": [
        "Next topic"
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 36,
        "top": 189,
        "width": 182
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "font-size": "13px",
        "line-height": "16px",
        "margin-bottom": "10px",
        "margin-left": "10px",
        "margin-right": "10px",
        "margin-top": "5px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "p.topless:nth-of-type(2)",
      "html": "<a href=\"../library/index.html\" title=\"next chapter\">The Python Standard Library</a>",
      "path": "div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > p.topless:nth-of-type(2)",
      "text": [
        "The Python Standard Library"
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 26,
        "top": 233,
        "width": 202
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "font-size": "19px",
        "line-height": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "28px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "h3:nth-of-type(1)",
      "html": "This Page",
      "path": "div > div > div > h3",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > h3:nth-of-type(1)",
      "text": [
        "This Page"
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 36,
        "top": 259,
        "width": 182
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(1)",
      "html": "<a href=\"../bugs.html\">Report a Bug</a>",
      "path": "div > div > div > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul.this-page-menu:nth-of-type(1) > li:nth-of-type(1)",
      "text": [
        "Report a Bug"
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 36,
        "top": 275,
        "width": 182
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "display": "list-item",
        "font-size": "13px",
        "line-height": "16px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "li:nth-of-type(2)",
      "html": "<a href=\"../_sources/reference/grammar.txt\" rel=\"nofollow\">Show Source</a>",
      "path": "div > div > div > ul > li",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > ul.this-page-menu:nth-of-type(1) > li:nth-of-type(2)",
      "text": [
        "Show Source"
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 26,
        "top": 319,
        "width": 202
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "font-size": "19px",
        "line-height": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "28px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "h3:nth-of-type(1)",
      "html": "Quick search",
      "path": "div > div > div > div > h3",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > div#searchbox:nth-of-type(1) > h3:nth-of-type(1)",
      "text": [
        "Quick search"
      ]
    },
    {
      "bound": {
        "height": 32,
        "left": 26,
        "top": 382,
        "width": 202
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "font-size": "12px",
        "line-height": "16px",
        "margin-bottom": "12px",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "12px",
        "outline-color": "rgb(68, 68, 68)",
        "word-wrap": "break-word"
      },
      "element": "p.searchtip:nth-of-type(1)",
      "html": "\n    Enter search terms or a module, class or function name.\n    ",
      "path": "div > div > div > div > p",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div.sphinxsidebarwrapper:nth-of-type(1) > div#searchbox:nth-of-type(1) > p.searchtip:nth-of-type(1)",
      "text": [
        "\n    Enter search terms or a module, class or function name.\n    "
      ]
    },
    {
      "bound": {
        "height": 16,
        "left": 235,
        "top": 1317,
        "width": 9
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(68, 68, 68)",
        "border-left-color": "rgb(68, 68, 68)",
        "border-right-color": "rgb(68, 68, 68)",
        "border-top-color": "rgb(68, 68, 68)",
        "color": "rgb(68, 68, 68)",
        "cursor": "pointer",
        "line-height": "16px",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(68, 68, 68)",
        "position": "fixed"
      },
      "element": "span:nth-of-type(1)",
      "html": "Â«",
      "path": "div > div > div > span",
      "selector": "div.document:nth-of-type(2) > div.sphinxsidebar:nth-of-type(2) > div#sidebarbutton:nth-of-type(2) > span:nth-of-type(1)",
      "text": [
        "Â«"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 1540,
        "top": 2615,
        "width": 34
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "float": "right",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "10px",
        "outline-color": "rgb(102, 102, 102)"
      },
      "element": "li.right:nth-of-type(1)",
      "html": "\n          <a href=\"../genindex.html\" title=\"General Index\">index</a>",
      "path": "div > ul > li",
      "selector": "div.related:nth-of-type(3) > ul:nth-of-type(1) > li.right:nth-of-type(1)",
      "text": [
        "index"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 1473,
        "top": 2615,
        "width": 62
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "float": "right",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "5px",
        "outline-color": "rgb(102, 102, 102)"
      },
      "element": "li.right:nth-of-type(2)",
      "html": "\n          <a href=\"../py-modindex.html\" title=\"Python Module Index\">modules</a> |",
      "path": "div > ul > li",
      "selector": "div.related:nth-of-type(3) > ul:nth-of-type(1) > li.right:nth-of-type(2)",
      "text": [
        "modules",
        " |"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 1430,
        "top": 2615,
        "width": 38
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "float": "right",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "5px",
        "outline-color": "rgb(102, 102, 102)"
      },
      "element": "li.right:nth-of-type(3)",
      "html": "\n          <a href=\"../library/index.html\" title=\"The Python Standard Library\">next</a> |",
      "path": "div > ul > li",
      "selector": "div.related:nth-of-type(3) > ul:nth-of-type(1) > li.right:nth-of-type(3)",
      "text": [
        "next",
        " |"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 1362,
        "top": 2615,
        "width": 63
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "float": "right",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "5px",
        "outline-color": "rgb(102, 102, 102)"
      },
      "element": "li.right:nth-of-type(4)",
      "html": "\n          <a href=\"toplevel_components.html\" title=\"9. Top-level components\">previous</a> |",
      "path": "div > ul > li",
      "selector": "div.related:nth-of-type(3) > ul:nth-of-type(1) > li.right:nth-of-type(4)",
      "text": [
        "previous",
        " |"
      ]
    },
    {
      "bound": {
        "height": 30,
        "left": 16,
        "top": 2615,
        "width": 1568
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "0px",
        "outline-color": "rgb(102, 102, 102)",
        "padding-left": "10px"
      },
      "element": "ul:nth-of-type(1)",
      "html": "\n        <li class=\"right\" style=\"margin-right: 10px\">\n          <a href=\"../genindex.html\" title=\"General Index\">index</a></li>\n        <li class=\"right\">\n          <a href=\"../py-modindex.html\" title=\"Python Module Index\">modules</a> |</li>\n        <li class=\"right\">\n          <a href=\"../library/index.html\" title=\"The Python Standard Library\">next</a> |</li>\n        <li class=\"right\">\n          <a href=\"toplevel_components.html\" title=\"9. Top-level components\">previous</a> |</li>\n        <li><img src=\"../_static/py.png\" alt=\"\" style=\"vertical-align: middle; margin-top: -1px\"></li>\n        <li><a href=\"http://www.python.org/\">Python</a> Â»</li>\n        <li>\n          <span class=\"version_switcher_placeholder\"><select><option value=\"3.4\">dev (3.4)</option><option value=\"3.3\" selected=\"selected\">3.3.2</option><option value=\"3.2\">3.2</option><option value=\"2.7\">2.7</option><option value=\"2.6\">2.6</option></select></span>\n          <a href=\"../index.html\">Documentation</a> Â»\n        </li>\n\n          <li><a href=\"index.html\">The Python Language Reference</a> Â»</li> \n      ",
      "path": "div > ul",
      "selector": "div.related:nth-of-type(3) > ul:nth-of-type(1)",
      "text": [
        "Python",
        " Â»",
        "Documentation",
        " Â»\n        ",
        "The Python Language Reference",
        " Â»"
      ]
    },
    {
      "bound": {
        "height": 90,
        "left": 16,
        "top": 2645,
        "width": 1558
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(85, 85, 85)",
        "border-left-color": "rgb(85, 85, 85)",
        "border-right-color": "rgb(85, 85, 85)",
        "border-top-color": "rgb(85, 85, 85)",
        "color": "rgb(85, 85, 85)",
        "font-size": "12px",
        "line-height": "18px",
        "margin-left": "0px",
        "margin-right": "10px",
        "margin-top": "-24px",
        "outline-color": "rgb(85, 85, 85)",
        "padding-bottom": "9px",
        "padding-top": "9px",
        "text-align": "right"
      },
      "element": "div.footer:nth-of-type(4)",
      "html": "\n    Â© <a href=\"../copyright.html\">Copyright</a> 1990-2013, Python Software Foundation.\n    <br>\n    The Python Software Foundation is a non-profit corporation.\n    <a href=\"http://www.python.org/psf/donations/\">Please donate.</a>\n    <br>\n    Last updated on Aug 14, 2013.\n    <a href=\"../bugs.html\">Found a bug</a>?\n    <br>\n    Created using <a href=\"http://sphinx.pocoo.org/\">Sphinx</a> 1.0.7.\n    ",
      "path": "div",
      "selector": "div.footer:nth-of-type(4)",
      "text": [
        "\n    Â© ",
        "Copyright",
        " 1990-2013, Python Software Foundation.\n    ",
        "\n    The Python Software Foundation is a non-profit corporation.\n    ",
        "Please donate.",
        "\n    Last updated on Aug 14, 2013.\n    ",
        "Found a bug",
        "?\n    ",
        "\n    Created using ",
        "Sphinx",
        " 1.0.7.\n    "
      ]
    }
  ],
  "images": [
    {
      "bound": {
        "height": 16,
        "left": 26,
        "top": 21,
        "width": 16
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "display": "inline",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "-1px",
        "outline-color": "rgb(102, 102, 102)",
        "vertical-align": "middle"
      },
      "element": "img:nth-of-type(1)",
      "path": "div > ul > li > img",
      "selector": "div.related:nth-of-type(1) > ul:nth-of-type(1) > li:nth-of-type(5) > img:nth-of-type(1)",
      "src": "http://docs.python.org/3.3/_static/py.png"
    },
    {
      "bound": {
        "height": 16,
        "left": 26,
        "top": 2622,
        "width": 16
      },
      "computed": {
        "background-color": "rgba(0, 0, 0, 0)",
        "border-bottom-color": "rgb(102, 102, 102)",
        "border-left-color": "rgb(102, 102, 102)",
        "border-right-color": "rgb(102, 102, 102)",
        "border-top-color": "rgb(102, 102, 102)",
        "color": "rgb(102, 102, 102)",
        "display": "inline",
        "font-size": "14px",
        "line-height": "30px",
        "list-style-type": "none",
        "margin-left": "0px",
        "margin-right": "0px",
        "margin-top": "-1px",
        "outline-color": "rgb(102, 102, 102)",
        "vertical-align": "middle"
      },
      "element": "img:nth-of-type(1)",
      "path": "div > ul > li > img",
      "selector": "div.related:nth-of-type(3) > ul:nth-of-type(1) > li:nth-of-type(5) > img:nth-of-type(1)",
      "src": "http://docs.python.org/3.3/_static/py.png"
    }
  ]
}